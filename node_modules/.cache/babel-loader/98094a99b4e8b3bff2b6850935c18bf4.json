{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *\t http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { isUsernamePasswordOpts, isCognitoHostedOpts, isFederatedSignInOptions, isFederatedSignInOptionsCustom, hasCustomState } from './types';\nimport { Amplify, ConsoleLogger as Logger, Credentials, Hub, StorageHelper, Parser, JS, UniversalStorage, urlSafeDecode } from '@aws-amplify/core';\nimport { CookieStorage, CognitoUserPool, AuthenticationDetails, CognitoUser, CognitoUserSession, CognitoUserAttribute, CognitoIdToken, CognitoRefreshToken, CognitoAccessToken } from 'amazon-cognito-identity-js';\nimport { parse } from 'url';\nimport OAuth from './OAuth/OAuth';\nimport { default as urlListener } from './urlListener';\nimport { AuthError, NoUserPoolError } from './Errors';\nimport { AuthErrorTypes, CognitoHostedUIIdentityProvider } from './types/Auth';\nvar logger = new Logger('AuthClass');\nvar USER_ADMIN_SCOPE = 'aws.cognito.signin.user.admin'; // 10 sec, following this guide https://www.nngroup.com/articles/response-times-3-important-limits/\n\nvar OAUTH_FLOW_MS_TIMEOUT = 10 * 1000;\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\n\nvar dispatchAuthEvent = function (event, data, message) {\n  Hub.dispatch('auth', {\n    event: event,\n    data: data,\n    message: message\n  }, 'Auth', AMPLIFY_SYMBOL);\n}; // Cognito Documentation for max device\n// tslint:disable-next-line:max-line-length\n// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax\n\n\nvar MAX_DEVICES = 60;\n/**\n * Provide authentication steps\n */\n\nvar AuthClass =\n/** @class */\nfunction () {\n  /**\n   * Initialize Auth with AWS configurations\n   * @param {Object} config - Configuration of the Auth\n   */\n  function AuthClass(config) {\n    var _this = this;\n\n    this.userPool = null;\n    this.user = null;\n    this.oAuthFlowInProgress = false;\n    this.Credentials = Credentials;\n\n    this.wrapRefreshSessionCallback = function (callback) {\n      var wrapped = function (error, data) {\n        if (data) {\n          dispatchAuthEvent('tokenRefresh', undefined, \"New token retrieved\");\n        } else {\n          dispatchAuthEvent('tokenRefresh_failure', error, \"Failed to retrieve new token\");\n        }\n\n        return callback(error, data);\n      };\n\n      return wrapped;\n    }; // prettier-ignore\n\n\n    this.configure(config);\n    this.currentCredentials = this.currentCredentials.bind(this);\n    this.currentUserCredentials = this.currentUserCredentials.bind(this);\n    Hub.listen('auth', function (_a) {\n      var payload = _a.payload;\n      var event = payload.event;\n\n      switch (event) {\n        case 'signIn':\n          _this._storage.setItem('amplify-signin-with-hostedUI', 'false');\n\n          break;\n\n        case 'signOut':\n          _this._storage.removeItem('amplify-signin-with-hostedUI');\n\n          break;\n\n        case 'cognitoHostedUI':\n          _this._storage.setItem('amplify-signin-with-hostedUI', 'true');\n\n          break;\n      }\n    });\n  }\n\n  AuthClass.prototype.getModuleName = function () {\n    return 'Auth';\n  };\n\n  AuthClass.prototype.configure = function (config) {\n    var _this = this;\n\n    if (!config) return this._config || {};\n    logger.debug('configure Auth');\n    var conf = Object.assign({}, this._config, Parser.parseMobilehubConfig(config).Auth, config);\n    this._config = conf;\n    var _a = this._config,\n        userPoolId = _a.userPoolId,\n        userPoolWebClientId = _a.userPoolWebClientId,\n        cookieStorage = _a.cookieStorage,\n        oauth = _a.oauth,\n        region = _a.region,\n        identityPoolId = _a.identityPoolId,\n        mandatorySignIn = _a.mandatorySignIn,\n        refreshHandlers = _a.refreshHandlers,\n        identityPoolRegion = _a.identityPoolRegion,\n        clientMetadata = _a.clientMetadata,\n        endpoint = _a.endpoint;\n\n    if (!this._config.storage) {\n      // backward compatability\n      if (cookieStorage) this._storage = new CookieStorage(cookieStorage);else {\n        this._storage = config.ssr ? new UniversalStorage() : new StorageHelper().getStorage();\n      }\n    } else {\n      if (!this._isValidAuthStorage(this._config.storage)) {\n        logger.error('The storage in the Auth config is not valid!');\n        throw new Error('Empty storage object');\n      }\n\n      this._storage = this._config.storage;\n    }\n\n    this._storageSync = Promise.resolve();\n\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n\n    if (userPoolId) {\n      var userPoolData = {\n        UserPoolId: userPoolId,\n        ClientId: userPoolWebClientId,\n        endpoint: endpoint\n      };\n      userPoolData.Storage = this._storage;\n      this.userPool = new CognitoUserPool(userPoolData, this.wrapRefreshSessionCallback);\n    }\n\n    this.Credentials.configure({\n      mandatorySignIn: mandatorySignIn,\n      region: identityPoolRegion || region,\n      userPoolId: userPoolId,\n      identityPoolId: identityPoolId,\n      refreshHandlers: refreshHandlers,\n      storage: this._storage\n    }); // initialize cognitoauth client if hosted ui options provided\n    // to keep backward compatibility:\n\n    var cognitoHostedUIConfig = oauth ? isCognitoHostedOpts(this._config.oauth) ? oauth : oauth.awsCognito : undefined;\n\n    if (cognitoHostedUIConfig) {\n      var cognitoAuthParams = Object.assign({\n        cognitoClientId: userPoolWebClientId,\n        UserPoolId: userPoolId,\n        domain: cognitoHostedUIConfig['domain'],\n        scopes: cognitoHostedUIConfig['scope'],\n        redirectSignIn: cognitoHostedUIConfig['redirectSignIn'],\n        redirectSignOut: cognitoHostedUIConfig['redirectSignOut'],\n        responseType: cognitoHostedUIConfig['responseType'],\n        Storage: this._storage,\n        urlOpener: cognitoHostedUIConfig['urlOpener'],\n        clientMetadata: clientMetadata\n      }, cognitoHostedUIConfig['options']);\n      this._oAuthHandler = new OAuth({\n        scopes: cognitoAuthParams.scopes,\n        config: cognitoAuthParams,\n        cognitoClientId: cognitoAuthParams.cognitoClientId\n      }); // **NOTE** - Remove this in a future major release as it is a breaking change\n      // Prevents _handleAuthResponse from being called multiple times in Expo\n      // See https://github.com/aws-amplify/amplify-js/issues/4388\n\n      var usedResponseUrls_1 = {};\n      urlListener(function (_a) {\n        var url = _a.url;\n\n        if (usedResponseUrls_1[url]) {\n          return;\n        }\n\n        usedResponseUrls_1[url] = true;\n\n        _this._handleAuthResponse(url);\n      });\n    }\n\n    dispatchAuthEvent('configured', null, \"The Auth category has been configured successfully\");\n    return this._config;\n  };\n  /**\n   * Sign up with username, password and other attributes like phone, email\n   * @param {String | object} params - The user attributes used for signin\n   * @param {String[]} restOfAttrs - for the backward compatability\n   * @return - A promise resolves callback data if success\n   */\n\n\n  AuthClass.prototype.signUp = function (params) {\n    var _this = this;\n\n    var restOfAttrs = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      restOfAttrs[_i - 1] = arguments[_i];\n    }\n\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n\n    var username = null;\n    var password = null;\n    var attributes = [];\n    var validationData = null;\n    var clientMetadata;\n\n    if (params && typeof params === 'string') {\n      username = params;\n      password = restOfAttrs ? restOfAttrs[0] : null;\n      var email = restOfAttrs ? restOfAttrs[1] : null;\n      var phone_number = restOfAttrs ? restOfAttrs[2] : null;\n      if (email) attributes.push(new CognitoUserAttribute({\n        Name: 'email',\n        Value: email\n      }));\n      if (phone_number) attributes.push(new CognitoUserAttribute({\n        Name: 'phone_number',\n        Value: phone_number\n      }));\n    } else if (params && typeof params === 'object') {\n      username = params['username'];\n      password = params['password'];\n\n      if (params && params.clientMetadata) {\n        clientMetadata = params.clientMetadata;\n      } else if (this._config.clientMetadata) {\n        clientMetadata = this._config.clientMetadata;\n      }\n\n      var attrs_1 = params['attributes'];\n\n      if (attrs_1) {\n        Object.keys(attrs_1).map(function (key) {\n          attributes.push(new CognitoUserAttribute({\n            Name: key,\n            Value: attrs_1[key]\n          }));\n        });\n      }\n\n      var validationDataObject_1 = params['validationData'];\n\n      if (validationDataObject_1) {\n        validationData = [];\n        Object.keys(validationDataObject_1).map(function (key) {\n          validationData.push(new CognitoUserAttribute({\n            Name: key,\n            Value: validationDataObject_1[key]\n          }));\n        });\n      }\n    } else {\n      return this.rejectAuthError(AuthErrorTypes.SignUpError);\n    }\n\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n\n    logger.debug('signUp attrs:', attributes);\n    logger.debug('signUp validation data:', validationData);\n    return new Promise(function (resolve, reject) {\n      _this.userPool.signUp(username, password, attributes, validationData, function (err, data) {\n        if (err) {\n          dispatchAuthEvent('signUp_failure', err, username + \" failed to signup\");\n          reject(err);\n        } else {\n          dispatchAuthEvent('signUp', data, username + \" has signed up successfully\");\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Send the verification code to confirm sign up\n   * @param {String} username - The username to be confirmed\n   * @param {String} code - The verification code\n   * @param {ConfirmSignUpOptions} options - other options for confirm signup\n   * @return - A promise resolves callback data if success\n   */\n\n\n  AuthClass.prototype.confirmSignUp = function (username, code, options) {\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n\n    var user = this.createCognitoUser(username);\n    var forceAliasCreation = options && typeof options.forceAliasCreation === 'boolean' ? options.forceAliasCreation : true;\n    var clientMetadata;\n\n    if (options && options.clientMetadata) {\n      clientMetadata = options.clientMetadata;\n    } else if (this._config.clientMetadata) {\n      clientMetadata = this._config.clientMetadata;\n    }\n\n    return new Promise(function (resolve, reject) {\n      user.confirmRegistration(code, forceAliasCreation, function (err, data) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Resend the verification code\n   * @param {String} username - The username to be confirmed\n   * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers\n   * @return - A promise resolves code delivery details if successful\n   */\n\n\n  AuthClass.prototype.resendSignUp = function (username, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.resendConfirmationCode(function (err, data) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Sign in\n   * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options\n   * @param {String} password - The password of the username\n   * @return - A promise resolves the CognitoUser\n   */\n\n\n  AuthClass.prototype.signIn = function (usernameOrSignInOpts, pw, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n\n    var username = null;\n    var password = null;\n    var validationData = {}; // for backward compatibility\n\n    if (typeof usernameOrSignInOpts === 'string') {\n      username = usernameOrSignInOpts;\n      password = pw;\n    } else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {\n      if (typeof pw !== 'undefined') {\n        logger.warn('The password should be defined under the first parameter object!');\n      }\n\n      username = usernameOrSignInOpts.username;\n      password = usernameOrSignInOpts.password;\n      validationData = usernameOrSignInOpts.validationData;\n    } else {\n      return this.rejectAuthError(AuthErrorTypes.InvalidUsername);\n    }\n\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n\n    var authDetails = new AuthenticationDetails({\n      Username: username,\n      Password: password,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    });\n\n    if (password) {\n      return this.signInWithPassword(authDetails);\n    } else {\n      return this.signInWithoutPassword(authDetails);\n    }\n  };\n  /**\n   * Return an object with the authentication callbacks\n   * @param {CognitoUser} user - the cognito user object\n   * @param {} resolve - function called when resolving the current step\n   * @param {} reject - function called when rejecting the current step\n   * @return - an object with the callback methods for user authentication\n   */\n\n\n  AuthClass.prototype.authCallbacks = function (user, resolve, reject) {\n    var _this = this;\n\n    var that = this;\n    return {\n      onSuccess: function (session) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var cred, e_1, currentUser, e_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug(session);\n                delete user['challengeName'];\n                delete user['challengeParam'];\n                _a.label = 1;\n\n              case 1:\n                _a.trys.push([1, 4, 5, 9]);\n\n                return [4\n                /*yield*/\n                , this.Credentials.clear()];\n\n              case 2:\n                _a.sent();\n\n                return [4\n                /*yield*/\n                , this.Credentials.set(session, 'session')];\n\n              case 3:\n                cred = _a.sent();\n                logger.debug('succeed to get cognito credentials', cred);\n                return [3\n                /*break*/\n                , 9];\n\n              case 4:\n                e_1 = _a.sent();\n                logger.debug('cannot get cognito credentials', e_1);\n                return [3\n                /*break*/\n                , 9];\n\n              case 5:\n                _a.trys.push([5, 7,, 8]);\n\n                return [4\n                /*yield*/\n                , this.currentUserPoolUser()];\n\n              case 6:\n                currentUser = _a.sent();\n                that.user = currentUser;\n                dispatchAuthEvent('signIn', currentUser, \"A user \" + user.getUsername() + \" has been signed in\");\n                resolve(currentUser);\n                return [3\n                /*break*/\n                , 8];\n\n              case 7:\n                e_2 = _a.sent();\n                logger.error('Failed to get the signed in user', e_2);\n                reject(e_2);\n                return [3\n                /*break*/\n                , 8];\n\n              case 8:\n                return [7\n                /*endfinally*/\n                ];\n\n              case 9:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      },\n      onFailure: function (err) {\n        logger.debug('signIn failure', err);\n        dispatchAuthEvent('signIn_failure', err, user.getUsername() + \" failed to signin\");\n        reject(err);\n      },\n      customChallenge: function (challengeParam) {\n        logger.debug('signIn custom challenge answer required');\n        user['challengeName'] = 'CUSTOM_CHALLENGE';\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      mfaRequired: function (challengeName, challengeParam) {\n        logger.debug('signIn MFA required');\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      mfaSetup: function (challengeName, challengeParam) {\n        logger.debug('signIn mfa setup', challengeName);\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      newPasswordRequired: function (userAttributes, requiredAttributes) {\n        logger.debug('signIn new password');\n        user['challengeName'] = 'NEW_PASSWORD_REQUIRED';\n        user['challengeParam'] = {\n          userAttributes: userAttributes,\n          requiredAttributes: requiredAttributes\n        };\n        resolve(user);\n      },\n      totpRequired: function (challengeName, challengeParam) {\n        logger.debug('signIn totpRequired');\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      selectMFAType: function (challengeName, challengeParam) {\n        logger.debug('signIn selectMFAType', challengeName);\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      }\n    };\n  };\n  /**\n   * Sign in with a password\n   * @private\n   * @param {AuthenticationDetails} authDetails - the user sign in data\n   * @return - A promise resolves the CognitoUser object if success or mfa required\n   */\n\n\n  AuthClass.prototype.signInWithPassword = function (authDetails) {\n    var _this = this;\n\n    if (this.pendingSignIn) {\n      throw new Error('Pending sign-in attempt already in progress');\n    }\n\n    var user = this.createCognitoUser(authDetails.getUsername());\n    this.pendingSignIn = new Promise(function (resolve, reject) {\n      user.authenticateUser(authDetails, _this.authCallbacks(user, function (value) {\n        _this.pendingSignIn = null;\n        resolve(value);\n      }, function (error) {\n        _this.pendingSignIn = null;\n        reject(error);\n      }));\n    });\n    return this.pendingSignIn;\n  };\n  /**\n   * Sign in without a password\n   * @private\n   * @param {AuthenticationDetails} authDetails - the user sign in data\n   * @return - A promise resolves the CognitoUser object if success or mfa required\n   */\n\n\n  AuthClass.prototype.signInWithoutPassword = function (authDetails) {\n    var _this = this;\n\n    var user = this.createCognitoUser(authDetails.getUsername());\n    user.setAuthenticationFlowType('CUSTOM_AUTH');\n    return new Promise(function (resolve, reject) {\n      user.initiateAuth(authDetails, _this.authCallbacks(user, resolve, reject));\n    });\n  };\n  /**\n   * This was previously used by an authenticated user to get MFAOptions,\n   * but no longer returns a meaningful response. Refer to the documentation for\n   * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves the current preferred mfa option if success\n   */\n\n\n  AuthClass.prototype.getMFAOptions = function (user) {\n    return new Promise(function (res, rej) {\n      user.getMFAOptions(function (err, mfaOptions) {\n        if (err) {\n          logger.debug('get MFA Options failed', err);\n          rej(err);\n          return;\n        }\n\n        logger.debug('get MFA options success', mfaOptions);\n        res(mfaOptions);\n        return;\n      });\n    });\n  };\n  /**\n   * get preferred mfa method\n   * @param {CognitoUser} user - the current cognito user\n   * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA\n   */\n\n\n  AuthClass.prototype.getPreferredMFA = function (user, params) {\n    var _this = this;\n\n    var that = this;\n    return new Promise(function (res, rej) {\n      var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n      var bypassCache = params ? params.bypassCache : false;\n      user.getUserData(function (err, data) {\n        if (err) {\n          logger.debug('getting preferred mfa failed', err);\n          rej(err);\n          return;\n        }\n\n        var mfaType = that._getMfaTypeFromUserData(data);\n\n        if (!mfaType) {\n          rej('invalid MFA Type');\n          return;\n        } else {\n          res(mfaType);\n          return;\n        }\n      }, {\n        bypassCache: bypassCache,\n        clientMetadata: clientMetadata\n      });\n    });\n  };\n\n  AuthClass.prototype._getMfaTypeFromUserData = function (data) {\n    var ret = null;\n    var preferredMFA = data.PreferredMfaSetting; // if the user has used Auth.setPreferredMFA() to setup the mfa type\n    // then the \"PreferredMfaSetting\" would exist in the response\n\n    if (preferredMFA) {\n      ret = preferredMFA;\n    } else {\n      // if mfaList exists but empty, then its noMFA\n      var mfaList = data.UserMFASettingList;\n\n      if (!mfaList) {\n        // if SMS was enabled by using Auth.enableSMS(),\n        // the response would contain MFAOptions\n        // as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'\n        // if it does not exist, then it should be NOMFA\n        var MFAOptions = data.MFAOptions;\n\n        if (MFAOptions) {\n          ret = 'SMS_MFA';\n        } else {\n          ret = 'NOMFA';\n        }\n      } else if (mfaList.length === 0) {\n        ret = 'NOMFA';\n      } else {\n        logger.debug('invalid case for getPreferredMFA', data);\n      }\n    }\n\n    return ret;\n  };\n\n  AuthClass.prototype._getUserData = function (user, params) {\n    return new Promise(function (res, rej) {\n      user.getUserData(function (err, data) {\n        if (err) {\n          logger.debug('getting user data failed', err);\n          rej(err);\n          return;\n        } else {\n          res(data);\n          return;\n        }\n      }, params);\n    });\n  };\n  /**\n   * set preferred MFA method\n   * @param {CognitoUser} user - the current Cognito user\n   * @param {string} mfaMethod - preferred mfa method\n   * @return - A promise resolve if success\n   */\n\n\n  AuthClass.prototype.setPreferredMFA = function (user, mfaMethod) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientMetadata, userData, smsMfaSettings, totpMfaSettings, _a, mfaList, currentMFAType, that;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            clientMetadata = this._config.clientMetadata;\n            return [4\n            /*yield*/\n            , this._getUserData(user, {\n              bypassCache: true,\n              clientMetadata: clientMetadata\n            })];\n\n          case 1:\n            userData = _b.sent();\n            smsMfaSettings = null;\n            totpMfaSettings = null;\n            _a = mfaMethod;\n\n            switch (_a) {\n              case 'TOTP':\n                return [3\n                /*break*/\n                , 2];\n\n              case 'SOFTWARE_TOKEN_MFA':\n                return [3\n                /*break*/\n                , 2];\n\n              case 'SMS':\n                return [3\n                /*break*/\n                , 3];\n\n              case 'SMS_MFA':\n                return [3\n                /*break*/\n                , 3];\n\n              case 'NOMFA':\n                return [3\n                /*break*/\n                , 4];\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 2:\n            totpMfaSettings = {\n              PreferredMfa: true,\n              Enabled: true\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 3:\n            smsMfaSettings = {\n              PreferredMfa: true,\n              Enabled: true\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 4:\n            mfaList = userData['UserMFASettingList'];\n            return [4\n            /*yield*/\n            , this._getMfaTypeFromUserData(userData)];\n\n          case 5:\n            currentMFAType = _b.sent();\n\n            if (currentMFAType === 'NOMFA') {\n              return [2\n              /*return*/\n              , Promise.resolve('No change for mfa type')];\n            } else if (currentMFAType === 'SMS_MFA') {\n              smsMfaSettings = {\n                PreferredMfa: false,\n                Enabled: false\n              };\n            } else if (currentMFAType === 'SOFTWARE_TOKEN_MFA') {\n              totpMfaSettings = {\n                PreferredMfa: false,\n                Enabled: false\n              };\n            } else {\n              return [2\n              /*return*/\n              , this.rejectAuthError(AuthErrorTypes.InvalidMFA)];\n            } // if there is a UserMFASettingList in the response\n            // we need to disable every mfa type in that list\n\n\n            if (mfaList && mfaList.length !== 0) {\n              // to disable SMS or TOTP if exists in that list\n              mfaList.forEach(function (mfaType) {\n                if (mfaType === 'SMS_MFA') {\n                  smsMfaSettings = {\n                    PreferredMfa: false,\n                    Enabled: false\n                  };\n                } else if (mfaType === 'SOFTWARE_TOKEN_MFA') {\n                  totpMfaSettings = {\n                    PreferredMfa: false,\n                    Enabled: false\n                  };\n                }\n              });\n            }\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            logger.debug('no validmfa method provided');\n            return [2\n            /*return*/\n            , this.rejectAuthError(AuthErrorTypes.NoMFA)];\n\n          case 7:\n            that = this;\n            return [2\n            /*return*/\n            , new Promise(function (res, rej) {\n              user.setUserMfaPreference(smsMfaSettings, totpMfaSettings, function (err, result) {\n                if (err) {\n                  logger.debug('Set user mfa preference error', err);\n                  return rej(err);\n                }\n\n                logger.debug('Set user mfa success', result);\n                logger.debug('Caching the latest user data into local'); // cache the latest result into user data\n\n                user.getUserData(function (err, data) {\n                  if (err) {\n                    logger.debug('getting user data failed', err);\n                    return rej(err);\n                  } else {\n                    return res(result);\n                  }\n                }, {\n                  bypassCache: true,\n                  clientMetadata: clientMetadata\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * disable SMS\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves is success\n   */\n\n\n  AuthClass.prototype.disableSMS = function (user) {\n    return new Promise(function (res, rej) {\n      user.disableMFA(function (err, data) {\n        if (err) {\n          logger.debug('disable mfa failed', err);\n          rej(err);\n          return;\n        }\n\n        logger.debug('disable mfa succeed', data);\n        res(data);\n        return;\n      });\n    });\n  };\n  /**\n   * enable SMS\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves is success\n   */\n\n\n  AuthClass.prototype.enableSMS = function (user) {\n    return new Promise(function (res, rej) {\n      user.enableMFA(function (err, data) {\n        if (err) {\n          logger.debug('enable mfa failed', err);\n          rej(err);\n          return;\n        }\n\n        logger.debug('enable mfa succeed', data);\n        res(data);\n        return;\n      });\n    });\n  };\n  /**\n   * Setup TOTP\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves with the secret code if success\n   */\n\n\n  AuthClass.prototype.setupTOTP = function (user) {\n    return new Promise(function (res, rej) {\n      user.associateSoftwareToken({\n        onFailure: function (err) {\n          logger.debug('associateSoftwareToken failed', err);\n          rej(err);\n          return;\n        },\n        associateSecretCode: function (secretCode) {\n          logger.debug('associateSoftwareToken sucess', secretCode);\n          res(secretCode);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * verify TOTP setup\n   * @param {CognitoUser} user - the current user\n   * @param {string} challengeAnswer - challenge answer\n   * @return - A promise resolves is success\n   */\n\n\n  AuthClass.prototype.verifyTotpToken = function (user, challengeAnswer) {\n    logger.debug('verification totp token', user, challengeAnswer);\n    return new Promise(function (res, rej) {\n      user.verifySoftwareToken(challengeAnswer, 'My TOTP device', {\n        onFailure: function (err) {\n          logger.debug('verifyTotpToken failed', err);\n          rej(err);\n          return;\n        },\n        onSuccess: function (data) {\n          dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n          logger.debug('verifyTotpToken success', data);\n          res(data);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * Send MFA code to confirm sign in\n   * @param {Object} user - The CognitoUser object\n   * @param {String} code - The confirmation code\n   */\n\n\n  AuthClass.prototype.confirmSignIn = function (user, code, mfaType, clientMetadata) {\n    var _this = this;\n\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.sendMFACode(code, {\n        onSuccess: function (session) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var cred, e_3;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  logger.debug(session);\n                  _a.label = 1;\n\n                case 1:\n                  _a.trys.push([1, 4, 5, 6]);\n\n                  return [4\n                  /*yield*/\n                  , this.Credentials.clear()];\n\n                case 2:\n                  _a.sent();\n\n                  return [4\n                  /*yield*/\n                  , this.Credentials.set(session, 'session')];\n\n                case 3:\n                  cred = _a.sent();\n                  logger.debug('succeed to get cognito credentials', cred);\n                  return [3\n                  /*break*/\n                  , 6];\n\n                case 4:\n                  e_3 = _a.sent();\n                  logger.debug('cannot get cognito credentials', e_3);\n                  return [3\n                  /*break*/\n                  , 6];\n\n                case 5:\n                  that.user = user;\n                  dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n                  resolve(user);\n                  return [7\n                  /*endfinally*/\n                  ];\n\n                case 6:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        },\n        onFailure: function (err) {\n          logger.debug('confirm signIn failure', err);\n          reject(err);\n        }\n      }, mfaType, clientMetadata);\n    });\n  };\n\n  AuthClass.prototype.completeNewPassword = function (user, password, requiredAttributes, clientMetadata) {\n    var _this = this;\n\n    if (requiredAttributes === void 0) {\n      requiredAttributes = {};\n    }\n\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.completeNewPasswordChallenge(password, requiredAttributes, {\n        onSuccess: function (session) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var cred, e_4;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  logger.debug(session);\n                  _a.label = 1;\n\n                case 1:\n                  _a.trys.push([1, 4, 5, 6]);\n\n                  return [4\n                  /*yield*/\n                  , this.Credentials.clear()];\n\n                case 2:\n                  _a.sent();\n\n                  return [4\n                  /*yield*/\n                  , this.Credentials.set(session, 'session')];\n\n                case 3:\n                  cred = _a.sent();\n                  logger.debug('succeed to get cognito credentials', cred);\n                  return [3\n                  /*break*/\n                  , 6];\n\n                case 4:\n                  e_4 = _a.sent();\n                  logger.debug('cannot get cognito credentials', e_4);\n                  return [3\n                  /*break*/\n                  , 6];\n\n                case 5:\n                  that.user = user;\n                  dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n                  resolve(user);\n                  return [7\n                  /*endfinally*/\n                  ];\n\n                case 6:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        },\n        onFailure: function (err) {\n          logger.debug('completeNewPassword failure', err);\n          dispatchAuthEvent('completeNewPassword_failure', err, _this.user + \" failed to complete the new password flow\");\n          reject(err);\n        },\n        mfaRequired: function (challengeName, challengeParam) {\n          logger.debug('signIn MFA required');\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        },\n        mfaSetup: function (challengeName, challengeParam) {\n          logger.debug('signIn mfa setup', challengeName);\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        },\n        totpRequired: function (challengeName, challengeParam) {\n          logger.debug('signIn mfa setup', challengeName);\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Send the answer to a custom challenge\n   * @param {CognitoUser} user - The CognitoUser object\n   * @param {String} challengeResponses - The confirmation code\n   */\n\n\n  AuthClass.prototype.sendCustomChallengeAnswer = function (user, challengeResponses, clientMetadata) {\n    var _this = this;\n\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n\n    if (!challengeResponses) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);\n    }\n\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.sendCustomChallengeAnswer(challengeResponses, _this.authCallbacks(user, resolve, reject), clientMetadata);\n    });\n  };\n  /**\n   * Delete an authenticated users' attributes\n   * @param {CognitoUser} - The currently logged in user object\n   * @return {Promise}\n   **/\n\n\n  AuthClass.prototype.deleteUserAttributes = function (user, attributeNames) {\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      that.userSession(user).then(function (session) {\n        user.deleteAttributes(attributeNames, function (err, result) {\n          if (err) {\n            return reject(err);\n          } else {\n            return resolve(result);\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Update an authenticated users' attributes\n   * @param {CognitoUser} - The currently logged in user object\n   * @return {Promise}\n   **/\n\n\n  AuthClass.prototype.updateUserAttributes = function (user, attributes, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n\n    var attributeList = [];\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      that.userSession(user).then(function (session) {\n        for (var key in attributes) {\n          if (key !== 'sub' && key.indexOf('_verified') < 0) {\n            var attr = {\n              Name: key,\n              Value: attributes[key]\n            };\n            attributeList.push(attr);\n          }\n        }\n\n        user.updateAttributes(attributeList, function (err, result) {\n          if (err) {\n            return reject(err);\n          } else {\n            return resolve(result);\n          }\n        }, clientMetadata);\n      });\n    });\n  };\n  /**\n   * Return user attributes\n   * @param {Object} user - The CognitoUser object\n   * @return - A promise resolves to user attributes if success\n   */\n\n\n  AuthClass.prototype.userAttributes = function (user) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.userSession(user).then(function (session) {\n        user.getUserAttributes(function (err, attributes) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(attributes);\n          }\n        });\n      });\n    });\n  };\n\n  AuthClass.prototype.verifiedContact = function (user) {\n    var that = this;\n    return this.userAttributes(user).then(function (attributes) {\n      var attrs = that.attributesToObject(attributes);\n      var unverified = {};\n      var verified = {};\n\n      if (attrs['email']) {\n        if (attrs['email_verified']) {\n          verified['email'] = attrs['email'];\n        } else {\n          unverified['email'] = attrs['email'];\n        }\n      }\n\n      if (attrs['phone_number']) {\n        if (attrs['phone_number_verified']) {\n          verified['phone_number'] = attrs['phone_number'];\n        } else {\n          unverified['phone_number'] = attrs['phone_number'];\n        }\n      }\n\n      return {\n        verified: verified,\n        unverified: unverified\n      };\n    });\n  };\n  /**\n   * Get current authenticated user\n   * @return - A promise resolves to current authenticated CognitoUser if success\n   */\n\n\n  AuthClass.prototype.currentUserPoolUser = function (params) {\n    var _this = this;\n\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n\n    return new Promise(function (res, rej) {\n      _this._storageSync.then(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, clientMetadata;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!this.isOAuthInProgress()) return [3\n                /*break*/\n                , 2];\n                logger.debug('OAuth signIn in progress, waiting for resolution...');\n                return [4\n                /*yield*/\n                , new Promise(function (res) {\n                  var timeoutId = setTimeout(function () {\n                    logger.debug('OAuth signIn in progress timeout');\n                    Hub.remove('auth', hostedUISignCallback);\n                    res();\n                  }, OAUTH_FLOW_MS_TIMEOUT);\n                  Hub.listen('auth', hostedUISignCallback);\n\n                  function hostedUISignCallback(_a) {\n                    var payload = _a.payload;\n                    var event = payload.event;\n\n                    if (event === 'cognitoHostedUI' || event === 'cognitoHostedUI_failure') {\n                      logger.debug(\"OAuth signIn resolved: \" + event);\n                      clearTimeout(timeoutId);\n                      Hub.remove('auth', hostedUISignCallback);\n                      res();\n                    }\n                  }\n                })];\n\n              case 1:\n                _a.sent();\n\n                _a.label = 2;\n\n              case 2:\n                user = this.userPool.getCurrentUser();\n\n                if (!user) {\n                  logger.debug('Failed to get user from user pool');\n                  rej('No current user');\n                  return [2\n                  /*return*/\n                  ];\n                }\n\n                clientMetadata = this._config.clientMetadata; // refresh the session if the session expired.\n\n                user.getSession(function (err, session) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var bypassCache, clientMetadata, _a, scope;\n\n                    var _this = this;\n\n                    return __generator(this, function (_b) {\n                      switch (_b.label) {\n                        case 0:\n                          if (err) {\n                            logger.debug('Failed to get the user session', err);\n                            rej(err);\n                            return [2\n                            /*return*/\n                            ];\n                          }\n\n                          bypassCache = params ? params.bypassCache : false;\n                          if (!bypassCache) return [3\n                          /*break*/\n                          , 2];\n                          return [4\n                          /*yield*/\n                          , this.Credentials.clear()];\n\n                        case 1:\n                          _b.sent();\n\n                          _b.label = 2;\n\n                        case 2:\n                          clientMetadata = this._config.clientMetadata;\n                          _a = session.getAccessToken().decodePayload().scope, scope = _a === void 0 ? '' : _a;\n\n                          if (scope.split(' ').includes(USER_ADMIN_SCOPE)) {\n                            user.getUserData(function (err, data) {\n                              if (err) {\n                                logger.debug('getting user data failed', err); // Make sure the user is still valid\n\n                                if (err.message === 'User is disabled.' || err.message === 'User does not exist.' || err.message === 'Access Token has been revoked' // Session revoked by another app\n                                ) {\n                                  rej(err);\n                                } else {\n                                  // the error may also be thrown when lack of permissions to get user info etc\n                                  // in that case we just bypass the error\n                                  res(user);\n                                }\n\n                                return;\n                              }\n\n                              var preferredMFA = data.PreferredMfaSetting || 'NOMFA';\n                              var attributeList = [];\n\n                              for (var i = 0; i < data.UserAttributes.length; i++) {\n                                var attribute = {\n                                  Name: data.UserAttributes[i].Name,\n                                  Value: data.UserAttributes[i].Value\n                                };\n                                var userAttribute = new CognitoUserAttribute(attribute);\n                                attributeList.push(userAttribute);\n                              }\n\n                              var attributes = _this.attributesToObject(attributeList);\n\n                              Object.assign(user, {\n                                attributes: attributes,\n                                preferredMFA: preferredMFA\n                              });\n                              return res(user);\n                            }, {\n                              bypassCache: bypassCache,\n                              clientMetadata: clientMetadata\n                            });\n                          } else {\n                            logger.debug(\"Unable to get the user data because the \" + USER_ADMIN_SCOPE + \" \" + \"is not in the scopes of the access token\");\n                            return [2\n                            /*return*/\n                            , res(user)];\n                          }\n\n                          return [2\n                          /*return*/\n                          ];\n                      }\n                    });\n                  });\n                }, {\n                  clientMetadata: clientMetadata\n                });\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }).catch(function (e) {\n        logger.debug('Failed to sync cache info into memory', e);\n        return rej(e);\n      });\n    });\n  };\n\n  AuthClass.prototype.isOAuthInProgress = function () {\n    return this.oAuthFlowInProgress;\n  };\n  /**\n   * Get current authenticated user\n   * @param {CurrentUserOpts} - options for getting the current user\n   * @return - A promise resolves to current authenticated CognitoUser if success\n   */\n\n\n  AuthClass.prototype.currentAuthenticatedUser = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var federatedUser, e_5, federatedInfo, user, e_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting current authenticated user');\n            federatedUser = null;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_5 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_5);\n            throw e_5;\n\n          case 4:\n            try {\n              federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));\n\n              if (federatedInfo) {\n                federatedUser = __assign(__assign({}, federatedInfo.user), {\n                  token: federatedInfo.token\n                });\n              }\n            } catch (e) {\n              logger.debug('cannot load federated user from auth storage');\n            }\n\n            if (!federatedUser) return [3\n            /*break*/\n            , 5];\n            this.user = federatedUser;\n            logger.debug('get current authenticated federated user', this.user);\n            return [2\n            /*return*/\n            , this.user];\n\n          case 5:\n            logger.debug('get current authenticated userpool user');\n            user = null;\n            _a.label = 6;\n\n          case 6:\n            _a.trys.push([6, 8,, 9]);\n\n            return [4\n            /*yield*/\n            , this.currentUserPoolUser(params)];\n\n          case 7:\n            user = _a.sent();\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            e_6 = _a.sent();\n\n            if (e_6 === 'No userPool') {\n              logger.error('Cannot get the current user because the user pool is missing. ' + 'Please make sure the Auth module is configured with a valid Cognito User Pool ID');\n            }\n\n            logger.debug('The user is not authenticated by the error', e_6);\n            return [2\n            /*return*/\n            , Promise.reject('The user is not authenticated')];\n\n          case 9:\n            this.user = user;\n            return [2\n            /*return*/\n            , this.user];\n        }\n      });\n    });\n  };\n  /**\n   * Get current user's session\n   * @return - A promise resolves to session object if success\n   */\n\n\n  AuthClass.prototype.currentSession = function () {\n    var that = this;\n    logger.debug('Getting current session'); // Purposely not calling the reject method here because we don't need a console error\n\n    if (!this.userPool) {\n      return Promise.reject();\n    }\n\n    return new Promise(function (res, rej) {\n      that.currentUserPoolUser().then(function (user) {\n        that.userSession(user).then(function (session) {\n          res(session);\n          return;\n        }).catch(function (e) {\n          logger.debug('Failed to get the current session', e);\n          rej(e);\n          return;\n        });\n      }).catch(function (e) {\n        logger.debug('Failed to get the current user', e);\n        rej(e);\n        return;\n      });\n    });\n  };\n  /**\n   * Get the corresponding user session\n   * @param {Object} user - The CognitoUser object\n   * @return - A promise resolves to the session\n   */\n\n\n  AuthClass.prototype.userSession = function (user) {\n    if (!user) {\n      logger.debug('the user is null');\n      return this.rejectAuthError(AuthErrorTypes.NoUserSession);\n    }\n\n    var clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n    return new Promise(function (resolve, reject) {\n      logger.debug('Getting the session from this user:', user);\n      user.getSession(function (err, session) {\n        if (err) {\n          logger.debug('Failed to get the session from user', user);\n          reject(err);\n          return;\n        } else {\n          logger.debug('Succeed to get the user session', session);\n          resolve(session);\n          return;\n        }\n      }, {\n        clientMetadata: clientMetadata\n      });\n    });\n  };\n  /**\n   * Get authenticated credentials of current user.\n   * @return - A promise resolves to be current user's credentials\n   */\n\n\n  AuthClass.prototype.currentUserCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_7, federatedInfo;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('Getting current user credentials');\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_7 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_7);\n            throw e_7;\n\n          case 4:\n            federatedInfo = null;\n\n            try {\n              federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));\n            } catch (e) {\n              logger.debug('failed to get or parse item aws-amplify-federatedInfo', e);\n            }\n\n            if (federatedInfo) {\n              // refresh the jwt token here if necessary\n              return [2\n              /*return*/\n              , this.Credentials.refreshFederatedToken(federatedInfo)];\n            } else {\n              return [2\n              /*return*/\n              , this.currentSession().then(function (session) {\n                logger.debug('getting session success', session);\n                return _this.Credentials.set(session, 'session');\n              }).catch(function (error) {\n                logger.debug('getting session failed', error);\n                return _this.Credentials.set(null, 'guest');\n              })];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.currentCredentials = function () {\n    logger.debug('getting current credentials');\n    return this.Credentials.get();\n  };\n  /**\n   * Initiate an attribute confirmation request\n   * @param {Object} user - The CognitoUser\n   * @param {Object} attr - The attributes to be verified\n   * @return - A promise resolves to callback data if success\n   */\n\n\n  AuthClass.prototype.verifyUserAttribute = function (user, attr, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n\n    return new Promise(function (resolve, reject) {\n      user.getAttributeVerificationCode(attr, {\n        onSuccess: function (success) {\n          return resolve(success);\n        },\n        onFailure: function (err) {\n          return reject(err);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Confirm an attribute using a confirmation code\n   * @param {Object} user - The CognitoUser\n   * @param {Object} attr - The attribute to be verified\n   * @param {String} code - The confirmation code\n   * @return - A promise resolves to callback data if success\n   */\n\n\n  AuthClass.prototype.verifyUserAttributeSubmit = function (user, attr, code) {\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n\n    return new Promise(function (resolve, reject) {\n      user.verifyAttribute(attr, code, {\n        onSuccess: function (data) {\n          resolve(data);\n          return;\n        },\n        onFailure: function (err) {\n          reject(err);\n          return;\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.verifyCurrentUserAttribute = function (attr) {\n    var that = this;\n    return that.currentUserPoolUser().then(function (user) {\n      return that.verifyUserAttribute(user, attr);\n    });\n  };\n  /**\n   * Confirm current user's attribute using a confirmation code\n   * @param {Object} attr - The attribute to be verified\n   * @param {String} code - The confirmation code\n   * @return - A promise resolves to callback data if success\n   */\n\n\n  AuthClass.prototype.verifyCurrentUserAttributeSubmit = function (attr, code) {\n    var that = this;\n    return that.currentUserPoolUser().then(function (user) {\n      return that.verifyUserAttributeSubmit(user, attr, code);\n    });\n  };\n\n  AuthClass.prototype.cognitoIdentitySignOut = function (opts, user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_8, isSignedInHostedUI;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 1:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            e_8 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_8);\n            throw e_8;\n\n          case 3:\n            isSignedInHostedUI = this._oAuthHandler && this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n            return [2\n            /*return*/\n            , new Promise(function (res, rej) {\n              if (opts && opts.global) {\n                logger.debug('user global sign out', user); // in order to use global signout\n                // we must validate the user as an authenticated user by using getSession\n\n                var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n                user.getSession(function (err, result) {\n                  if (err) {\n                    logger.debug('failed to get the user session', err);\n                    return rej(err);\n                  }\n\n                  user.globalSignOut({\n                    onSuccess: function (data) {\n                      logger.debug('global sign out success');\n\n                      if (isSignedInHostedUI) {\n                        _this.oAuthSignOutRedirect(res, rej);\n                      } else {\n                        return res();\n                      }\n                    },\n                    onFailure: function (err) {\n                      logger.debug('global sign out failed', err);\n                      return rej(err);\n                    }\n                  });\n                }, {\n                  clientMetadata: clientMetadata\n                });\n              } else {\n                logger.debug('user sign out', user);\n                user.signOut(function () {\n                  if (isSignedInHostedUI) {\n                    _this.oAuthSignOutRedirect(res, rej);\n                  } else {\n                    return res();\n                  }\n                });\n              }\n            })];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.oAuthSignOutRedirect = function (resolve, reject) {\n    var isBrowser = JS.browserOrNode().isBrowser;\n\n    if (isBrowser) {\n      this.oAuthSignOutRedirectOrReject(reject);\n    } else {\n      this.oAuthSignOutAndResolve(resolve);\n    }\n  };\n\n  AuthClass.prototype.oAuthSignOutAndResolve = function (resolve) {\n    this._oAuthHandler.signOut();\n\n    resolve();\n  };\n\n  AuthClass.prototype.oAuthSignOutRedirectOrReject = function (reject) {\n    this._oAuthHandler.signOut(); // this method redirects url\n    // App should be redirected to another url otherwise it will reject\n\n\n    setTimeout(function () {\n      return reject('Signout timeout fail');\n    }, 3000);\n  };\n  /**\n   * Sign out method\n   * @\n   * @return - A promise resolved if success\n   */\n\n\n  AuthClass.prototype.signOut = function (opts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_9, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.cleanCachedItems()];\n\n          case 1:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            e_9 = _a.sent();\n            logger.debug('failed to clear cached items');\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            if (!this.userPool) return [3\n            /*break*/\n            , 7];\n            user = this.userPool.getCurrentUser();\n            if (!user) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.cognitoIdentitySignOut(opts, user)];\n\n          case 4:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            logger.debug('no current Cognito user');\n            _a.label = 6;\n\n          case 6:\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            logger.debug('no Congito User pool');\n            _a.label = 8;\n\n          case 8:\n            /**\n             * Note for future refactor - no reliable way to get username with\n             * Cognito User Pools vs Identity when federating with Social Providers\n             * This is why we need a well structured session object that can be inspected\n             * and information passed back in the message below for Hub dispatch\n             */\n            dispatchAuthEvent('signOut', this.user, \"A user has been signed out\");\n            this.user = null;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.cleanCachedItems = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // clear cognito cached item\n            return [4\n            /*yield*/\n            , this.Credentials.clear()];\n\n          case 1:\n            // clear cognito cached item\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Change a password for an authenticated user\n   * @param {Object} user - The CognitoUser object\n   * @param {String} oldPassword - the current password\n   * @param {String} newPassword - the requested new password\n   * @return - A promise resolves if success\n   */\n\n\n  AuthClass.prototype.changePassword = function (user, oldPassword, newPassword, clientMetadata) {\n    var _this = this;\n\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n\n    return new Promise(function (resolve, reject) {\n      _this.userSession(user).then(function (session) {\n        user.changePassword(oldPassword, newPassword, function (err, data) {\n          if (err) {\n            logger.debug('change password failure', err);\n            return reject(err);\n          } else {\n            return resolve(data);\n          }\n        }, clientMetadata);\n      });\n    });\n  };\n  /**\n   * Initiate a forgot password request\n   * @param {String} username - the username to change password\n   * @return - A promise resolves if success\n   */\n\n\n  AuthClass.prototype.forgotPassword = function (username, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.forgotPassword({\n        onSuccess: function () {\n          resolve();\n          return;\n        },\n        onFailure: function (err) {\n          logger.debug('forgot password failure', err);\n          dispatchAuthEvent('forgotPassword_failure', err, username + \" forgotPassword failed\");\n          reject(err);\n          return;\n        },\n        inputVerificationCode: function (data) {\n          dispatchAuthEvent('forgotPassword', user, username + \" has initiated forgot password flow\");\n          resolve(data);\n          return;\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Confirm a new password using a confirmation Code\n   * @param {String} username - The username\n   * @param {String} code - The confirmation code\n   * @param {String} password - The new password\n   * @return - A promise that resolves if success\n   */\n\n\n  AuthClass.prototype.forgotPasswordSubmit = function (username, code, password, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.confirmPassword(code, password, {\n        onSuccess: function (success) {\n          dispatchAuthEvent('forgotPasswordSubmit', user, username + \" forgotPasswordSubmit successful\");\n          resolve(success);\n          return;\n        },\n        onFailure: function (err) {\n          dispatchAuthEvent('forgotPasswordSubmit_failure', err, username + \" forgotPasswordSubmit failed\");\n          reject(err);\n          return;\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Get user information\n   * @async\n   * @return {Object }- current User's information\n   */\n\n\n  AuthClass.prototype.currentUserInfo = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var source, user, attributes, userAttrs, credentials, e_10, info, err_1, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            source = this.Credentials.getCredSource();\n            if (!(!source || source === 'aws' || source === 'userPool')) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , this.currentUserPoolUser().catch(function (err) {\n              return logger.error(err);\n            })];\n\n          case 1:\n            user = _a.sent();\n\n            if (!user) {\n              return [2\n              /*return*/\n              , null];\n            }\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 8,, 9]);\n\n            return [4\n            /*yield*/\n            , this.userAttributes(user)];\n\n          case 3:\n            attributes = _a.sent();\n            userAttrs = this.attributesToObject(attributes);\n            credentials = null;\n            _a.label = 4;\n\n          case 4:\n            _a.trys.push([4, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , this.currentCredentials()];\n\n          case 5:\n            credentials = _a.sent();\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            e_10 = _a.sent();\n            logger.debug('Failed to retrieve credentials while getting current user info', e_10);\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            info = {\n              id: credentials ? credentials.identityId : undefined,\n              username: user.getUsername(),\n              attributes: userAttrs\n            };\n            return [2\n            /*return*/\n            , info];\n\n          case 8:\n            err_1 = _a.sent();\n            logger.error('currentUserInfo error', err_1);\n            return [2\n            /*return*/\n            , {}];\n\n          case 9:\n            if (source === 'federated') {\n              user = this.user;\n              return [2\n              /*return*/\n              , user ? user : {}];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.federatedSignIn = function (providerOrOptions, response, user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var options, provider, customState, client_id, redirect_uri, provider, loggedInUser, token, identity_id, expires_at, credentials, currentUser;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._config.identityPoolId && !this._config.userPoolId) {\n              throw new Error(\"Federation requires either a User Pool or Identity Pool in config\");\n            } // Ensure backwards compatability\n\n\n            if (typeof providerOrOptions === 'undefined') {\n              if (this._config.identityPoolId && !this._config.userPoolId) {\n                throw new Error(\"Federation with Identity Pools requires tokens passed as arguments\");\n              }\n            }\n\n            if (!(isFederatedSignInOptions(providerOrOptions) || isFederatedSignInOptionsCustom(providerOrOptions) || hasCustomState(providerOrOptions) || typeof providerOrOptions === 'undefined')) return [3\n            /*break*/\n            , 1];\n            options = providerOrOptions || {\n              provider: CognitoHostedUIIdentityProvider.Cognito\n            };\n            provider = isFederatedSignInOptions(options) ? options.provider : options.customProvider;\n            customState = isFederatedSignInOptions(options) ? options.customState : options.customState;\n\n            if (this._config.userPoolId) {\n              client_id = isCognitoHostedOpts(this._config.oauth) ? this._config.userPoolWebClientId : this._config.oauth.clientID;\n              redirect_uri = isCognitoHostedOpts(this._config.oauth) ? this._config.oauth.redirectSignIn : this._config.oauth.redirectUri;\n\n              this._oAuthHandler.oauthSignIn(this._config.oauth.responseType, this._config.oauth.domain, redirect_uri, client_id, provider, customState);\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 1:\n            provider = providerOrOptions; // To check if the user is already logged in\n\n            try {\n              loggedInUser = JSON.stringify(JSON.parse(this._storage.getItem('aws-amplify-federatedInfo')).user);\n\n              if (loggedInUser) {\n                logger.warn(\"There is already a signed in user: \" + loggedInUser + \" in your app.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tYou should not call Auth.federatedSignIn method again as it may cause unexpected behavior.\");\n              }\n            } catch (e) {}\n\n            token = response.token, identity_id = response.identity_id, expires_at = response.expires_at;\n            return [4\n            /*yield*/\n            , this.Credentials.set({\n              provider: provider,\n              token: token,\n              identity_id: identity_id,\n              user: user,\n              expires_at: expires_at\n            }, 'federation')];\n\n          case 2:\n            credentials = _a.sent();\n            return [4\n            /*yield*/\n            , this.currentAuthenticatedUser()];\n\n          case 3:\n            currentUser = _a.sent();\n            dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.username + \" has been signed in\");\n            logger.debug('federated sign in credentials', credentials);\n            return [2\n            /*return*/\n            , credentials];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Used to complete the OAuth flow with or without the Cognito Hosted UI\n   * @param {String} URL - optional parameter for customers to pass in the response URL\n   */\n\n\n  AuthClass.prototype._handleAuthResponse = function (URL) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentUrl, hasCodeOrError, hasTokenOrError, _a, accessToken, idToken, refreshToken, state, session, credentials, isCustomStateIncluded, currentUser, customState, err_2;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.oAuthFlowInProgress) {\n              logger.debug(\"Skipping URL \" + URL + \" current flow in progress\");\n              return [2\n              /*return*/\n              ];\n            }\n\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1,, 8, 9]);\n\n            this.oAuthFlowInProgress = true;\n\n            if (!this._config.userPoolId) {\n              throw new Error(\"OAuth responses require a User Pool defined in config\");\n            }\n\n            dispatchAuthEvent('parsingCallbackUrl', {\n              url: URL\n            }, \"The callback url is being parsed\");\n            currentUrl = URL || (JS.browserOrNode().isBrowser ? window.location.href : '');\n            hasCodeOrError = !!(parse(currentUrl).query || '').split('&').map(function (entry) {\n              return entry.split('=');\n            }).find(function (_a) {\n              var _b = __read(_a, 1),\n                  k = _b[0];\n\n              return k === 'code' || k === 'error';\n            });\n            hasTokenOrError = !!(parse(currentUrl).hash || '#').substr(1).split('&').map(function (entry) {\n              return entry.split('=');\n            }).find(function (_a) {\n              var _b = __read(_a, 1),\n                  k = _b[0];\n\n              return k === 'access_token' || k === 'error';\n            });\n            if (!(hasCodeOrError || hasTokenOrError)) return [3\n            /*break*/\n            , 7];\n\n            this._storage.setItem('amplify-redirected-from-hosted-ui', 'true');\n\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , this._oAuthHandler.handleAuthResponse(currentUrl)];\n\n          case 3:\n            _a = _b.sent(), accessToken = _a.accessToken, idToken = _a.idToken, refreshToken = _a.refreshToken, state = _a.state;\n            session = new CognitoUserSession({\n              IdToken: new CognitoIdToken({\n                IdToken: idToken\n              }),\n              RefreshToken: new CognitoRefreshToken({\n                RefreshToken: refreshToken\n              }),\n              AccessToken: new CognitoAccessToken({\n                AccessToken: accessToken\n              })\n            });\n            credentials = void 0;\n            if (!this._config.identityPoolId) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.Credentials.set(session, 'session')];\n\n          case 4:\n            credentials = _b.sent();\n            logger.debug('AWS credentials', credentials);\n            _b.label = 5;\n\n          case 5:\n            isCustomStateIncluded = /-/.test(state);\n            currentUser = this.createCognitoUser(session.getIdToken().decodePayload()['cognito:username']); // This calls cacheTokens() in Cognito SDK\n\n            currentUser.setSignInUserSession(session);\n\n            if (window && typeof window.history !== 'undefined') {\n              window.history.replaceState({}, null, this._config.oauth.redirectSignIn);\n            }\n\n            dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in\");\n            dispatchAuthEvent('cognitoHostedUI', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in via Cognito Hosted UI\");\n\n            if (isCustomStateIncluded) {\n              customState = state.split('-').splice(1).join('-');\n              dispatchAuthEvent('customOAuthState', urlSafeDecode(customState), \"State for user \" + currentUser.getUsername());\n            } //#endregion\n\n\n            return [2\n            /*return*/\n            , credentials];\n\n          case 6:\n            err_2 = _b.sent();\n            logger.debug('Error in cognito hosted auth response', err_2); // Just like a successful handling of `?code`, replace the window history to \"dispose\" of the `code`.\n            // Otherwise, reloading the page will throw errors as the `code` has already been spent.\n\n            if (window && typeof window.history !== 'undefined') {\n              window.history.replaceState({}, null, this._config.oauth.redirectSignIn);\n            }\n\n            dispatchAuthEvent('signIn_failure', err_2, \"The OAuth response flow failed\");\n            dispatchAuthEvent('cognitoHostedUI_failure', err_2, \"A failure occurred when returning to the Cognito Hosted UI\");\n            dispatchAuthEvent('customState_failure', err_2, \"A failure occurred when returning state\");\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            this.oAuthFlowInProgress = false;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n\n\n  AuthClass.prototype.essentialCredentials = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n\n  AuthClass.prototype.attributesToObject = function (attributes) {\n    var _this = this;\n\n    var obj = {};\n\n    if (attributes) {\n      attributes.map(function (attribute) {\n        if (attribute.Name === 'email_verified' || attribute.Name === 'phone_number_verified') {\n          obj[attribute.Name] = _this.isTruthyString(attribute.Value) || attribute.Value === true;\n        } else {\n          obj[attribute.Name] = attribute.Value;\n        }\n      });\n    }\n\n    return obj;\n  };\n\n  AuthClass.prototype.isTruthyString = function (value) {\n    return typeof value.toLowerCase === 'function' && value.toLowerCase() === 'true';\n  };\n\n  AuthClass.prototype.createCognitoUser = function (username) {\n    var userData = {\n      Username: username,\n      Pool: this.userPool\n    };\n    userData.Storage = this._storage;\n    var authenticationFlowType = this._config.authenticationFlowType;\n    var user = new CognitoUser(userData);\n\n    if (authenticationFlowType) {\n      user.setAuthenticationFlowType(authenticationFlowType);\n    }\n\n    return user;\n  };\n\n  AuthClass.prototype._isValidAuthStorage = function (obj) {\n    // We need to check if the obj has the functions of Storage\n    return !!obj && typeof obj.getItem === 'function' && typeof obj.setItem === 'function' && typeof obj.removeItem === 'function' && typeof obj.clear === 'function';\n  };\n\n  AuthClass.prototype.noUserPoolErrorHandler = function (config) {\n    if (config) {\n      if (!config.userPoolId || !config.identityPoolId) {\n        return AuthErrorTypes.MissingAuthConfig;\n      }\n    }\n\n    return AuthErrorTypes.NoConfig;\n  };\n\n  AuthClass.prototype.rejectAuthError = function (type) {\n    return Promise.reject(new AuthError(type));\n  };\n\n  AuthClass.prototype.rejectNoUserPool = function () {\n    var type = this.noUserPoolErrorHandler(this._config);\n    return Promise.reject(new NoUserPoolError(type));\n  };\n\n  AuthClass.prototype.rememberDevice = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currUser, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.currentUserPoolUser()];\n\n          case 1:\n            currUser = _a.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_1 = _a.sent();\n            logger.debug('The user is not authenticated by the error', error_1);\n            return [2\n            /*return*/\n            , Promise.reject('The user is not authenticated')];\n\n          case 3:\n            currUser.getCachedDeviceKeyAndPassword();\n            return [2\n            /*return*/\n            , new Promise(function (res, rej) {\n              currUser.setDeviceStatusRemembered({\n                onSuccess: function (data) {\n                  res(data);\n                },\n                onFailure: function (err) {\n                  if (err.code === 'InvalidParameterException') {\n                    rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                  } else if (err.code === 'NetworkError') {\n                    rej(new AuthError(AuthErrorTypes.NetworkError));\n                  } else {\n                    rej(err);\n                  }\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.forgetDevice = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currUser, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.currentUserPoolUser()];\n\n          case 1:\n            currUser = _a.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_2 = _a.sent();\n            logger.debug('The user is not authenticated by the error', error_2);\n            return [2\n            /*return*/\n            , Promise.reject('The user is not authenticated')];\n\n          case 3:\n            currUser.getCachedDeviceKeyAndPassword();\n            return [2\n            /*return*/\n            , new Promise(function (res, rej) {\n              currUser.forgetDevice({\n                onSuccess: function (data) {\n                  res(data);\n                },\n                onFailure: function (err) {\n                  if (err.code === 'InvalidParameterException') {\n                    rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                  } else if (err.code === 'NetworkError') {\n                    rej(new AuthError(AuthErrorTypes.NetworkError));\n                  } else {\n                    rej(err);\n                  }\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.fetchDevices = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currUser, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.currentUserPoolUser()];\n\n          case 1:\n            currUser = _a.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_3 = _a.sent();\n            logger.debug('The user is not authenticated by the error', error_3);\n            throw new Error('The user is not authenticated');\n\n          case 3:\n            currUser.getCachedDeviceKeyAndPassword();\n            return [2\n            /*return*/\n            , new Promise(function (res, rej) {\n              var cb = {\n                onSuccess: function (data) {\n                  var deviceList = data.Devices.map(function (device) {\n                    var deviceName = device.DeviceAttributes.find(function (_a) {\n                      var Name = _a.Name;\n                      return Name === 'device_name';\n                    }) || {};\n                    var deviceInfo = {\n                      id: device.DeviceKey,\n                      name: deviceName.Value\n                    };\n                    return deviceInfo;\n                  });\n                  res(deviceList);\n                },\n                onFailure: function (err) {\n                  if (err.code === 'InvalidParameterException') {\n                    rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                  } else if (err.code === 'NetworkError') {\n                    rej(new AuthError(AuthErrorTypes.NetworkError));\n                  } else {\n                    rej(err);\n                  }\n                }\n              };\n              currUser.listDevices(MAX_DEVICES, null, cb);\n            })];\n        }\n      });\n    });\n  };\n\n  return AuthClass;\n}();\n\nexport { AuthClass };\nexport var Auth = new AuthClass(null);\nAmplify.register(Auth);","map":{"version":3,"mappings":"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","names":["isUsernamePasswordOpts","isCognitoHostedOpts","isFederatedSignInOptions","isFederatedSignInOptionsCustom","hasCustomState","Amplify","ConsoleLogger","Logger","Credentials","Hub","StorageHelper","Parser","JS","UniversalStorage","urlSafeDecode","CookieStorage","CognitoUserPool","AuthenticationDetails","CognitoUser","CognitoUserSession","CognitoUserAttribute","CognitoIdToken","CognitoRefreshToken","CognitoAccessToken","parse","OAuth","default","urlListener","AuthError","NoUserPoolError","AuthErrorTypes","CognitoHostedUIIdentityProvider","logger","USER_ADMIN_SCOPE","OAUTH_FLOW_MS_TIMEOUT","AMPLIFY_SYMBOL","Symbol","for","dispatchAuthEvent","event","data","message","dispatch","MAX_DEVICES","config","callback","wrapped","error","undefined","configure","currentCredentials","bind","currentUserCredentials","listen","_a","payload","_this","_storage","setItem","removeItem","AuthClass","_config","debug","conf","Object","assign","parseMobilehubConfig","Auth","userPoolId","userPoolWebClientId","cookieStorage","oauth","region","identityPoolId","mandatorySignIn","refreshHandlers","identityPoolRegion","clientMetadata","endpoint","storage","ssr","getStorage","_isValidAuthStorage","Error","_storageSync","Promise","resolve","userPoolData","UserPoolId","ClientId","Storage","userPool","wrapRefreshSessionCallback","cognitoHostedUIConfig","awsCognito","cognitoAuthParams","cognitoClientId","domain","scopes","redirectSignIn","redirectSignOut","responseType","urlOpener","_oAuthHandler","usedResponseUrls_1","url","_handleAuthResponse","params","restOfAttrs","rejectNoUserPool","username","password","attributes","validationData","email","phone_number","push","Name","Value","attrs_1","keys","map","key","validationDataObject_1","rejectAuthError","SignUpError","EmptyUsername","EmptyPassword","reject","signUp","err","code","options","EmptyCode","user","createCognitoUser","forceAliasCreation","confirmRegistration","resendConfirmationCode","usernameOrSignInOpts","pw","warn","InvalidUsername","authDetails","Username","Password","ValidationData","ClientMetadata","signInWithPassword","signInWithoutPassword","that","onSuccess","session","clear","set","cred","e_1","currentUserPoolUser","currentUser","getUsername","e_2","onFailure","customChallenge","challengeParam","mfaRequired","challengeName","mfaSetup","newPasswordRequired","userAttributes","requiredAttributes","totpRequired","selectMFAType","pendingSignIn","authenticateUser","authCallbacks","value","setAuthenticationFlowType","initiateAuth","res","rej","getMFAOptions","mfaOptions","bypassCache","getUserData","mfaType","_getMfaTypeFromUserData","ret","preferredMFA","PreferredMfaSetting","mfaList","UserMFASettingList","MFAOptions","length","mfaMethod","_getUserData","userData","_b","smsMfaSettings","totpMfaSettings","PreferredMfa","Enabled","currentMFAType","InvalidMFA","forEach","NoMFA","setUserMfaPreference","result","disableMFA","enableMFA","associateSoftwareToken","associateSecretCode","secretCode","challengeAnswer","verifySoftwareToken","sendMFACode","e_3","completeNewPasswordChallenge","e_4","challengeResponses","EmptyChallengeResponse","sendCustomChallengeAnswer","attributeNames","userSession","then","deleteAttributes","attributeList","indexOf","attr","updateAttributes","getUserAttributes","attrs","attributesToObject","unverified","verified","isOAuthInProgress","timeoutId","setTimeout","remove","hostedUISignCallback","clearTimeout","getCurrentUser","getSession","getAccessToken","decodePayload","scope","split","includes","i","UserAttributes","attribute","userAttribute","catch","e","oAuthFlowInProgress","federatedUser","e_5","federatedInfo","JSON","getItem","token","e_6","NoUserSession","e_7","refreshFederatedToken","currentSession","get","getAttributeVerificationCode","success","verifyAttribute","verifyUserAttribute","verifyUserAttributeSubmit","opts","e_8","isSignedInHostedUI","global","globalSignOut","oAuthSignOutRedirect","signOut","isBrowser","oAuthSignOutRedirectOrReject","oAuthSignOutAndResolve","cleanCachedItems","cognitoIdentitySignOut","oldPassword","newPassword","changePassword","forgotPassword","inputVerificationCode","confirmPassword","source","getCredSource","userAttrs","credentials","e_10","info","id","identityId","err_1","providerOrOptions","response","provider","Cognito","customProvider","customState","client_id","clientID","redirect_uri","redirectUri","oauthSignIn","loggedInUser","stringify","identity_id","expires_at","currentAuthenticatedUser","URL","currentUrl","browserOrNode","window","location","href","hasCodeOrError","query","find","k","hasTokenOrError","hash","substr","handleAuthResponse","accessToken","idToken","refreshToken","state","IdToken","RefreshToken","AccessToken","isCustomStateIncluded","test","getIdToken","setSignInUserSession","history","replaceState","splice","join","err_2","accessKeyId","sessionToken","secretAccessKey","authenticated","obj","isTruthyString","toLowerCase","Pool","authenticationFlowType","MissingAuthConfig","NoConfig","type","noUserPoolErrorHandler","currUser","error_1","getCachedDeviceKeyAndPassword","setDeviceStatusRemembered","DeviceConfig","NetworkError","error_2","forgetDevice","error_3","cb","deviceList","Devices","deviceName","device","DeviceAttributes","deviceInfo","DeviceKey","name","listDevices","register"],"sources":["/Users/richards/node_modules/@aws-amplify/auth/src/Auth.ts"],"sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *\t http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport {\n\tAuthOptions,\n\tFederatedResponse,\n\tSignUpParams,\n\tFederatedUser,\n\tConfirmSignUpOptions,\n\tSignOutOpts,\n\tCurrentUserOpts,\n\tGetPreferredMFAOpts,\n\tSignInOpts,\n\tisUsernamePasswordOpts,\n\tisCognitoHostedOpts,\n\tisFederatedSignInOptions,\n\tisFederatedSignInOptionsCustom,\n\thasCustomState,\n\tFederatedSignInOptionsCustom,\n\tLegacyProvider,\n\tFederatedSignInOptions,\n\tAwsCognitoOAuthOpts,\n\tClientMetaData,\n} from './types';\n\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tCredentials,\n\tHub,\n\tStorageHelper,\n\tICredentials,\n\tParser,\n\tJS,\n\tUniversalStorage,\n\turlSafeDecode,\n} from '@aws-amplify/core';\nimport {\n\tCookieStorage,\n\tCognitoUserPool,\n\tAuthenticationDetails,\n\tICognitoUserPoolData,\n\tICognitoUserData,\n\tISignUpResult,\n\tCognitoUser,\n\tMFAOption,\n\tCognitoUserSession,\n\tIAuthenticationCallback,\n\tICognitoUserAttributeData,\n\tCognitoUserAttribute,\n\tCognitoIdToken,\n\tCognitoRefreshToken,\n\tCognitoAccessToken,\n\tNodeCallback,\n} from 'amazon-cognito-identity-js';\n\nimport { parse } from 'url';\nimport OAuth from './OAuth/OAuth';\nimport { default as urlListener } from './urlListener';\nimport { AuthError, NoUserPoolError } from './Errors';\nimport {\n\tAuthErrorTypes,\n\tCognitoHostedUIIdentityProvider,\n\tIAuthDevice,\n} from './types/Auth';\n\nconst logger = new Logger('AuthClass');\nconst USER_ADMIN_SCOPE = 'aws.cognito.signin.user.admin';\n\n// 10 sec, following this guide https://www.nngroup.com/articles/response-times-3-important-limits/\nconst OAUTH_FLOW_MS_TIMEOUT = 10 * 1000;\n\nconst AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\ntypeof Symbol.for === 'function'\n\t? Symbol.for('amplify_default')\n\t: '@@amplify_default') as Symbol;\n\nconst dispatchAuthEvent = (event: string, data: any, message: string) => {\n\tHub.dispatch('auth', { event, data, message }, 'Auth', AMPLIFY_SYMBOL);\n};\n\n// Cognito Documentation for max device\n// tslint:disable-next-line:max-line-length\n// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax\nconst MAX_DEVICES = 60;\n\n/**\n * Provide authentication steps\n */\nexport class AuthClass {\n\tprivate _config: AuthOptions;\n\tprivate userPool: CognitoUserPool = null;\n\tprivate user: any = null;\n\tprivate _oAuthHandler: OAuth;\n\tprivate _storage;\n\tprivate _storageSync;\n\tprivate oAuthFlowInProgress: boolean = false;\n\tprivate pendingSignIn: ReturnType<AuthClass['signInWithPassword']> | null;\n\n\tCredentials = Credentials;\n\n\t/**\n\t * Initialize Auth with AWS configurations\n\t * @param {Object} config - Configuration of the Auth\n\t */\n\tconstructor(config: AuthOptions) {\n\t\tthis.configure(config);\n\t\tthis.currentCredentials = this.currentCredentials.bind(this);\n\t\tthis.currentUserCredentials = this.currentUserCredentials.bind(this);\n\n\t\tHub.listen('auth', ({ payload }) => {\n\t\t\tconst { event } = payload;\n\t\t\tswitch (event) {\n\t\t\t\tcase 'signIn':\n\t\t\t\t\tthis._storage.setItem('amplify-signin-with-hostedUI', 'false');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'signOut':\n\t\t\t\t\tthis._storage.removeItem('amplify-signin-with-hostedUI');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'cognitoHostedUI':\n\t\t\t\t\tthis._storage.setItem('amplify-signin-with-hostedUI', 'true');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Auth';\n\t}\n\n\tconfigure(config?) {\n\t\tif (!config) return this._config || {};\n\t\tlogger.debug('configure Auth');\n\t\tconst conf = Object.assign(\n\t\t\t{},\n\t\t\tthis._config,\n\t\t\tParser.parseMobilehubConfig(config).Auth,\n\t\t\tconfig\n\t\t);\n\t\tthis._config = conf;\n\t\tconst {\n\t\t\tuserPoolId,\n\t\t\tuserPoolWebClientId,\n\t\t\tcookieStorage,\n\t\t\toauth,\n\t\t\tregion,\n\t\t\tidentityPoolId,\n\t\t\tmandatorySignIn,\n\t\t\trefreshHandlers,\n\t\t\tidentityPoolRegion,\n\t\t\tclientMetadata,\n\t\t\tendpoint,\n\t\t} = this._config;\n\n\t\tif (!this._config.storage) {\n\t\t\t// backward compatability\n\t\t\tif (cookieStorage) this._storage = new CookieStorage(cookieStorage);\n\t\t\telse {\n\t\t\t\tthis._storage = config.ssr\n\t\t\t\t\t? new UniversalStorage()\n\t\t\t\t\t: new StorageHelper().getStorage();\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this._isValidAuthStorage(this._config.storage)) {\n\t\t\t\tlogger.error('The storage in the Auth config is not valid!');\n\t\t\t\tthrow new Error('Empty storage object');\n\t\t\t}\n\t\t\tthis._storage = this._config.storage;\n\t\t}\n\n\t\tthis._storageSync = Promise.resolve();\n\t\tif (typeof this._storage['sync'] === 'function') {\n\t\t\tthis._storageSync = this._storage['sync']();\n\t\t}\n\n\t\tif (userPoolId) {\n\t\t\tconst userPoolData: ICognitoUserPoolData = {\n\t\t\t\tUserPoolId: userPoolId,\n\t\t\t\tClientId: userPoolWebClientId,\n\t\t\t\tendpoint,\n\t\t\t};\n\t\t\tuserPoolData.Storage = this._storage;\n\n\t\t\tthis.userPool = new CognitoUserPool(\n\t\t\t\tuserPoolData,\n\t\t\t\tthis.wrapRefreshSessionCallback\n\t\t\t);\n\t\t}\n\n\t\tthis.Credentials.configure({\n\t\t\tmandatorySignIn,\n\t\t\tregion: identityPoolRegion || region,\n\t\t\tuserPoolId,\n\t\t\tidentityPoolId,\n\t\t\trefreshHandlers,\n\t\t\tstorage: this._storage,\n\t\t});\n\n\t\t// initialize cognitoauth client if hosted ui options provided\n\t\t// to keep backward compatibility:\n\t\tconst cognitoHostedUIConfig = oauth\n\t\t\t? isCognitoHostedOpts(this._config.oauth)\n\t\t\t\t? oauth\n\t\t\t\t: (<any>oauth).awsCognito\n\t\t\t: undefined;\n\n\t\tif (cognitoHostedUIConfig) {\n\t\t\tconst cognitoAuthParams = Object.assign(\n\t\t\t\t{\n\t\t\t\t\tcognitoClientId: userPoolWebClientId,\n\t\t\t\t\tUserPoolId: userPoolId,\n\t\t\t\t\tdomain: cognitoHostedUIConfig['domain'],\n\t\t\t\t\tscopes: cognitoHostedUIConfig['scope'],\n\t\t\t\t\tredirectSignIn: cognitoHostedUIConfig['redirectSignIn'],\n\t\t\t\t\tredirectSignOut: cognitoHostedUIConfig['redirectSignOut'],\n\t\t\t\t\tresponseType: cognitoHostedUIConfig['responseType'],\n\t\t\t\t\tStorage: this._storage,\n\t\t\t\t\turlOpener: cognitoHostedUIConfig['urlOpener'],\n\t\t\t\t\tclientMetadata,\n\t\t\t\t},\n\t\t\t\tcognitoHostedUIConfig['options']\n\t\t\t);\n\n\t\t\tthis._oAuthHandler = new OAuth({\n\t\t\t\tscopes: cognitoAuthParams.scopes,\n\t\t\t\tconfig: cognitoAuthParams,\n\t\t\t\tcognitoClientId: cognitoAuthParams.cognitoClientId,\n\t\t\t});\n\n\t\t\t// **NOTE** - Remove this in a future major release as it is a breaking change\n\t\t\t// Prevents _handleAuthResponse from being called multiple times in Expo\n\t\t\t// See https://github.com/aws-amplify/amplify-js/issues/4388\n\t\t\tconst usedResponseUrls = {};\n\t\t\turlListener(({ url }) => {\n\t\t\t\tif (usedResponseUrls[url]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tusedResponseUrls[url] = true;\n\t\t\t\tthis._handleAuthResponse(url);\n\t\t\t});\n\t\t}\n\n\t\tdispatchAuthEvent(\n\t\t\t'configured',\n\t\t\tnull,\n\t\t\t`The Auth category has been configured successfully`\n\t\t);\n\t\treturn this._config;\n\t}\n\n\twrapRefreshSessionCallback = (callback: NodeCallback.Any) => {\n\t\tconst wrapped: NodeCallback.Any = (error, data) => {\n\t\t\tif (data) {\n\t\t\t\tdispatchAuthEvent('tokenRefresh', undefined, `New token retrieved`);\n\t\t\t} else {\n\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t'tokenRefresh_failure',\n\t\t\t\t\terror,\n\t\t\t\t\t`Failed to retrieve new token`\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn callback(error, data);\n\t\t};\n\t\treturn wrapped;\n\t} // prettier-ignore\n\n\t/**\n\t * Sign up with username, password and other attributes like phone, email\n\t * @param {String | object} params - The user attributes used for signin\n\t * @param {String[]} restOfAttrs - for the backward compatability\n\t * @return - A promise resolves callback data if success\n\t */\n\tpublic signUp(\n\t\tparams: string | SignUpParams,\n\t\t...restOfAttrs: string[]\n\t): Promise<ISignUpResult> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\n\t\tlet username: string = null;\n\t\tlet password: string = null;\n\t\tconst attributes: CognitoUserAttribute[] = [];\n\t\tlet validationData: CognitoUserAttribute[] = null;\n\t\tlet clientMetadata;\n\n\t\tif (params && typeof params === 'string') {\n\t\t\tusername = params;\n\t\t\tpassword = restOfAttrs ? restOfAttrs[0] : null;\n\t\t\tconst email: string = restOfAttrs ? restOfAttrs[1] : null;\n\t\t\tconst phone_number: string = restOfAttrs ? restOfAttrs[2] : null;\n\n\t\t\tif (email)\n\t\t\t\tattributes.push(\n\t\t\t\t\tnew CognitoUserAttribute({ Name: 'email', Value: email })\n\t\t\t\t);\n\n\t\t\tif (phone_number)\n\t\t\t\tattributes.push(\n\t\t\t\t\tnew CognitoUserAttribute({\n\t\t\t\t\t\tName: 'phone_number',\n\t\t\t\t\t\tValue: phone_number,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t} else if (params && typeof params === 'object') {\n\t\t\tusername = params['username'];\n\t\t\tpassword = params['password'];\n\n\t\t\tif (params && params.clientMetadata) {\n\t\t\t\tclientMetadata = params.clientMetadata;\n\t\t\t} else if (this._config.clientMetadata) {\n\t\t\t\tclientMetadata = this._config.clientMetadata;\n\t\t\t}\n\n\t\t\tconst attrs = params['attributes'];\n\t\t\tif (attrs) {\n\t\t\t\tObject.keys(attrs).map(key => {\n\t\t\t\t\tattributes.push(\n\t\t\t\t\t\tnew CognitoUserAttribute({ Name: key, Value: attrs[key] })\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst validationDataObject = params['validationData'];\n\t\t\tif (validationDataObject) {\n\t\t\t\tvalidationData = [];\n\t\t\t\tObject.keys(validationDataObject).map(key => {\n\t\t\t\t\tvalidationData.push(\n\t\t\t\t\t\tnew CognitoUserAttribute({\n\t\t\t\t\t\t\tName: key,\n\t\t\t\t\t\t\tValue: validationDataObject[key],\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.SignUpError);\n\t\t}\n\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tif (!password) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n\t\t}\n\n\t\tlogger.debug('signUp attrs:', attributes);\n\t\tlogger.debug('signUp validation data:', validationData);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.userPool.signUp(\n\t\t\t\tusername,\n\t\t\t\tpassword,\n\t\t\t\tattributes,\n\t\t\t\tvalidationData,\n\t\t\t\t(err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'signUp_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${username} failed to signup`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'signUp',\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t`${username} has signed up successfully`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Send the verification code to confirm sign up\n\t * @param {String} username - The username to be confirmed\n\t * @param {String} code - The verification code\n\t * @param {ConfirmSignUpOptions} options - other options for confirm signup\n\t * @return - A promise resolves callback data if success\n\t */\n\tpublic confirmSignUp(\n\t\tusername: string,\n\t\tcode: string,\n\t\toptions?: ConfirmSignUpOptions\n\t): Promise<any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\tconst forceAliasCreation =\n\t\t\toptions && typeof options.forceAliasCreation === 'boolean'\n\t\t\t\t? options.forceAliasCreation\n\t\t\t\t: true;\n\n\t\tlet clientMetadata;\n\t\tif (options && options.clientMetadata) {\n\t\t\tclientMetadata = options.clientMetadata;\n\t\t} else if (this._config.clientMetadata) {\n\t\t\tclientMetadata = this._config.clientMetadata;\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.confirmRegistration(\n\t\t\t\tcode,\n\t\t\t\tforceAliasCreation,\n\t\t\t\t(err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Resend the verification code\n\t * @param {String} username - The username to be confirmed\n\t * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers\n\t * @return - A promise resolves code delivery details if successful\n\t */\n\tpublic resendSignUp(\n\t\tusername: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.resendConfirmationCode((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(data);\n\t\t\t\t}\n\t\t\t}, clientMetadata);\n\t\t});\n\t}\n\n\t/**\n\t * Sign in\n\t * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options\n\t * @param {String} password - The password of the username\n\t * @return - A promise resolves the CognitoUser\n\t */\n\tpublic signIn(\n\t\tusernameOrSignInOpts: string | SignInOpts,\n\t\tpw?: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\n\t\tlet username = null;\n\t\tlet password = null;\n\t\tlet validationData = {};\n\n\t\t// for backward compatibility\n\t\tif (typeof usernameOrSignInOpts === 'string') {\n\t\t\tusername = usernameOrSignInOpts;\n\t\t\tpassword = pw;\n\t\t} else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {\n\t\t\tif (typeof pw !== 'undefined') {\n\t\t\t\tlogger.warn(\n\t\t\t\t\t'The password should be defined under the first parameter object!'\n\t\t\t\t);\n\t\t\t}\n\t\t\tusername = usernameOrSignInOpts.username;\n\t\t\tpassword = usernameOrSignInOpts.password;\n\t\t\tvalidationData = usernameOrSignInOpts.validationData;\n\t\t} else {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.InvalidUsername);\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tconst authDetails = new AuthenticationDetails({\n\t\t\tUsername: username,\n\t\t\tPassword: password,\n\t\t\tValidationData: validationData,\n\t\t\tClientMetadata: clientMetadata,\n\t\t});\n\t\tif (password) {\n\t\t\treturn this.signInWithPassword(authDetails);\n\t\t} else {\n\t\t\treturn this.signInWithoutPassword(authDetails);\n\t\t}\n\t}\n\n\t/**\n\t * Return an object with the authentication callbacks\n\t * @param {CognitoUser} user - the cognito user object\n\t * @param {} resolve - function called when resolving the current step\n\t * @param {} reject - function called when rejecting the current step\n\t * @return - an object with the callback methods for user authentication\n\t */\n\tprivate authCallbacks(\n\t\tuser: CognitoUser,\n\t\tresolve: (value?: CognitoUser | any) => void,\n\t\treject: (value?: any) => void\n\t): IAuthenticationCallback {\n\t\tconst that = this;\n\t\treturn {\n\t\t\tonSuccess: async session => {\n\t\t\t\tlogger.debug(session);\n\t\t\t\tdelete user['challengeName'];\n\t\t\t\tdelete user['challengeParam'];\n\t\t\t\ttry {\n\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\tconst cred = await this.Credentials.set(session, 'session');\n\t\t\t\t\tlogger.debug('succeed to get cognito credentials', cred);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlogger.debug('cannot get cognito credentials', e);\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// In order to get user attributes and MFA methods\n\t\t\t\t\t\t// We need to trigger currentUserPoolUser again\n\t\t\t\t\t\tconst currentUser = await this.currentUserPoolUser();\n\t\t\t\t\t\tthat.user = currentUser;\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\t\tcurrentUser,\n\t\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(currentUser);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlogger.error('Failed to get the signed in user', e);\n\t\t\t\t\t\treject(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tonFailure: err => {\n\t\t\t\tlogger.debug('signIn failure', err);\n\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t'signIn_failure',\n\t\t\t\t\terr,\n\t\t\t\t\t`${user.getUsername()} failed to signin`\n\t\t\t\t);\n\t\t\t\treject(err);\n\t\t\t},\n\t\t\tcustomChallenge: challengeParam => {\n\t\t\t\tlogger.debug('signIn custom challenge answer required');\n\t\t\t\tuser['challengeName'] = 'CUSTOM_CHALLENGE';\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tmfaRequired: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn MFA required');\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tmfaSetup: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn mfa setup', challengeName);\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tnewPasswordRequired: (userAttributes, requiredAttributes) => {\n\t\t\t\tlogger.debug('signIn new password');\n\t\t\t\tuser['challengeName'] = 'NEW_PASSWORD_REQUIRED';\n\t\t\t\tuser['challengeParam'] = {\n\t\t\t\t\tuserAttributes,\n\t\t\t\t\trequiredAttributes,\n\t\t\t\t};\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\ttotpRequired: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn totpRequired');\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tselectMFAType: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn selectMFAType', challengeName);\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * Sign in with a password\n\t * @private\n\t * @param {AuthenticationDetails} authDetails - the user sign in data\n\t * @return - A promise resolves the CognitoUser object if success or mfa required\n\t */\n\tprivate signInWithPassword(\n\t\tauthDetails: AuthenticationDetails\n\t): Promise<CognitoUser | any> {\n\t\tif (this.pendingSignIn) {\n\t\t\tthrow new Error('Pending sign-in attempt already in progress');\n\t\t}\n\n\t\tconst user = this.createCognitoUser(authDetails.getUsername());\n\n\t\tthis.pendingSignIn = new Promise((resolve, reject) => {\n\t\t\tuser.authenticateUser(\n\t\t\t\tauthDetails,\n\t\t\t\tthis.authCallbacks(\n\t\t\t\t\tuser,\n\t\t\t\t\tvalue => {\n\t\t\t\t\t\tthis.pendingSignIn = null;\n\t\t\t\t\t\tresolve(value);\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\tthis.pendingSignIn = null;\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t});\n\n\t\treturn this.pendingSignIn;\n\t}\n\n\t/**\n\t * Sign in without a password\n\t * @private\n\t * @param {AuthenticationDetails} authDetails - the user sign in data\n\t * @return - A promise resolves the CognitoUser object if success or mfa required\n\t */\n\tprivate signInWithoutPassword(\n\t\tauthDetails: AuthenticationDetails\n\t): Promise<CognitoUser | any> {\n\t\tconst user = this.createCognitoUser(authDetails.getUsername());\n\t\tuser.setAuthenticationFlowType('CUSTOM_AUTH');\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.initiateAuth(authDetails, this.authCallbacks(user, resolve, reject));\n\t\t});\n\t}\n\n\t/**\n\t * This was previously used by an authenticated user to get MFAOptions,\n\t * but no longer returns a meaningful response. Refer to the documentation for\n\t * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n\t * @deprecated\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves the current preferred mfa option if success\n\t */\n\tpublic getMFAOptions(user: CognitoUser | any): Promise<MFAOption[]> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.getMFAOptions((err, mfaOptions) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('get MFA Options failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlogger.debug('get MFA options success', mfaOptions);\n\t\t\t\tres(mfaOptions);\n\t\t\t\treturn;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * get preferred mfa method\n\t * @param {CognitoUser} user - the current cognito user\n\t * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA\n\t */\n\tpublic getPreferredMFA(\n\t\tuser: CognitoUser | any,\n\t\tparams?: GetPreferredMFAOpts\n\t): Promise<string> {\n\t\tconst that = this;\n\t\treturn new Promise((res, rej) => {\n\t\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\t\tconst bypassCache = params ? params.bypassCache : false;\n\t\t\tuser.getUserData(\n\t\t\t\t(err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('getting preferred mfa failed', err);\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst mfaType = that._getMfaTypeFromUserData(data);\n\t\t\t\t\tif (!mfaType) {\n\t\t\t\t\t\trej('invalid MFA Type');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres(mfaType);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ bypassCache, clientMetadata }\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate _getMfaTypeFromUserData(data) {\n\t\tlet ret = null;\n\t\tconst preferredMFA = data.PreferredMfaSetting;\n\t\t// if the user has used Auth.setPreferredMFA() to setup the mfa type\n\t\t// then the \"PreferredMfaSetting\" would exist in the response\n\t\tif (preferredMFA) {\n\t\t\tret = preferredMFA;\n\t\t} else {\n\t\t\t// if mfaList exists but empty, then its noMFA\n\t\t\tconst mfaList = data.UserMFASettingList;\n\t\t\tif (!mfaList) {\n\t\t\t\t// if SMS was enabled by using Auth.enableSMS(),\n\t\t\t\t// the response would contain MFAOptions\n\t\t\t\t// as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'\n\t\t\t\t// if it does not exist, then it should be NOMFA\n\t\t\t\tconst MFAOptions = data.MFAOptions;\n\t\t\t\tif (MFAOptions) {\n\t\t\t\t\tret = 'SMS_MFA';\n\t\t\t\t} else {\n\t\t\t\t\tret = 'NOMFA';\n\t\t\t\t}\n\t\t\t} else if (mfaList.length === 0) {\n\t\t\t\tret = 'NOMFA';\n\t\t\t} else {\n\t\t\t\tlogger.debug('invalid case for getPreferredMFA', data);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n\tprivate _getUserData(user, params) {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.getUserData((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('getting user data failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tres(data);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}, params);\n\t\t});\n\t}\n\n\t/**\n\t * set preferred MFA method\n\t * @param {CognitoUser} user - the current Cognito user\n\t * @param {string} mfaMethod - preferred mfa method\n\t * @return - A promise resolve if success\n\t */\n\tpublic async setPreferredMFA(\n\t\tuser: CognitoUser | any,\n\t\tmfaMethod: 'TOTP' | 'SMS' | 'NOMFA' | 'SMS_MFA' | 'SOFTWARE_TOKEN_MFA' \n\t): Promise<string> {\n\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\tconst userData = await this._getUserData(user, {\n\t\t\tbypassCache: true,\n\t\t\tclientMetadata,\n\t\t});\n\t\tlet smsMfaSettings = null;\n\t\tlet totpMfaSettings = null;\n\n\t\tswitch (mfaMethod) {\n\t\t\tcase 'TOTP':\n\t\t\tcase 'SOFTWARE_TOKEN_MFA':\n\t\t\t\ttotpMfaSettings = {\n\t\t\t\t\tPreferredMfa: true,\n\t\t\t\t\tEnabled: true,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'SMS':\n\t\t\tcase 'SMS_MFA':\t\n\t\t\t\tsmsMfaSettings = {\n\t\t\t\t\tPreferredMfa: true,\n\t\t\t\t\tEnabled: true,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'NOMFA':\n\t\t\t\tconst mfaList = userData['UserMFASettingList'];\n\t\t\t\tconst currentMFAType = await this._getMfaTypeFromUserData(userData);\n\t\t\t\tif (currentMFAType === 'NOMFA') {\n\t\t\t\t\treturn Promise.resolve('No change for mfa type');\n\t\t\t\t} else if (currentMFAType === 'SMS_MFA') {\n\t\t\t\t\tsmsMfaSettings = {\n\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t};\n\t\t\t\t} else if (currentMFAType === 'SOFTWARE_TOKEN_MFA') {\n\t\t\t\t\ttotpMfaSettings = {\n\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn this.rejectAuthError(AuthErrorTypes.InvalidMFA);\n\t\t\t\t}\n\t\t\t\t// if there is a UserMFASettingList in the response\n\t\t\t\t// we need to disable every mfa type in that list\n\t\t\t\tif (mfaList && mfaList.length !== 0) {\n\t\t\t\t\t// to disable SMS or TOTP if exists in that list\n\t\t\t\t\tmfaList.forEach(mfaType => {\n\t\t\t\t\t\tif (mfaType === 'SMS_MFA') {\n\t\t\t\t\t\t\tsmsMfaSettings = {\n\t\t\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (mfaType === 'SOFTWARE_TOKEN_MFA') {\n\t\t\t\t\t\t\ttotpMfaSettings = {\n\t\t\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogger.debug('no validmfa method provided');\n\t\t\t\treturn this.rejectAuthError(AuthErrorTypes.NoMFA);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise<string>((res, rej) => {\n\t\t\tuser.setUserMfaPreference(\n\t\t\t\tsmsMfaSettings,\n\t\t\t\ttotpMfaSettings,\n\t\t\t\t(err, result) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('Set user mfa preference error', err);\n\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t}\n\t\t\t\t\tlogger.debug('Set user mfa success', result);\n\t\t\t\t\tlogger.debug('Caching the latest user data into local');\n\t\t\t\t\t// cache the latest result into user data\n\t\t\t\t\tuser.getUserData(\n\t\t\t\t\t\t(err, data) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tlogger.debug('getting user data failed', err);\n\t\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn res(result);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbypassCache: true,\n\t\t\t\t\t\t\tclientMetadata,\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * disable SMS\n\t * @deprecated\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves is success\n\t */\n\tpublic disableSMS(user: CognitoUser): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.disableMFA((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('disable mfa failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlogger.debug('disable mfa succeed', data);\n\t\t\t\tres(data);\n\t\t\t\treturn;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * enable SMS\n\t * @deprecated\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves is success\n\t */\n\tpublic enableSMS(user: CognitoUser): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.enableMFA((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('enable mfa failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlogger.debug('enable mfa succeed', data);\n\t\t\t\tres(data);\n\t\t\t\treturn;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Setup TOTP\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves with the secret code if success\n\t */\n\tpublic setupTOTP(user: CognitoUser | any): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.associateSoftwareToken({\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tlogger.debug('associateSoftwareToken failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t\tassociateSecretCode: secretCode => {\n\t\t\t\t\tlogger.debug('associateSoftwareToken sucess', secretCode);\n\t\t\t\t\tres(secretCode);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * verify TOTP setup\n\t * @param {CognitoUser} user - the current user\n\t * @param {string} challengeAnswer - challenge answer\n\t * @return - A promise resolves is success\n\t */\n\tpublic verifyTotpToken(\n\t\tuser: CognitoUser | any,\n\t\tchallengeAnswer: string\n\t): Promise<CognitoUserSession> {\n\t\tlogger.debug('verification totp token', user, challengeAnswer);\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.verifySoftwareToken(challengeAnswer, 'My TOTP device', {\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tlogger.debug('verifyTotpToken failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t\tonSuccess: data => {\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t);\n\t\t\t\t\tlogger.debug('verifyTotpToken success', data);\n\t\t\t\t\tres(data);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Send MFA code to confirm sign in\n\t * @param {Object} user - The CognitoUser object\n\t * @param {String} code - The confirmation code\n\t */\n\tpublic confirmSignIn(\n\t\tuser: CognitoUser | any,\n\t\tcode: string,\n\t\tmfaType?: 'SMS_MFA' | 'SOFTWARE_TOKEN_MFA' | null,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.sendMFACode(\n\t\t\t\tcode,\n\t\t\t\t{\n\t\t\t\t\tonSuccess: async session => {\n\t\t\t\t\t\tlogger.debug(session);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\t\t\tconst cred = await this.Credentials.set(session, 'session');\n\t\t\t\t\t\t\tlogger.debug('succeed to get cognito credentials', cred);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('cannot get cognito credentials', e);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tthat.user = user;\n\n\t\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tlogger.debug('confirm signIn failure', err);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmfaType,\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic completeNewPassword(\n\t\tuser: CognitoUser | any,\n\t\tpassword: string,\n\t\trequiredAttributes: any = {},\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!password) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.completeNewPasswordChallenge(\n\t\t\t\tpassword,\n\t\t\t\trequiredAttributes,\n\t\t\t\t{\n\t\t\t\t\tonSuccess: async session => {\n\t\t\t\t\t\tlogger.debug(session);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\t\t\tconst cred = await this.Credentials.set(session, 'session');\n\t\t\t\t\t\t\tlogger.debug('succeed to get cognito credentials', cred);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('cannot get cognito credentials', e);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tthat.user = user;\n\t\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tlogger.debug('completeNewPassword failure', err);\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'completeNewPassword_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${this.user} failed to complete the new password flow`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t},\n\t\t\t\t\tmfaRequired: (challengeName, challengeParam) => {\n\t\t\t\t\t\tlogger.debug('signIn MFA required');\n\t\t\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t},\n\t\t\t\t\tmfaSetup: (challengeName, challengeParam) => {\n\t\t\t\t\t\tlogger.debug('signIn mfa setup', challengeName);\n\t\t\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t},\n\t\t\t\t\ttotpRequired: (challengeName, challengeParam) => {\n\t\t\t\t\t\tlogger.debug('signIn mfa setup', challengeName);\n\t\t\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Send the answer to a custom challenge\n\t * @param {CognitoUser} user - The CognitoUser object\n\t * @param {String} challengeResponses - The confirmation code\n\t */\n\tpublic sendCustomChallengeAnswer(\n\t\tuser: CognitoUser | any,\n\t\tchallengeResponses: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!challengeResponses) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.sendCustomChallengeAnswer(\n\t\t\t\tchallengeResponses,\n\t\t\t\tthis.authCallbacks(user, resolve, reject),\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Delete an authenticated users' attributes\n\t * @param {CognitoUser} - The currently logged in user object\n\t * @return {Promise}\n\t **/\n\tpublic deleteUserAttributes(\n\t\tuser: CognitoUser | any,\n\t\tattributeNames: string[],\n\t) {\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthat.userSession(user).then(session => {\n\t\t\t\tuser.deleteAttributes(\n\t\t\t\t\tattributeNames,\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn resolve(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t}\n\n\t/**\n\t * Update an authenticated users' attributes\n\t * @param {CognitoUser} - The currently logged in user object\n\t * @return {Promise}\n\t **/\n\tpublic updateUserAttributes(\n\t\tuser: CognitoUser | any,\n\t\tattributes: object,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<string> {\n\t\tconst attributeList: ICognitoUserAttributeData[] = [];\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthat.userSession(user).then(session => {\n\t\t\t\tfor (const key in attributes) {\n\t\t\t\t\tif (key !== 'sub' && key.indexOf('_verified') < 0) {\n\t\t\t\t\t\tconst attr: ICognitoUserAttributeData = {\n\t\t\t\t\t\t\tName: key,\n\t\t\t\t\t\t\tValue: attributes[key],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tattributeList.push(attr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tuser.updateAttributes(\n\t\t\t\t\tattributeList,\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn resolve(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tclientMetadata\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n\t/**\n\t * Return user attributes\n\t * @param {Object} user - The CognitoUser object\n\t * @return - A promise resolves to user attributes if success\n\t */\n\tpublic userAttributes(\n\t\tuser: CognitoUser | any\n\t): Promise<CognitoUserAttribute[]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.userSession(user).then(session => {\n\t\t\t\tuser.getUserAttributes((err, attributes) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(attributes);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic verifiedContact(user: CognitoUser | any) {\n\t\tconst that = this;\n\t\treturn this.userAttributes(user).then(attributes => {\n\t\t\tconst attrs = that.attributesToObject(attributes);\n\t\t\tconst unverified = {};\n\t\t\tconst verified = {};\n\t\t\tif (attrs['email']) {\n\t\t\t\tif (attrs['email_verified']) {\n\t\t\t\t\tverified['email'] = attrs['email'];\n\t\t\t\t} else {\n\t\t\t\t\tunverified['email'] = attrs['email'];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (attrs['phone_number']) {\n\t\t\t\tif (attrs['phone_number_verified']) {\n\t\t\t\t\tverified['phone_number'] = attrs['phone_number'];\n\t\t\t\t} else {\n\t\t\t\t\tunverified['phone_number'] = attrs['phone_number'];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tverified,\n\t\t\t\tunverified,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Get current authenticated user\n\t * @return - A promise resolves to current authenticated CognitoUser if success\n\t */\n\tpublic currentUserPoolUser(\n\t\tparams?: CurrentUserOpts\n\t): Promise<CognitoUser | any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tthis._storageSync\n\t\t\t\t.then(async () => {\n\t\t\t\t\tif (this.isOAuthInProgress()) {\n\t\t\t\t\t\tlogger.debug('OAuth signIn in progress, waiting for resolution...');\n\n\t\t\t\t\t\tawait new Promise(res => {\n\t\t\t\t\t\t\tconst timeoutId = setTimeout(() => {\n\t\t\t\t\t\t\t\tlogger.debug('OAuth signIn in progress timeout');\n\n\t\t\t\t\t\t\t\tHub.remove('auth', hostedUISignCallback);\n\n\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t}, OAUTH_FLOW_MS_TIMEOUT);\n\n\t\t\t\t\t\t\tHub.listen('auth', hostedUISignCallback);\n\n\t\t\t\t\t\t\tfunction hostedUISignCallback({ payload }) {\n\t\t\t\t\t\t\t\tconst { event } = payload;\n\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tevent === 'cognitoHostedUI' ||\n\t\t\t\t\t\t\t\t\tevent === 'cognitoHostedUI_failure'\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tlogger.debug(`OAuth signIn resolved: ${event}`);\n\t\t\t\t\t\t\t\t\tclearTimeout(timeoutId);\n\n\t\t\t\t\t\t\t\t\tHub.remove('auth', hostedUISignCallback);\n\n\t\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tconst user = this.userPool.getCurrentUser();\n\n\t\t\t\t\tif (!user) {\n\t\t\t\t\t\tlogger.debug('Failed to get user from user pool');\n\t\t\t\t\t\trej('No current user');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\t\t\t\t// refresh the session if the session expired.\n\t\t\t\t\tuser.getSession(\n\t\t\t\t\t\tasync (err, session) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tlogger.debug('Failed to get the user session', err);\n\t\t\t\t\t\t\t\trej(err);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// get user data from Cognito\n\t\t\t\t\t\t\tconst bypassCache = params ? params.bypassCache : false;\n\n\t\t\t\t\t\t\tif (bypassCache) {\n\t\t\t\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\t\t\t\t\t\t// validate the token's scope first before calling this function\n\t\t\t\t\t\t\tconst { scope = '' } = session.getAccessToken().decodePayload();\n\t\t\t\t\t\t\tif (scope.split(' ').includes(USER_ADMIN_SCOPE)) {\n\t\t\t\t\t\t\t\tuser.getUserData(\n\t\t\t\t\t\t\t\t\t(err, data) => {\n\t\t\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\t\t\tlogger.debug('getting user data failed', err);\n\t\t\t\t\t\t\t\t\t\t\t// Make sure the user is still valid\n\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\terr.message === 'User is disabled.' ||\n\t\t\t\t\t\t\t\t\t\t\t\terr.message === 'User does not exist.' ||\n\t\t\t\t\t\t\t\t\t\t\t\terr.message === 'Access Token has been revoked' // Session revoked by another app\n\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\trej(err);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t// the error may also be thrown when lack of permissions to get user info etc\n\t\t\t\t\t\t\t\t\t\t\t\t// in that case we just bypass the error\n\t\t\t\t\t\t\t\t\t\t\t\tres(user);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tconst preferredMFA = data.PreferredMfaSetting || 'NOMFA';\n\t\t\t\t\t\t\t\t\t\tconst attributeList = [];\n\n\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < data.UserAttributes.length; i++) {\n\t\t\t\t\t\t\t\t\t\t\tconst attribute = {\n\t\t\t\t\t\t\t\t\t\t\t\tName: data.UserAttributes[i].Name,\n\t\t\t\t\t\t\t\t\t\t\t\tValue: data.UserAttributes[i].Value,\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\tconst userAttribute = new CognitoUserAttribute(attribute);\n\t\t\t\t\t\t\t\t\t\t\tattributeList.push(userAttribute);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tconst attributes = this.attributesToObject(attributeList);\n\t\t\t\t\t\t\t\t\t\tObject.assign(user, { attributes, preferredMFA });\n\t\t\t\t\t\t\t\t\t\treturn res(user);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ bypassCache, clientMetadata }\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t`Unable to get the user data because the ${USER_ADMIN_SCOPE} ` +\n\t\t\t\t\t\t\t\t\t\t`is not in the scopes of the access token`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn res(user);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ clientMetadata }\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\t\t\treturn rej(e);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate isOAuthInProgress(): boolean {\n\t\treturn this.oAuthFlowInProgress;\n\t}\n\n\t/**\n\t * Get current authenticated user\n\t * @param {CurrentUserOpts} - options for getting the current user\n\t * @return - A promise resolves to current authenticated CognitoUser if success\n\t */\n\tpublic async currentAuthenticatedUser(\n\t\tparams?: CurrentUserOpts\n\t): Promise<CognitoUser | any> {\n\t\tlogger.debug('getting current authenticated user');\n\t\tlet federatedUser = null;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\tthrow e;\n\t\t}\n\n\t\ttry {\n\t\t\tconst federatedInfo = JSON.parse(\n\t\t\t\tthis._storage.getItem('aws-amplify-federatedInfo')\n\t\t\t);\n\t\t\tif (federatedInfo) {\n\t\t\t\tfederatedUser = {\n\t\t\t\t\t...federatedInfo.user,\n\t\t\t\t\ttoken: federatedInfo.token,\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.debug('cannot load federated user from auth storage');\n\t\t}\n\n\t\tif (federatedUser) {\n\t\t\tthis.user = federatedUser;\n\t\t\tlogger.debug('get current authenticated federated user', this.user);\n\t\t\treturn this.user;\n\t\t} else {\n\t\t\tlogger.debug('get current authenticated userpool user');\n\t\t\tlet user = null;\n\t\t\ttry {\n\t\t\t\tuser = await this.currentUserPoolUser(params);\n\t\t\t} catch (e) {\n\t\t\t\tif (e === 'No userPool') {\n\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t'Cannot get the current user because the user pool is missing. ' +\n\t\t\t\t\t\t\t'Please make sure the Auth module is configured with a valid Cognito User Pool ID'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tlogger.debug('The user is not authenticated by the error', e);\n\t\t\t\treturn Promise.reject('The user is not authenticated');\n\t\t\t}\n\t\t\tthis.user = user;\n\t\t\treturn this.user;\n\t\t}\n\t}\n\n\t/**\n\t * Get current user's session\n\t * @return - A promise resolves to session object if success\n\t */\n\tpublic currentSession(): Promise<CognitoUserSession> {\n\t\tconst that = this;\n\t\tlogger.debug('Getting current session');\n\t\t// Purposely not calling the reject method here because we don't need a console error\n\t\tif (!this.userPool) {\n\t\t\treturn Promise.reject();\n\t\t}\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tthat\n\t\t\t\t.currentUserPoolUser()\n\t\t\t\t.then(user => {\n\t\t\t\t\tthat\n\t\t\t\t\t\t.userSession(user)\n\t\t\t\t\t\t.then(session => {\n\t\t\t\t\t\t\tres(session);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\t\tlogger.debug('Failed to get the current session', e);\n\t\t\t\t\t\t\trej(e);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tlogger.debug('Failed to get the current user', e);\n\t\t\t\t\trej(e);\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Get the corresponding user session\n\t * @param {Object} user - The CognitoUser object\n\t * @return - A promise resolves to the session\n\t */\n\tpublic userSession(user): Promise<CognitoUserSession> {\n\t\tif (!user) {\n\t\t\tlogger.debug('the user is null');\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.NoUserSession);\n\t\t}\n\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlogger.debug('Getting the session from this user:', user);\n\t\t\tuser.getSession(\n\t\t\t\t(err, session) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('Failed to get the session from user', user);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.debug('Succeed to get the user session', session);\n\t\t\t\t\t\tresolve(session);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ clientMetadata }\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Get authenticated credentials of current user.\n\t * @return - A promise resolves to be current user's credentials\n\t */\n\tpublic async currentUserCredentials(): Promise<ICredentials> {\n\t\tlogger.debug('Getting current user credentials');\n\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\tthrow e;\n\t\t}\n\n\t\t// first to check whether there is federation info in the auth storage\n\t\tlet federatedInfo = null;\n\t\ttry {\n\t\t\tfederatedInfo = JSON.parse(\n\t\t\t\tthis._storage.getItem('aws-amplify-federatedInfo')\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.debug('failed to get or parse item aws-amplify-federatedInfo', e);\n\t\t}\n\n\t\tif (federatedInfo) {\n\t\t\t// refresh the jwt token here if necessary\n\t\t\treturn this.Credentials.refreshFederatedToken(federatedInfo);\n\t\t} else {\n\t\t\treturn this.currentSession()\n\t\t\t\t.then(session => {\n\t\t\t\t\tlogger.debug('getting session success', session);\n\t\t\t\t\treturn this.Credentials.set(session, 'session');\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tlogger.debug('getting session failed', error);\n\t\t\t\t\treturn this.Credentials.set(null, 'guest');\n\t\t\t\t});\n\t\t}\n\t}\n\n\tpublic currentCredentials(): Promise<ICredentials> {\n\t\tlogger.debug('getting current credentials');\n\t\treturn this.Credentials.get();\n\t}\n\n\t/**\n\t * Initiate an attribute confirmation request\n\t * @param {Object} user - The CognitoUser\n\t * @param {Object} attr - The attributes to be verified\n\t * @return - A promise resolves to callback data if success\n\t */\n\tpublic verifyUserAttribute(\n\t\tuser: CognitoUser | any,\n\t\tattr: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.getAttributeVerificationCode(\n\t\t\t\tattr,\n\t\t\t\t{\n\t\t\t\t\tonSuccess(success) {\n\t\t\t\t\t\treturn resolve(success);\n\t\t\t\t\t},\n\t\t\t\t\tonFailure(err) {\n\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Confirm an attribute using a confirmation code\n\t * @param {Object} user - The CognitoUser\n\t * @param {Object} attr - The attribute to be verified\n\t * @param {String} code - The confirmation code\n\t * @return - A promise resolves to callback data if success\n\t */\n\tpublic verifyUserAttributeSubmit(\n\t\tuser: CognitoUser | any,\n\t\tattr: string,\n\t\tcode: string\n\t): Promise<string> {\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.verifyAttribute(attr, code, {\n\t\t\t\tonSuccess(data) {\n\t\t\t\t\tresolve(data);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t\tonFailure(err) {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic verifyCurrentUserAttribute(attr: string): Promise<void> {\n\t\tconst that = this;\n\t\treturn that\n\t\t\t.currentUserPoolUser()\n\t\t\t.then(user => that.verifyUserAttribute(user, attr));\n\t}\n\n\t/**\n\t * Confirm current user's attribute using a confirmation code\n\t * @param {Object} attr - The attribute to be verified\n\t * @param {String} code - The confirmation code\n\t * @return - A promise resolves to callback data if success\n\t */\n\tverifyCurrentUserAttributeSubmit(\n\t\tattr: string,\n\t\tcode: string\n\t): Promise<string> {\n\t\tconst that = this;\n\t\treturn that\n\t\t\t.currentUserPoolUser()\n\t\t\t.then(user => that.verifyUserAttributeSubmit(user, attr, code));\n\t}\n\n\tprivate async cognitoIdentitySignOut(\n\t\topts: SignOutOpts,\n\t\tuser: CognitoUser | any\n\t) {\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\tthrow e;\n\t\t}\n\n\t\tconst isSignedInHostedUI =\n\t\t\tthis._oAuthHandler &&\n\t\t\tthis._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tif (opts && opts.global) {\n\t\t\t\tlogger.debug('user global sign out', user);\n\t\t\t\t// in order to use global signout\n\t\t\t\t// we must validate the user as an authenticated user by using getSession\n\t\t\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\t\t\tuser.getSession(\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tlogger.debug('failed to get the user session', err);\n\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuser.globalSignOut({\n\t\t\t\t\t\t\tonSuccess: data => {\n\t\t\t\t\t\t\t\tlogger.debug('global sign out success');\n\t\t\t\t\t\t\t\tif (isSignedInHostedUI) {\n\t\t\t\t\t\t\t\t\tthis.oAuthSignOutRedirect(res, rej);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn res();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\t\t\tlogger.debug('global sign out failed', err);\n\t\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t{ clientMetadata }\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlogger.debug('user sign out', user);\n\t\t\t\tuser.signOut(() => {\n\t\t\t\t\tif (isSignedInHostedUI) {\n\t\t\t\t\t\tthis.oAuthSignOutRedirect(res, rej);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn res();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate oAuthSignOutRedirect(\n\t\tresolve: () => void,\n\t\treject: (reason?: any) => void\n\t) {\n\t\tconst { isBrowser } = JS.browserOrNode();\n\n\t\tif (isBrowser) {\n\t\t\tthis.oAuthSignOutRedirectOrReject(reject);\n\t\t} else {\n\t\t\tthis.oAuthSignOutAndResolve(resolve);\n\t\t}\n\t}\n\n\tprivate oAuthSignOutAndResolve(resolve: () => void) {\n\t\tthis._oAuthHandler.signOut();\n\t\tresolve();\n\t}\n\n\tprivate oAuthSignOutRedirectOrReject(reject: (reason?: any) => void) {\n\t\tthis._oAuthHandler.signOut(); // this method redirects url\n\n\t\t// App should be redirected to another url otherwise it will reject\n\t\tsetTimeout(() => reject('Signout timeout fail'), 3000);\n\t}\n\n\t/**\n\t * Sign out method\n\t * @\n\t * @return - A promise resolved if success\n\t */\n\tpublic async signOut(opts?: SignOutOpts): Promise<any> {\n\t\ttry {\n\t\t\tawait this.cleanCachedItems();\n\t\t} catch (e) {\n\t\t\tlogger.debug('failed to clear cached items');\n\t\t}\n\n\t\tif (this.userPool) {\n\t\t\tconst user = this.userPool.getCurrentUser();\n\t\t\tif (user) {\n\t\t\t\tawait this.cognitoIdentitySignOut(opts, user);\n\t\t\t} else {\n\t\t\t\tlogger.debug('no current Cognito user');\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.debug('no Congito User pool');\n\t\t}\n\n\t\t/**\n\t\t * Note for future refactor - no reliable way to get username with\n\t\t * Cognito User Pools vs Identity when federating with Social Providers\n\t\t * This is why we need a well structured session object that can be inspected\n\t\t * and information passed back in the message below for Hub dispatch\n\t\t */\n\t\tdispatchAuthEvent('signOut', this.user, `A user has been signed out`);\n\t\tthis.user = null;\n\t}\n\n\tprivate async cleanCachedItems() {\n\t\t// clear cognito cached item\n\t\tawait this.Credentials.clear();\n\t}\n\n\t/**\n\t * Change a password for an authenticated user\n\t * @param {Object} user - The CognitoUser object\n\t * @param {String} oldPassword - the current password\n\t * @param {String} newPassword - the requested new password\n\t * @return - A promise resolves if success\n\t */\n\tpublic changePassword(\n\t\tuser: CognitoUser | any,\n\t\toldPassword: string,\n\t\tnewPassword: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<'SUCCESS'> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.userSession(user).then(session => {\n\t\t\t\tuser.changePassword(\n\t\t\t\t\toldPassword,\n\t\t\t\t\tnewPassword,\n\t\t\t\t\t(err, data) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tlogger.debug('change password failure', err);\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn resolve(data);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tclientMetadata\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Initiate a forgot password request\n\t * @param {String} username - the username to change password\n\t * @return - A promise resolves if success\n\t */\n\tpublic forgotPassword(\n\t\tusername: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.forgotPassword(\n\t\t\t\t{\n\t\t\t\t\tonSuccess: () => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tlogger.debug('forgot password failure', err);\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPassword_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${username} forgotPassword failed`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t\tinputVerificationCode: data => {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPassword',\n\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t`${username} has initiated forgot password flow`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Confirm a new password using a confirmation Code\n\t * @param {String} username - The username\n\t * @param {String} code - The confirmation code\n\t * @param {String} password - The new password\n\t * @return - A promise that resolves if success\n\t */\n\tpublic forgotPasswordSubmit(\n\t\tusername: string,\n\t\tcode: string,\n\t\tpassword: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<string> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\t\tif (!password) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.confirmPassword(\n\t\t\t\tcode,\n\t\t\t\tpassword,\n\t\t\t\t{\n\t\t\t\t\tonSuccess: (success) => {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPasswordSubmit',\n\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t`${username} forgotPasswordSubmit successful`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(success);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPasswordSubmit_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${username} forgotPasswordSubmit failed`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Get user information\n\t * @async\n\t * @return {Object }- current User's information\n\t */\n\tpublic async currentUserInfo() {\n\t\tconst source = this.Credentials.getCredSource();\n\n\t\tif (!source || source === 'aws' || source === 'userPool') {\n\t\t\tconst user = await this.currentUserPoolUser().catch(err =>\n\t\t\t\tlogger.error(err)\n\t\t\t);\n\t\t\tif (!user) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst attributes = await this.userAttributes(user);\n\t\t\t\tconst userAttrs: object = this.attributesToObject(attributes);\n\t\t\t\tlet credentials = null;\n\t\t\t\ttry {\n\t\t\t\t\tcredentials = await this.currentCredentials();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t'Failed to retrieve credentials while getting current user info',\n\t\t\t\t\t\te\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst info = {\n\t\t\t\t\tid: credentials ? credentials.identityId : undefined,\n\t\t\t\t\tusername: user.getUsername(),\n\t\t\t\t\tattributes: userAttrs,\n\t\t\t\t};\n\t\t\t\treturn info;\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error('currentUserInfo error', err);\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\n\t\tif (source === 'federated') {\n\t\t\tconst user = this.user;\n\t\t\treturn user ? user : {};\n\t\t}\n\t}\n\n\tpublic async federatedSignIn(\n\t\toptions?: FederatedSignInOptions\n\t): Promise<ICredentials>;\n\tpublic async federatedSignIn(\n\t\tprovider: LegacyProvider,\n\t\tresponse: FederatedResponse,\n\t\tuser: FederatedUser\n\t): Promise<ICredentials>;\n\tpublic async federatedSignIn(\n\t\toptions?: FederatedSignInOptionsCustom\n\t): Promise<ICredentials>;\n\tpublic async federatedSignIn(\n\t\tproviderOrOptions:\n\t\t\t| LegacyProvider\n\t\t\t| FederatedSignInOptions\n\t\t\t| FederatedSignInOptionsCustom,\n\t\tresponse?: FederatedResponse,\n\t\tuser?: FederatedUser\n\t): Promise<ICredentials> {\n\t\tif (!this._config.identityPoolId && !this._config.userPoolId) {\n\t\t\tthrow new Error(\n\t\t\t\t`Federation requires either a User Pool or Identity Pool in config`\n\t\t\t);\n\t\t}\n\n\t\t// Ensure backwards compatability\n\t\tif (typeof providerOrOptions === 'undefined') {\n\t\t\tif (this._config.identityPoolId && !this._config.userPoolId) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Federation with Identity Pools requires tokens passed as arguments`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tisFederatedSignInOptions(providerOrOptions) ||\n\t\t\tisFederatedSignInOptionsCustom(providerOrOptions) ||\n\t\t\thasCustomState(providerOrOptions) ||\n\t\t\ttypeof providerOrOptions === 'undefined'\n\t\t) {\n\t\t\tconst options = providerOrOptions || {\n\t\t\t\tprovider: CognitoHostedUIIdentityProvider.Cognito,\n\t\t\t};\n\t\t\tconst provider = isFederatedSignInOptions(options)\n\t\t\t\t? options.provider\n\t\t\t\t: (options as FederatedSignInOptionsCustom).customProvider;\n\n\t\t\tconst customState = isFederatedSignInOptions(options)\n\t\t\t\t? options.customState\n\t\t\t\t: (options as FederatedSignInOptionsCustom).customState;\n\n\t\t\tif (this._config.userPoolId) {\n\t\t\t\tconst client_id = isCognitoHostedOpts(this._config.oauth)\n\t\t\t\t\t? this._config.userPoolWebClientId\n\t\t\t\t\t: this._config.oauth.clientID;\n\t\t\t\t/*Note: Invenstigate automatically adding trailing slash */\n\t\t\t\tconst redirect_uri = isCognitoHostedOpts(this._config.oauth)\n\t\t\t\t\t? this._config.oauth.redirectSignIn\n\t\t\t\t\t: this._config.oauth.redirectUri;\n\n\t\t\t\tthis._oAuthHandler.oauthSignIn(\n\t\t\t\t\tthis._config.oauth.responseType,\n\t\t\t\t\tthis._config.oauth.domain,\n\t\t\t\t\tredirect_uri,\n\t\t\t\t\tclient_id,\n\t\t\t\t\tprovider,\n\t\t\t\t\tcustomState\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst provider = providerOrOptions;\n\t\t\t// To check if the user is already logged in\n\t\t\ttry {\n\t\t\t\tconst loggedInUser = JSON.stringify(\n\t\t\t\t\tJSON.parse(this._storage.getItem('aws-amplify-federatedInfo')).user\n\t\t\t\t);\n\t\t\t\tif (loggedInUser) {\n\t\t\t\t\tlogger.warn(`There is already a signed in user: ${loggedInUser} in your app.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tYou should not call Auth.federatedSignIn method again as it may cause unexpected behavior.`);\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\n\t\t\tconst { token, identity_id, expires_at } = response;\n\t\t\t// Because this.Credentials.set would update the user info with identity id\n\t\t\t// So we need to retrieve the user again.\n\t\t\tconst credentials = await this.Credentials.set(\n\t\t\t\t{ provider, token, identity_id, user, expires_at },\n\t\t\t\t'federation'\n\t\t\t);\n\t\t\tconst currentUser = await this.currentAuthenticatedUser();\n\t\t\tdispatchAuthEvent(\n\t\t\t\t'signIn',\n\t\t\t\tcurrentUser,\n\t\t\t\t`A user ${currentUser.username} has been signed in`\n\t\t\t);\n\t\t\tlogger.debug('federated sign in credentials', credentials);\n\t\t\treturn credentials;\n\t\t}\n\t}\n\n\t/**\n\t * Used to complete the OAuth flow with or without the Cognito Hosted UI\n\t * @param {String} URL - optional parameter for customers to pass in the response URL\n\t */\n\tprivate async _handleAuthResponse(URL?: string) {\n\t\tif (this.oAuthFlowInProgress) {\n\t\t\tlogger.debug(`Skipping URL ${URL} current flow in progress`);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.oAuthFlowInProgress = true;\n\t\t\tif (!this._config.userPoolId) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`OAuth responses require a User Pool defined in config`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tdispatchAuthEvent(\n\t\t\t\t'parsingCallbackUrl',\n\t\t\t\t{ url: URL },\n\t\t\t\t`The callback url is being parsed`\n\t\t\t);\n\n\t\t\tconst currentUrl =\n\t\t\t\tURL || (JS.browserOrNode().isBrowser ? window.location.href : '');\n\n\t\t\tconst hasCodeOrError = !!(parse(currentUrl).query || '')\n\t\t\t\t.split('&')\n\t\t\t\t.map(entry => entry.split('='))\n\t\t\t\t.find(([k]) => k === 'code' || k === 'error');\n\n\t\t\tconst hasTokenOrError = !!(parse(currentUrl).hash || '#')\n\t\t\t\t.substr(1)\n\t\t\t\t.split('&')\n\t\t\t\t.map(entry => entry.split('='))\n\t\t\t\t.find(([k]) => k === 'access_token' || k === 'error');\n\n\t\t\tif (hasCodeOrError || hasTokenOrError) {\n\t\t\t\tthis._storage.setItem('amplify-redirected-from-hosted-ui', 'true');\n\t\t\t\ttry {\n\t\t\t\t\tconst {\n\t\t\t\t\t\taccessToken,\n\t\t\t\t\t\tidToken,\n\t\t\t\t\t\trefreshToken,\n\t\t\t\t\t\tstate,\n\t\t\t\t\t} = await this._oAuthHandler.handleAuthResponse(currentUrl);\n\t\t\t\t\tconst session = new CognitoUserSession({\n\t\t\t\t\t\tIdToken: new CognitoIdToken({ IdToken: idToken }),\n\t\t\t\t\t\tRefreshToken: new CognitoRefreshToken({\n\t\t\t\t\t\t\tRefreshToken: refreshToken,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tAccessToken: new CognitoAccessToken({\n\t\t\t\t\t\t\tAccessToken: accessToken,\n\t\t\t\t\t\t}),\n\t\t\t\t\t});\n\n\t\t\t\t\tlet credentials;\n\t\t\t\t\t// Get AWS Credentials & store if Identity Pool is defined\n\t\t\t\t\tif (this._config.identityPoolId) {\n\t\t\t\t\t\tcredentials = await this.Credentials.set(session, 'session');\n\t\t\t\t\t\tlogger.debug('AWS credentials', credentials);\n\t\t\t\t\t}\n\n\t\t\t\t\t/* \n\t\t\t\tPrior to the request we do sign the custom state along with the state we set. This check will verify\n\t\t\t\tif there is a dash indicated when setting custom state from the request. If a dash is contained\n\t\t\t\tthen there is custom state present on the state string.\n\t\t\t\t*/\n\t\t\t\t\tconst isCustomStateIncluded = /-/.test(state);\n\n\t\t\t\t\t/*\n\t\t\t\tThe following is to create a user for the Cognito Identity SDK to store the tokens\n\t\t\t\tWhen we remove this SDK later that logic will have to be centralized in our new version\n\t\t\t\t*/\n\t\t\t\t\t//#region\n\t\t\t\t\tconst currentUser = this.createCognitoUser(\n\t\t\t\t\t\tsession.getIdToken().decodePayload()['cognito:username']\n\t\t\t\t\t);\n\n\t\t\t\t\t// This calls cacheTokens() in Cognito SDK\n\t\t\t\t\tcurrentUser.setSignInUserSession(session);\n\n\t\t\t\t\tif (window && typeof window.history !== 'undefined') {\n\t\t\t\t\t\twindow.history.replaceState(\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t(this._config.oauth as AwsCognitoOAuthOpts).redirectSignIn\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\tcurrentUser,\n\t\t\t\t\t\t`A user ${currentUser.getUsername()} has been signed in`\n\t\t\t\t\t);\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'cognitoHostedUI',\n\t\t\t\t\t\tcurrentUser,\n\t\t\t\t\t\t`A user ${currentUser.getUsername()} has been signed in via Cognito Hosted UI`\n\t\t\t\t\t);\n\n\t\t\t\t\tif (isCustomStateIncluded) {\n\t\t\t\t\t\tconst customState = state\n\t\t\t\t\t\t\t.split('-')\n\t\t\t\t\t\t\t.splice(1)\n\t\t\t\t\t\t\t.join('-');\n\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'customOAuthState',\n\t\t\t\t\t\t\turlSafeDecode(customState),\n\t\t\t\t\t\t\t`State for user ${currentUser.getUsername()}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//#endregion\n\n\t\t\t\t\treturn credentials;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug('Error in cognito hosted auth response', err);\n\n\t\t\t\t\t// Just like a successful handling of `?code`, replace the window history to \"dispose\" of the `code`.\n\t\t\t\t\t// Otherwise, reloading the page will throw errors as the `code` has already been spent.\n\t\t\t\t\tif (window && typeof window.history !== 'undefined') {\n\t\t\t\t\t\twindow.history.replaceState(\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t(this._config.oauth as AwsCognitoOAuthOpts).redirectSignIn\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'signIn_failure',\n\t\t\t\t\t\terr,\n\t\t\t\t\t\t`The OAuth response flow failed`\n\t\t\t\t\t);\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'cognitoHostedUI_failure',\n\t\t\t\t\t\terr,\n\t\t\t\t\t\t`A failure occurred when returning to the Cognito Hosted UI`\n\t\t\t\t\t);\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'customState_failure',\n\t\t\t\t\t\terr,\n\t\t\t\t\t\t`A failure occurred when returning state`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.oAuthFlowInProgress = false;\n\t\t}\n\t}\n\n\t/**\n\t * Compact version of credentials\n\t * @param {Object} credentials\n\t * @return {Object} - Credentials\n\t */\n\tpublic essentialCredentials(credentials): ICredentials {\n\t\treturn {\n\t\t\taccessKeyId: credentials.accessKeyId,\n\t\t\tsessionToken: credentials.sessionToken,\n\t\t\tsecretAccessKey: credentials.secretAccessKey,\n\t\t\tidentityId: credentials.identityId,\n\t\t\tauthenticated: credentials.authenticated,\n\t\t};\n\t}\n\n\tprivate attributesToObject(attributes) {\n\t\tconst obj = {};\n\t\tif (attributes) {\n\t\t\tattributes.map(attribute => {\n\t\t\t\tif (\n\t\t\t\t\tattribute.Name === 'email_verified' ||\n\t\t\t\t\tattribute.Name === 'phone_number_verified'\n\t\t\t\t) {\n\t\t\t\t\tobj[attribute.Name] =\n\t\t\t\t\t\tthis.isTruthyString(attribute.Value) || attribute.Value === true;\n\t\t\t\t} else {\n\t\t\t\t\tobj[attribute.Name] = attribute.Value;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn obj;\n\t}\n\n\tprivate isTruthyString(value: any): boolean {\n\t\treturn (\n\t\t\ttypeof value.toLowerCase === 'function' && value.toLowerCase() === 'true'\n\t\t);\n\t}\n\n\tprivate createCognitoUser(username: string): CognitoUser {\n\t\tconst userData: ICognitoUserData = {\n\t\t\tUsername: username,\n\t\t\tPool: this.userPool,\n\t\t};\n\t\tuserData.Storage = this._storage;\n\n\t\tconst { authenticationFlowType } = this._config;\n\n\t\tconst user = new CognitoUser(userData);\n\t\tif (authenticationFlowType) {\n\t\t\tuser.setAuthenticationFlowType(authenticationFlowType);\n\t\t}\n\t\treturn user;\n\t}\n\n\tprivate _isValidAuthStorage(obj) {\n\t\t// We need to check if the obj has the functions of Storage\n\t\treturn (\n\t\t\t!!obj &&\n\t\t\ttypeof obj.getItem === 'function' &&\n\t\t\ttypeof obj.setItem === 'function' &&\n\t\t\ttypeof obj.removeItem === 'function' &&\n\t\t\ttypeof obj.clear === 'function'\n\t\t);\n\t}\n\n\tprivate noUserPoolErrorHandler(config: AuthOptions): AuthErrorTypes {\n\t\tif (config) {\n\t\t\tif (!config.userPoolId || !config.identityPoolId) {\n\t\t\t\treturn AuthErrorTypes.MissingAuthConfig;\n\t\t\t}\n\t\t}\n\t\treturn AuthErrorTypes.NoConfig;\n\t}\n\n\tprivate rejectAuthError(type: AuthErrorTypes): Promise<never> {\n\t\treturn Promise.reject(new AuthError(type));\n\t}\n\n\tprivate rejectNoUserPool(): Promise<never> {\n\t\tconst type = this.noUserPoolErrorHandler(this._config);\n\t\treturn Promise.reject(new NoUserPoolError(type));\n\t}\n\n\tpublic async rememberDevice(): Promise<string | AuthError> {\n\t\tlet currUser;\n\n\t\ttry {\n\t\t\tcurrUser = await this.currentUserPoolUser();\n\t\t} catch (error) {\n\t\t\tlogger.debug('The user is not authenticated by the error', error);\n\t\t\treturn Promise.reject('The user is not authenticated');\n\t\t}\n\n\t\tcurrUser.getCachedDeviceKeyAndPassword();\n\t\treturn new Promise((res, rej) => {\n\t\t\tcurrUser.setDeviceStatusRemembered({\n\t\t\t\tonSuccess: data => {\n\t\t\t\t\tres(data);\n\t\t\t\t},\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tif (err.code === 'InvalidParameterException') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.DeviceConfig));\n\t\t\t\t\t} else if (err.code === 'NetworkError') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.NetworkError));\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic async forgetDevice(): Promise<void> {\n\t\tlet currUser;\n\n\t\ttry {\n\t\t\tcurrUser = await this.currentUserPoolUser();\n\t\t} catch (error) {\n\t\t\tlogger.debug('The user is not authenticated by the error', error);\n\t\t\treturn Promise.reject('The user is not authenticated');\n\t\t}\n\n\t\tcurrUser.getCachedDeviceKeyAndPassword();\n\t\treturn new Promise((res, rej) => {\n\t\t\tcurrUser.forgetDevice({\n\t\t\t\tonSuccess: data => {\n\t\t\t\t\tres(data);\n\t\t\t\t},\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tif (err.code === 'InvalidParameterException') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.DeviceConfig));\n\t\t\t\t\t} else if (err.code === 'NetworkError') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.NetworkError));\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic async fetchDevices(): Promise<IAuthDevice[]> {\n\t\tlet currUser;\n\n\t\ttry {\n\t\t\tcurrUser = await this.currentUserPoolUser();\n\t\t} catch (error) {\n\t\t\tlogger.debug('The user is not authenticated by the error', error);\n\t\t\tthrow new Error('The user is not authenticated');\n\t\t}\n\n\t\tcurrUser.getCachedDeviceKeyAndPassword();\n\t\treturn new Promise((res, rej) => {\n\t\t\tconst cb = {\n\t\t\t\tonSuccess(data) {\n\t\t\t\t\tconst deviceList: IAuthDevice[] = data.Devices.map(device => {\n\t\t\t\t\t\tconst deviceName =\n\t\t\t\t\t\t\tdevice.DeviceAttributes.find(\n\t\t\t\t\t\t\t\t({ Name }) => Name === 'device_name'\n\t\t\t\t\t\t\t) || {};\n\n\t\t\t\t\t\tconst deviceInfo: IAuthDevice = {\n\t\t\t\t\t\t\tid: device.DeviceKey,\n\t\t\t\t\t\t\tname: deviceName.Value,\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn deviceInfo;\n\t\t\t\t\t});\n\t\t\t\t\tres(deviceList);\n\t\t\t\t},\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tif (err.code === 'InvalidParameterException') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.DeviceConfig));\n\t\t\t\t\t} else if (err.code === 'NetworkError') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.NetworkError));\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t\tcurrUser.listDevices(MAX_DEVICES, null, cb);\n\t\t});\n\t}\n}\n\nexport const Auth = new AuthClass(null);\n\nAmplify.register(Auth);\n\n"]},"metadata":{},"sourceType":"module"}