{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport * as Paho from 'paho-mqtt';\nimport { v4 as uuid } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('MqttOverWSProvider');\nexport function mqttTopicMatch(filter, topic) {\n  var filterArray = filter.split('/');\n  var length = filterArray.length;\n  var topicArray = topic.split('/');\n\n  for (var i = 0; i < length; ++i) {\n    var left = filterArray[i];\n    var right = topicArray[i];\n    if (left === '#') return topicArray.length >= length;\n    if (left !== '+' && left !== right) return false;\n  }\n\n  return length === topicArray.length;\n}\n\nvar ClientsQueue =\n/** @class */\nfunction () {\n  function ClientsQueue() {\n    this.promises = new Map();\n  }\n\n  ClientsQueue.prototype.get = function (clientId, clientFactory) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promise;\n      return __generator(this, function (_a) {\n        promise = this.promises.get(clientId);\n\n        if (promise) {\n          return [2\n          /*return*/\n          , promise];\n        }\n\n        promise = clientFactory(clientId);\n        this.promises.set(clientId, promise);\n        return [2\n        /*return*/\n        , promise];\n      });\n    });\n  };\n\n  Object.defineProperty(ClientsQueue.prototype, \"allClients\", {\n    get: function () {\n      return Array.from(this.promises.keys());\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ClientsQueue.prototype.remove = function (clientId) {\n    this.promises.delete(clientId);\n  };\n\n  return ClientsQueue;\n}();\n\nvar topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';\n\nvar MqttOverWSProvider =\n/** @class */\nfunction (_super) {\n  __extends(MqttOverWSProvider, _super);\n\n  function MqttOverWSProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, __assign(__assign({}, options), {\n      clientId: options.clientId || uuid()\n    })) || this;\n\n    _this._clientsQueue = new ClientsQueue();\n    _this._topicObservers = new Map();\n    _this._clientIdObservers = new Map();\n    return _this;\n  }\n\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientId\", {\n    get: function () {\n      return this.options.clientId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"endpoint\", {\n    get: function () {\n      return this.options.aws_pubsub_endpoint;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientsQueue\", {\n    get: function () {\n      return this._clientsQueue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MqttOverWSProvider.prototype.getTopicForValue = function (value) {\n    return typeof value === 'object' && value[topicSymbol];\n  };\n\n  MqttOverWSProvider.prototype.getProviderName = function () {\n    return 'MqttOverWSProvider';\n  };\n\n  MqttOverWSProvider.prototype.onDisconnect = function (_a) {\n    var _this = this;\n\n    var clientId = _a.clientId,\n        errorCode = _a.errorCode,\n        args = __rest(_a, [\"clientId\", \"errorCode\"]);\n\n    if (errorCode !== 0) {\n      logger.warn(clientId, JSON.stringify(__assign({\n        errorCode: errorCode\n      }, args), null, 2));\n      var topicsToDelete_1 = [];\n\n      var clientIdObservers = this._clientIdObservers.get(clientId);\n\n      if (!clientIdObservers) {\n        return;\n      }\n\n      clientIdObservers.forEach(function (observer) {\n        observer.error('Disconnected, error code: ' + errorCode); // removing observers for disconnected clientId\n\n        _this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n          observerForTopic.delete(observer);\n\n          if (observerForTopic.size === 0) {\n            topicsToDelete_1.push(observerTopic);\n          }\n        });\n      }); // forgiving any trace of clientId\n\n      this._clientIdObservers.delete(clientId); // Removing topics that are not listen by an observer\n\n\n      topicsToDelete_1.forEach(function (topic) {\n        _this._topicObservers.delete(topic);\n      });\n    }\n  };\n\n  MqttOverWSProvider.prototype.newClient = function (_a) {\n    var url = _a.url,\n        clientId = _a.clientId;\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('Creating new MQTT client', clientId);\n            client = new Paho.Client(url, clientId); // client.trace = (args) => logger.debug(clientId, JSON.stringify(args, null, 2));\n\n            client.onMessageArrived = function (_a) {\n              var topic = _a.destinationName,\n                  msg = _a.payloadString;\n\n              _this._onMessage(topic, msg);\n            };\n\n            client.onConnectionLost = function (_a) {\n              var errorCode = _a.errorCode,\n                  args = __rest(_a, [\"errorCode\"]);\n\n              _this.onDisconnect(__assign({\n                clientId: clientId,\n                errorCode: errorCode\n              }, args));\n            };\n\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              client.connect({\n                useSSL: _this.isSSLEnabled,\n                mqttVersion: 3,\n                onSuccess: function () {\n                  return resolve(client);\n                },\n                onFailure: reject\n              });\n            })];\n\n          case 1:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , client];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.connect = function (clientId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.clientsQueue.get(clientId, function (clientId) {\n              return _this.newClient(__assign(__assign({}, options), {\n                clientId: clientId\n              }));\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.disconnect = function (clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.clientsQueue.get(clientId, function () {\n              return null;\n            })];\n\n          case 1:\n            client = _a.sent();\n\n            if (client && client.isConnected()) {\n              client.disconnect();\n            }\n\n            this.clientsQueue.remove(clientId);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.publish = function (topics, msg) {\n    return __awaiter(this, void 0, void 0, function () {\n      var targetTopics, message, url, client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            targetTopics = [].concat(topics);\n            message = JSON.stringify(msg);\n            return [4\n            /*yield*/\n            , this.endpoint];\n\n          case 1:\n            url = _a.sent();\n            return [4\n            /*yield*/\n            , this.connect(this.clientId, {\n              url: url\n            })];\n\n          case 2:\n            client = _a.sent();\n            logger.debug('Publishing to topic(s)', targetTopics.join(','), message);\n            targetTopics.forEach(function (topic) {\n              return client.send(topic, message);\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype._onMessage = function (topic, msg) {\n    try {\n      var matchedTopicObservers_1 = [];\n\n      this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n        if (mqttTopicMatch(observerTopic, topic)) {\n          matchedTopicObservers_1.push(observerForTopic);\n        }\n      });\n\n      var parsedMessage_1 = JSON.parse(msg);\n\n      if (typeof parsedMessage_1 === 'object') {\n        parsedMessage_1[topicSymbol] = topic;\n      }\n\n      matchedTopicObservers_1.forEach(function (observersForTopic) {\n        observersForTopic.forEach(function (observer) {\n          return observer.next(parsedMessage_1);\n        });\n      });\n    } catch (error) {\n      logger.warn('Error handling message', error, msg);\n    }\n  };\n\n  MqttOverWSProvider.prototype.subscribe = function (topics, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var targetTopics = [].concat(topics);\n    logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n    return new Observable(function (observer) {\n      targetTopics.forEach(function (topic) {\n        // this._topicObservers is used to notify the observers according to the topic received on the message\n        var observersForTopic = _this._topicObservers.get(topic);\n\n        if (!observersForTopic) {\n          observersForTopic = new Set();\n\n          _this._topicObservers.set(topic, observersForTopic);\n        }\n\n        observersForTopic.add(observer);\n      }); // @ts-ignore\n\n      var client;\n      var _a = options.clientId,\n          clientId = _a === void 0 ? _this.clientId : _a; // this._clientIdObservers is used to close observers when client gets disconnected\n\n      var observersForClientId = _this._clientIdObservers.get(clientId);\n\n      if (!observersForClientId) {\n        observersForClientId = new Set();\n      }\n\n      observersForClientId.add(observer);\n\n      _this._clientIdObservers.set(clientId, observersForClientId);\n\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, url, _b, e_1;\n\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                _a = options.url;\n                if (!(_a === void 0)) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , this.endpoint];\n\n              case 1:\n                _b = _c.sent();\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                _b = _a;\n                _c.label = 3;\n\n              case 3:\n                url = _b;\n                _c.label = 4;\n\n              case 4:\n                _c.trys.push([4, 6,, 7]);\n\n                return [4\n                /*yield*/\n                , this.connect(clientId, {\n                  url: url\n                })];\n\n              case 5:\n                client = _c.sent();\n                targetTopics.forEach(function (topic) {\n                  client.subscribe(topic);\n                });\n                return [3\n                /*break*/\n                , 7];\n\n              case 6:\n                e_1 = _c.sent();\n                observer.error(e_1);\n                return [3\n                /*break*/\n                , 7];\n\n              case 7:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        logger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n\n        if (client) {\n          _this._clientIdObservers.get(clientId).delete(observer); // No more observers per client => client not needed anymore\n\n\n          if (_this._clientIdObservers.get(clientId).size === 0) {\n            _this.disconnect(clientId);\n\n            _this._clientIdObservers.delete(clientId);\n          }\n\n          targetTopics.forEach(function (topic) {\n            var observersForTopic = _this._topicObservers.get(topic) || new Set();\n            observersForTopic.delete(observer); // if no observers exists for the topic, topic should be removed\n\n            if (observersForTopic.size === 0) {\n              _this._topicObservers.delete(topic);\n\n              if (client.isConnected()) {\n                client.unsubscribe(topic);\n              }\n            }\n          });\n        }\n\n        return null;\n      };\n    });\n  };\n\n  return MqttOverWSProvider;\n}(AbstractPubSubProvider);\n\nexport { MqttOverWSProvider };","map":{"version":3,"mappings":"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","names":["Paho","v4","uuid","Observable","AbstractPubSubProvider","ConsoleLogger","Logger","logger","mqttTopicMatch","filter","topic","filterArray","split","length","topicArray","i","left","right","Map","ClientsQueue","clientId","clientFactory","promise","promises","get","set","Object","Array","from","keys","delete","topicSymbol","Symbol","__extends","options","_super","_this","MqttOverWSProvider","aws_pubsub_endpoint","_clientsQueue","aws_appsync_dangerously_connect_to_http_endpoint_for_testing","value","_a","errorCode","args","warn","JSON","stringify","__assign","topicsToDelete_1","clientIdObservers","_clientIdObservers","forEach","observer","error","_topicObservers","observerForTopic","observerTopic","size","push","url","debug","client","Client","onMessageArrived","msg","_onMessage","onConnectionLost","onDisconnect","Promise","resolve","reject","connect","useSSL","isSSLEnabled","mqttVersion","onSuccess","onFailure","_b","clientsQueue","newClient","isConnected","disconnect","remove","topics","targetTopics","concat","message","endpoint","join","send","matchedTopicObservers_1","parsedMessage_1","parse","observersForTopic","next","Set","add","observersForClientId","_c","subscribe","e_1","unsubscribe"],"sources":["/Users/richards/node_modules/@aws-amplify/pubsub/src/Providers/MqttOverWSProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport * as Paho from 'paho-mqtt';\nimport { v4 as uuid } from 'uuid';\nimport Observable from 'zen-observable-ts';\n\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { ProvidertOptions, SubscriptionObserver } from '../types';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\n\nconst logger = new Logger('MqttOverWSProvider');\n\nexport function mqttTopicMatch(filter: string, topic: string) {\n\tconst filterArray = filter.split('/');\n\tconst length = filterArray.length;\n\tconst topicArray = topic.split('/');\n\n\tfor (let i = 0; i < length; ++i) {\n\t\tconst left = filterArray[i];\n\t\tconst right = topicArray[i];\n\t\tif (left === '#') return topicArray.length >= length;\n\t\tif (left !== '+' && left !== right) return false;\n\t}\n\treturn length === topicArray.length;\n}\n\nexport interface MqttProvidertOptions extends ProvidertOptions {\n\tclientId?: string;\n\turl?: string;\n}\n\nclass ClientsQueue {\n\tprivate promises: Map<string, Promise<any>> = new Map();\n\n\tasync get(clientId: string, clientFactory: (string) => Promise<any>) {\n\t\tlet promise = this.promises.get(clientId);\n\t\tif (promise) {\n\t\t\treturn promise;\n\t\t}\n\n\t\tpromise = clientFactory(clientId);\n\n\t\tthis.promises.set(clientId, promise);\n\n\t\treturn promise;\n\t}\n\n\tget allClients() {\n\t\treturn Array.from(this.promises.keys());\n\t}\n\n\tremove(clientId) {\n\t\tthis.promises.delete(clientId);\n\t}\n}\n\nconst topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';\n\nexport class MqttOverWSProvider extends AbstractPubSubProvider {\n\tprivate _clientsQueue = new ClientsQueue();\n\n\tconstructor(options: MqttProvidertOptions = {}) {\n\t\tsuper({ ...options, clientId: options.clientId || uuid() });\n\t}\n\n\tprotected get clientId() {\n\t\treturn this.options.clientId;\n\t}\n\n\tprotected get endpoint() {\n\t\treturn this.options.aws_pubsub_endpoint;\n\t}\n\n\tprotected get clientsQueue() {\n\t\treturn this._clientsQueue;\n\t}\n\n\tprotected get isSSLEnabled() {\n\t\treturn !this.options\n\t\t\t.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n\t}\n\n\tprotected getTopicForValue(value) {\n\t\treturn typeof value === 'object' && value[topicSymbol];\n\t}\n\n\tgetProviderName() {\n\t\treturn 'MqttOverWSProvider';\n\t}\n\n\tpublic onDisconnect({ clientId, errorCode, ...args }) {\n\t\tif (errorCode !== 0) {\n\t\t\tlogger.warn(clientId, JSON.stringify({ errorCode, ...args }, null, 2));\n\n\t\t\tconst topicsToDelete = [];\n\t\t\tconst clientIdObservers = this._clientIdObservers.get(clientId);\n\t\t\tif (!clientIdObservers) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tclientIdObservers.forEach(observer => {\n\t\t\t\tobserver.error('Disconnected, error code: ' + errorCode);\n\t\t\t\t// removing observers for disconnected clientId\n\t\t\t\tthis._topicObservers.forEach((observerForTopic, observerTopic) => {\n\t\t\t\t\tobserverForTopic.delete(observer);\n\t\t\t\t\tif (observerForTopic.size === 0) {\n\t\t\t\t\t\ttopicsToDelete.push(observerTopic);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// forgiving any trace of clientId\n\t\t\tthis._clientIdObservers.delete(clientId);\n\n\t\t\t// Removing topics that are not listen by an observer\n\t\t\ttopicsToDelete.forEach(topic => {\n\t\t\t\tthis._topicObservers.delete(topic);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async newClient({\n\t\turl,\n\t\tclientId,\n\t}: MqttProvidertOptions): Promise<any> {\n\t\tlogger.debug('Creating new MQTT client', clientId);\n\n\t\t// @ts-ignore\n\t\tconst client = new Paho.Client(url, clientId);\n\t\t// client.trace = (args) => logger.debug(clientId, JSON.stringify(args, null, 2));\n\t\tclient.onMessageArrived = ({\n\t\t\tdestinationName: topic,\n\t\t\tpayloadString: msg,\n\t\t}) => {\n\t\t\tthis._onMessage(topic, msg);\n\t\t};\n\t\tclient.onConnectionLost = ({ errorCode, ...args }) => {\n\t\t\tthis.onDisconnect({ clientId, errorCode, ...args });\n\t\t};\n\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tclient.connect({\n\t\t\t\tuseSSL: this.isSSLEnabled,\n\t\t\t\tmqttVersion: 3,\n\t\t\t\tonSuccess: () => resolve(client),\n\t\t\t\tonFailure: reject,\n\t\t\t});\n\t\t});\n\n\t\treturn client;\n\t}\n\n\tprotected async connect(\n\t\tclientId: string,\n\t\toptions: MqttProvidertOptions = {}\n\t): Promise<any> {\n\t\treturn await this.clientsQueue.get(clientId, clientId =>\n\t\t\tthis.newClient({ ...options, clientId })\n\t\t);\n\t}\n\n\tprotected async disconnect(clientId: string): Promise<void> {\n\t\tconst client = await this.clientsQueue.get(clientId, () => null);\n\n\t\tif (client && client.isConnected()) {\n\t\t\tclient.disconnect();\n\t\t}\n\t\tthis.clientsQueue.remove(clientId);\n\t}\n\n\tasync publish(topics: string[] | string, msg: any) {\n\t\tconst targetTopics = ([] as string[]).concat(topics);\n\t\tconst message = JSON.stringify(msg);\n\n\t\tconst url = await this.endpoint;\n\n\t\tconst client = await this.connect(this.clientId, { url });\n\n\t\tlogger.debug('Publishing to topic(s)', targetTopics.join(','), message);\n\t\ttargetTopics.forEach(topic => client.send(topic, message));\n\t}\n\n\tprotected _topicObservers: Map<\n\t\tstring,\n\t\tSet<SubscriptionObserver<any>>\n\t> = new Map();\n\n\tprotected _clientIdObservers: Map<\n\t\tstring,\n\t\tSet<SubscriptionObserver<any>>\n\t> = new Map();\n\n\tprivate _onMessage(topic: string, msg: any) {\n\t\ttry {\n\t\t\tconst matchedTopicObservers = [];\n\t\t\tthis._topicObservers.forEach((observerForTopic, observerTopic) => {\n\t\t\t\tif (mqttTopicMatch(observerTopic, topic)) {\n\t\t\t\t\tmatchedTopicObservers.push(observerForTopic);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst parsedMessage = JSON.parse(msg);\n\n\t\t\tif (typeof parsedMessage === 'object') {\n\t\t\t\tparsedMessage[topicSymbol] = topic;\n\t\t\t}\n\n\t\t\tmatchedTopicObservers.forEach(observersForTopic => {\n\t\t\t\tobserversForTopic.forEach(observer => observer.next(parsedMessage));\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlogger.warn('Error handling message', error, msg);\n\t\t}\n\t}\n\n\tsubscribe(\n\t\ttopics: string[] | string,\n\t\toptions: MqttProvidertOptions = {}\n\t): Observable<any> {\n\t\tconst targetTopics = ([] as string[]).concat(topics);\n\t\tlogger.debug('Subscribing to topic(s)', targetTopics.join(','));\n\n\t\treturn new Observable(observer => {\n\t\t\ttargetTopics.forEach(topic => {\n\t\t\t\t// this._topicObservers is used to notify the observers according to the topic received on the message\n\t\t\t\tlet observersForTopic = this._topicObservers.get(topic);\n\n\t\t\t\tif (!observersForTopic) {\n\t\t\t\t\tobserversForTopic = new Set();\n\n\t\t\t\t\tthis._topicObservers.set(topic, observersForTopic);\n\t\t\t\t}\n\n\t\t\t\tobserversForTopic.add(observer);\n\t\t\t});\n\n\t\t\t// @ts-ignore\n\t\t\tlet client: Paho.Client;\n\t\t\tconst { clientId = this.clientId } = options;\n\n\t\t\t// this._clientIdObservers is used to close observers when client gets disconnected\n\t\t\tlet observersForClientId = this._clientIdObservers.get(clientId);\n\t\t\tif (!observersForClientId) {\n\t\t\t\tobserversForClientId = new Set();\n\t\t\t}\n\t\t\tobserversForClientId.add(observer);\n\t\t\tthis._clientIdObservers.set(clientId, observersForClientId);\n\n\t\t\t(async () => {\n\t\t\t\tconst { url = await this.endpoint } = options;\n\n\t\t\t\ttry {\n\t\t\t\t\tclient = await this.connect(clientId, { url });\n\t\t\t\t\ttargetTopics.forEach(topic => {\n\t\t\t\t\t\tclient.subscribe(topic);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tobserver.error(e);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\treturn () => {\n\t\t\t\tlogger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n\n\t\t\t\tif (client) {\n\t\t\t\t\tthis._clientIdObservers.get(clientId).delete(observer);\n\t\t\t\t\t// No more observers per client => client not needed anymore\n\t\t\t\t\tif (this._clientIdObservers.get(clientId).size === 0) {\n\t\t\t\t\t\tthis.disconnect(clientId);\n\t\t\t\t\t\tthis._clientIdObservers.delete(clientId);\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetTopics.forEach(topic => {\n\t\t\t\t\t\tconst observersForTopic =\n\t\t\t\t\t\t\tthis._topicObservers.get(topic) ||\n\t\t\t\t\t\t\t(new Set() as Set<SubscriptionObserver<any>>);\n\n\t\t\t\t\t\tobserversForTopic.delete(observer);\n\n\t\t\t\t\t\t// if no observers exists for the topic, topic should be removed\n\t\t\t\t\t\tif (observersForTopic.size === 0) {\n\t\t\t\t\t\t\tthis._topicObservers.delete(topic);\n\t\t\t\t\t\t\tif (client.isConnected()) {\n\t\t\t\t\t\t\t\tclient.unsubscribe(topic);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t};\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}