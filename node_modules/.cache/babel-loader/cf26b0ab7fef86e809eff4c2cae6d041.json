{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { HttpResponse } from '@aws-sdk/protocol-http';\nimport { buildQueryString } from '@aws-sdk/querystring-builder';\nimport axios from 'axios';\nimport { ConsoleLogger as Logger, Platform } from '@aws-amplify/core';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nvar logger = new Logger('axios-http-handler');\nexport var SEND_UPLOAD_PROGRESS_EVENT = 'sendUploadProgress';\nexport var SEND_DOWNLOAD_PROGRESS_EVENT = 'sendDownloadProgress';\n\nfunction isBlob(body) {\n  return typeof Blob !== 'undefined' && body instanceof Blob;\n}\n\nvar normalizeHeaders = function (headers, normalizedName) {\n  var e_1, _a;\n\n  try {\n    for (var _b = __values(Object.entries(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = __read(_c.value, 2),\n          k = _d[0],\n          v = _d[1];\n\n      if (k !== normalizedName && k.toUpperCase() === normalizedName.toUpperCase()) {\n        headers[normalizedName] = v;\n        delete headers[k];\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n};\n\nexport var reactNativeRequestTransformer = [function (data, headers) {\n  if (isBlob(data)) {\n    normalizeHeaders(headers, 'Content-Type');\n    normalizeHeaders(headers, 'Accept');\n    return data;\n  } // Axios' default transformRequest is an array\n\n\n  return axios.defaults.transformRequest[0].call(null, data, headers);\n}];\n\nvar AxiosHttpHandler =\n/** @class */\nfunction () {\n  function AxiosHttpHandler(httpOptions, emitter, cancelTokenSource) {\n    if (httpOptions === void 0) {\n      httpOptions = {};\n    }\n\n    this.httpOptions = httpOptions;\n    this.emitter = emitter;\n    this.cancelTokenSource = cancelTokenSource;\n  }\n\n  AxiosHttpHandler.prototype.destroy = function () {// Do nothing. TLS and HTTP/2 connection pooling is handled by the\n    // browser.\n  };\n\n  AxiosHttpHandler.prototype.handle = function (request, options) {\n    var requestTimeoutInMs = this.httpOptions.requestTimeout; // prioritize the call specific event emitter, this is useful for multipart upload as each individual parts has\n    // their own event emitter, without having to create s3client for every individual calls.\n\n    var emitter = options.emitter || this.emitter;\n    var path = request.path;\n\n    if (request.query) {\n      var queryString = buildQueryString(request.query);\n\n      if (queryString) {\n        path += \"?\" + queryString;\n      }\n    }\n\n    var port = request.port;\n    var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : '') + path;\n    var axiosRequest = {};\n    axiosRequest.url = url;\n    axiosRequest.method = request.method;\n    axiosRequest.headers = request.headers; // The host header is automatically added by the browser and adding it explicitly in the\n    // axios request throws an error https://github.com/aws-amplify/amplify-js/issues/5376\n    // This is because the host header is a forbidden header for the http client to set\n    // see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name and\n    // https://fetch.spec.whatwg.org/#forbidden-header-name\n    // The reason we are removing this header here instead of in the aws-sdk's client\n    // middleware is that the host header is required to be in the request signature and if\n    // we remove it from the middlewares, then the request fails because the header is added\n    // by the browser but is absent from the signature.\n\n    delete axiosRequest.headers['host'];\n\n    if (request.body) {\n      axiosRequest.data = request.body;\n    } else {\n      // Fix for https://github.com/aws-amplify/amplify-js/issues/5432\n      // If the POST request body is empty but content-type header is set, axios is forcibly removing it\n      // See https://github.com/axios/axios/issues/1535 and refusing to fix it https://github.com/axios/axios/issues/755\n      // This change is a workaround to set the data as null (instead of undefined) to prevent axios from\n      // removing the content-type header. Link for the source code\n      // https://github.com/axios/axios/blob/dc4bc49673943e35280e5df831f5c3d0347a9393/lib/adapters/xhr.js#L121-L123\n      if (axiosRequest.headers[Object.keys(axiosRequest.headers).find(function (key) {\n        return key.toLowerCase() === 'content-type';\n      })]) {\n        axiosRequest.data = null;\n      }\n    }\n\n    if (emitter) {\n      axiosRequest.onUploadProgress = function (event) {\n        emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, event);\n        logger.debug(event);\n      };\n\n      axiosRequest.onDownloadProgress = function (event) {\n        emitter.emit(SEND_DOWNLOAD_PROGRESS_EVENT, event);\n        logger.debug(event);\n      };\n    } // If a cancel token source is passed down from the provider, allows cancellation of in-flight requests\n\n\n    if (this.cancelTokenSource) {\n      axiosRequest.cancelToken = this.cancelTokenSource.token;\n    }\n\n    if (options.cancelTokenSource) {\n      axiosRequest.cancelToken = options.cancelTokenSource.token;\n    } // From gamma release, aws-sdk now expects all response type to be of blob or streams\n\n\n    axiosRequest.responseType = 'blob'; // In Axios, Blobs are identified by calling Object.prototype.toString on the object. However, on React Native,\n    // calling Object.prototype.toString on a Blob returns '[object Object]' instead of '[object Blob]', which causes\n    // Axios to treat Blobs as generic Javascript objects. Therefore we need a to use a custom request transformer\n    // to correctly handle Blob in React Native.\n\n    if (Platform.isReactNative) {\n      axiosRequest.transformRequest = reactNativeRequestTransformer;\n    }\n\n    var raceOfPromises = [axios.request(axiosRequest).then(function (response) {\n      return {\n        response: new HttpResponse({\n          headers: response.headers,\n          statusCode: response.status,\n          body: response.data\n        })\n      };\n    }).catch(function (error) {\n      var _a, _b, _c; // Error\n\n\n      if (error.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE) {\n        logger.error(error.message);\n      } // for axios' cancel error, we should re-throw it back so it's not considered an s3client error\n      // if we return empty, or an abitrary error HttpResponse, it will be hard to debug down the line\n\n\n      if (axios.isCancel(error)) {\n        throw error;\n      } // otherwise, we should re-construct an HttpResponse from the error, so that it can be passed down to other\n      // aws sdk middleware (e.g retry, clock skew correction, error message serializing)\n\n\n      return {\n        response: new HttpResponse({\n          statusCode: (_a = error.response) === null || _a === void 0 ? void 0 : _a.status,\n          body: (_b = error.response) === null || _b === void 0 ? void 0 : _b.data,\n          headers: (_c = error.response) === null || _c === void 0 ? void 0 : _c.headers\n        })\n      };\n    }), requestTimeout(requestTimeoutInMs)];\n    return Promise.race(raceOfPromises);\n  };\n\n  return AxiosHttpHandler;\n}();\n\nexport { AxiosHttpHandler };\n\nfunction requestTimeout(timeoutInMs) {\n  if (timeoutInMs === void 0) {\n    timeoutInMs = 0;\n  }\n\n  return new Promise(function (resolve, reject) {\n    if (timeoutInMs) {\n      setTimeout(function () {\n        var timeoutError = new Error(\"Request did not complete within \" + timeoutInMs + \" ms\");\n        timeoutError.name = 'TimeoutError';\n        reject(timeoutError);\n      }, timeoutInMs);\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpResponse","buildQueryString","axios","ConsoleLogger","Logger","Platform","AWSS3ProviderUploadErrorStrings","logger","SEND_UPLOAD_PROGRESS_EVENT","SEND_DOWNLOAD_PROGRESS_EVENT","isBlob","body","Blob","normalizeHeaders","headers","normalizedName","entries","_c","k","v","toUpperCase","reactNativeRequestTransformer","data","defaults","transformRequest","call","httpOptions","emitter","cancelTokenSource","AxiosHttpHandler","request","options","requestTimeoutInMs","requestTimeout","path","query","queryString","port","url","protocol","hostname","axiosRequest","method","Object","keys","find","toLowerCase","onUploadProgress","event","emit","debug","onDownloadProgress","cancelToken","token","responseType","isReactNative","raceOfPromises","then","response","statusCode","status","catch","error","message","UPLOAD_PAUSED_MESSAGE","isCancel","_a","_b","Promise","race","timeoutInMs","resolve","reject","setTimeout","timeoutError","Error","name"],"sources":["/Users/richards/node_modules/@aws-amplify/storage/src/providers/axios-http-handler.ts"],"sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { HttpHandlerOptions } from '@aws-sdk/types';\nimport { HttpHandler, HttpRequest, HttpResponse } from '@aws-sdk/protocol-http';\nimport { buildQueryString } from '@aws-sdk/querystring-builder';\nimport axios, {\n\tAxiosRequestConfig,\n\tMethod,\n\tCancelTokenSource,\n\tAxiosTransformer,\n} from 'axios';\nimport { ConsoleLogger as Logger, Platform } from '@aws-amplify/core';\nimport { FetchHttpHandlerOptions } from '@aws-sdk/fetch-http-handler';\nimport * as events from 'events';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\n\nconst logger = new Logger('axios-http-handler');\nexport const SEND_UPLOAD_PROGRESS_EVENT = 'sendUploadProgress';\nexport const SEND_DOWNLOAD_PROGRESS_EVENT = 'sendDownloadProgress';\n\nfunction isBlob(body: any): body is Blob {\n\treturn typeof Blob !== 'undefined' && body instanceof Blob;\n}\n\nconst normalizeHeaders = (\n\theaders: Record<string, string>,\n\tnormalizedName: string\n) => {\n\tfor (const [k, v] of Object.entries(headers)) {\n\t\tif (\n\t\t\tk !== normalizedName &&\n\t\t\tk.toUpperCase() === normalizedName.toUpperCase()\n\t\t) {\n\t\t\theaders[normalizedName] = v;\n\t\t\tdelete headers[k];\n\t\t}\n\t}\n};\n\nexport const reactNativeRequestTransformer: AxiosTransformer[] = [\n\tfunction(data, headers) {\n\t\tif (isBlob(data)) {\n\t\t\tnormalizeHeaders(headers, 'Content-Type');\n\t\t\tnormalizeHeaders(headers, 'Accept');\n\t\t\treturn data;\n\t\t}\n\t\t// Axios' default transformRequest is an array\n\t\treturn axios.defaults.transformRequest[0].call(null, data, headers);\n\t},\n];\n\nexport type AxiosHttpHandlerOptions = HttpHandlerOptions & {\n\tcancelTokenSource?: CancelTokenSource;\n\temitter?: events.EventEmitter;\n};\n\nexport class AxiosHttpHandler implements HttpHandler {\n\tconstructor(\n\t\tprivate readonly httpOptions: FetchHttpHandlerOptions = {},\n\t\tprivate readonly emitter?: events.EventEmitter,\n\t\tprivate readonly cancelTokenSource?: CancelTokenSource\n\t) {}\n\n\tdestroy(): void {\n\t\t// Do nothing. TLS and HTTP/2 connection pooling is handled by the\n\t\t// browser.\n\t}\n\n\thandle(\n\t\trequest: HttpRequest,\n\t\toptions: AxiosHttpHandlerOptions\n\t): Promise<{ response: HttpResponse }> {\n\t\tconst requestTimeoutInMs = this.httpOptions.requestTimeout;\n\t\t// prioritize the call specific event emitter, this is useful for multipart upload as each individual parts has\n\t\t// their own event emitter, without having to create s3client for every individual calls.\n\t\tconst emitter = options.emitter || this.emitter;\n\n\t\tlet path = request.path;\n\t\tif (request.query) {\n\t\t\tconst queryString = buildQueryString(request.query);\n\t\t\tif (queryString) {\n\t\t\t\tpath += `?${queryString}`;\n\t\t\t}\n\t\t}\n\n\t\tconst port = request.port;\n\t\tconst url = `${request.protocol}//${request.hostname}${\n\t\t\tport ? `:${port}` : ''\n\t\t}${path}`;\n\n\t\tconst axiosRequest: AxiosRequestConfig = {};\n\t\taxiosRequest.url = url;\n\t\taxiosRequest.method = request.method as Method;\n\t\taxiosRequest.headers = request.headers;\n\n\t\t// The host header is automatically added by the browser and adding it explicitly in the\n\t\t// axios request throws an error https://github.com/aws-amplify/amplify-js/issues/5376\n\t\t// This is because the host header is a forbidden header for the http client to set\n\t\t// see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name and\n\t\t// https://fetch.spec.whatwg.org/#forbidden-header-name\n\t\t// The reason we are removing this header here instead of in the aws-sdk's client\n\t\t// middleware is that the host header is required to be in the request signature and if\n\t\t// we remove it from the middlewares, then the request fails because the header is added\n\t\t// by the browser but is absent from the signature.\n\t\tdelete axiosRequest.headers['host'];\n\n\t\tif (request.body) {\n\t\t\taxiosRequest.data = request.body;\n\t\t} else {\n\t\t\t// Fix for https://github.com/aws-amplify/amplify-js/issues/5432\n\n\t\t\t// If the POST request body is empty but content-type header is set, axios is forcibly removing it\n\t\t\t// See https://github.com/axios/axios/issues/1535 and refusing to fix it https://github.com/axios/axios/issues/755\n\t\t\t// This change is a workaround to set the data as null (instead of undefined) to prevent axios from\n\t\t\t// removing the content-type header. Link for the source code\n\t\t\t// https://github.com/axios/axios/blob/dc4bc49673943e35280e5df831f5c3d0347a9393/lib/adapters/xhr.js#L121-L123\n\n\t\t\tif (\n\t\t\t\taxiosRequest.headers[\n\t\t\t\t\tObject.keys(axiosRequest.headers).find(\n\t\t\t\t\t\tkey => key.toLowerCase() === 'content-type'\n\t\t\t\t\t)\n\t\t\t\t]\n\t\t\t) {\n\t\t\t\taxiosRequest.data = null;\n\t\t\t}\n\t\t}\n\t\tif (emitter) {\n\t\t\taxiosRequest.onUploadProgress = function(event) {\n\t\t\t\temitter.emit(SEND_UPLOAD_PROGRESS_EVENT, event);\n\t\t\t\tlogger.debug(event);\n\t\t\t};\n\t\t\taxiosRequest.onDownloadProgress = function(event) {\n\t\t\t\temitter.emit(SEND_DOWNLOAD_PROGRESS_EVENT, event);\n\t\t\t\tlogger.debug(event);\n\t\t\t};\n\t\t}\n\t\t// If a cancel token source is passed down from the provider, allows cancellation of in-flight requests\n\t\tif (this.cancelTokenSource) {\n\t\t\taxiosRequest.cancelToken = this.cancelTokenSource.token;\n\t\t}\n\n\t\tif (options.cancelTokenSource) {\n\t\t\taxiosRequest.cancelToken = options.cancelTokenSource.token;\n\t\t}\n\n\t\t// From gamma release, aws-sdk now expects all response type to be of blob or streams\n\t\taxiosRequest.responseType = 'blob';\n\t\t// In Axios, Blobs are identified by calling Object.prototype.toString on the object. However, on React Native,\n\t\t// calling Object.prototype.toString on a Blob returns '[object Object]' instead of '[object Blob]', which causes\n\t\t// Axios to treat Blobs as generic Javascript objects. Therefore we need a to use a custom request transformer\n\t\t// to correctly handle Blob in React Native.\n\t\tif (Platform.isReactNative) {\n\t\t\taxiosRequest.transformRequest = reactNativeRequestTransformer;\n\t\t}\n\n\t\tconst raceOfPromises = [\n\t\t\taxios\n\t\t\t\t.request(axiosRequest)\n\t\t\t\t.then(response => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresponse: new HttpResponse({\n\t\t\t\t\t\t\theaders: response.headers,\n\t\t\t\t\t\t\tstatusCode: response.status,\n\t\t\t\t\t\t\tbody: response.data,\n\t\t\t\t\t\t}),\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\t// Error\n\t\t\t\t\tif (\n\t\t\t\t\t\terror.message !==\n\t\t\t\t\t\tAWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE\n\t\t\t\t\t) {\n\t\t\t\t\t\tlogger.error(error.message);\n\t\t\t\t\t}\n\t\t\t\t\t// for axios' cancel error, we should re-throw it back so it's not considered an s3client error\n\t\t\t\t\t// if we return empty, or an abitrary error HttpResponse, it will be hard to debug down the line\n\t\t\t\t\tif (axios.isCancel(error)) {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t\t// otherwise, we should re-construct an HttpResponse from the error, so that it can be passed down to other\n\t\t\t\t\t// aws sdk middleware (e.g retry, clock skew correction, error message serializing)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresponse: new HttpResponse({\n\t\t\t\t\t\t\tstatusCode: error.response?.status,\n\t\t\t\t\t\t\tbody: error.response?.data,\n\t\t\t\t\t\t\theaders: error.response?.headers,\n\t\t\t\t\t\t}),\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\trequestTimeout(requestTimeoutInMs),\n\t\t];\n\t\treturn Promise.race(raceOfPromises);\n\t}\n}\n\nfunction requestTimeout(timeoutInMs: number = 0): Promise<never> {\n\treturn new Promise((resolve, reject) => {\n\t\tif (timeoutInMs) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst timeoutError = new Error(\n\t\t\t\t\t`Request did not complete within ${timeoutInMs} ms`\n\t\t\t\t);\n\t\t\t\ttimeoutError.name = 'TimeoutError';\n\t\t\t\treject(timeoutError);\n\t\t\t}, timeoutInMs);\n\t\t}\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}