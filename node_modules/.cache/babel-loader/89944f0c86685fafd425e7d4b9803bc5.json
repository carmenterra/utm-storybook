{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nvar logger = new Logger('Interactions');\n\nvar InteractionsClass =\n/** @class */\nfunction () {\n  /**\n   * Initialize PubSub with AWS configurations\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   */\n  function InteractionsClass(options) {\n    this._options = options;\n    logger.debug('Interactions Options', this._options);\n    this._pluggables = {};\n  }\n\n  InteractionsClass.prototype.getModuleName = function () {\n    return 'Interactions';\n  };\n  /**\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   * @return {Object} - The current configuration\n   */\n\n\n  InteractionsClass.prototype.configure = function (options) {\n    var _this = this;\n\n    var opt = options ? options.Interactions || options : {};\n    logger.debug('configure Interactions', {\n      opt: opt\n    });\n    this._options = __assign(__assign({\n      bots: {}\n    }, opt), opt.Interactions);\n    var aws_bots_config = this._options.aws_bots_config;\n    var bots_config = this._options.bots;\n\n    if (!Object.keys(bots_config).length && aws_bots_config) {\n      // Convert aws_bots_config to bots object\n      if (Array.isArray(aws_bots_config)) {\n        aws_bots_config.forEach(function (bot) {\n          _this._options.bots[bot.name] = bot;\n        });\n      }\n    } // Check if AWSLex provider is already on pluggables\n\n\n    if (!this._pluggables.AWSLexProvider && bots_config && Object.keys(bots_config).map(function (key) {\n      return bots_config[key];\n    }).find(function (bot) {\n      return !bot.providerName || bot.providerName === 'AWSLexProvider';\n    })) {\n      this._pluggables.AWSLexProvider = new AWSLexProvider();\n    }\n\n    Object.keys(this._pluggables).map(function (key) {\n      _this._pluggables[key].configure(_this._options.bots);\n    });\n    return this._options;\n  };\n\n  InteractionsClass.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable.getCategory() === 'Interactions') {\n      if (!this._pluggables[pluggable.getProviderName()]) {\n        pluggable.configure(this._options.bots);\n        this._pluggables[pluggable.getProviderName()] = pluggable;\n        return;\n      } else {\n        throw new Error('Bot ' + pluggable.getProviderName() + ' already plugged');\n      }\n    }\n  };\n\n  InteractionsClass.prototype.send = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var botProvider;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._options.bots || !this._options.bots[botname]) {\n              throw new Error('Bot ' + botname + ' does not exist');\n            }\n\n            botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n\n            if (!this._pluggables[botProvider]) {\n              throw new Error('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?');\n            }\n\n            return [4\n            /*yield*/\n            , this._pluggables[botProvider].sendMessage(botname, message)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  InteractionsClass.prototype.onComplete = function (botname, callback) {\n    if (!this._options.bots || !this._options.bots[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n\n    var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n\n    if (!this._pluggables[botProvider]) {\n      throw new Error('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?');\n    }\n\n    this._pluggables[botProvider].onComplete(botname, callback);\n  };\n\n  return InteractionsClass;\n}();\n\nexport { InteractionsClass };\nexport var Interactions = new InteractionsClass(null);\nAmplify.register(Interactions);","map":{"version":3,"mappings":"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","names":["Amplify","ConsoleLogger","Logger","AWSLexProvider","logger","options","_options","debug","_pluggables","InteractionsClass","opt","Interactions","__assign","bots","aws_bots_config","bots_config","Object","keys","length","Array","isArray","forEach","_this","bot","name","map","key","find","providerName","configure","pluggable","getCategory","getProviderName","Error","botname","message","botProvider","sendMessage","_a","callback","onComplete","register"],"sources":["/Users/richards/node_modules/@aws-amplify/interactions/src/Interactions.ts"],"sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport {\n\tInteractionsOptions,\n\tInteractionsProviders,\n\tInteractionsProvider,\n\tInteractionsMessage,\n\tInteractionsResponse,\n} from './types';\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nconst logger = new Logger('Interactions');\n\nexport class InteractionsClass {\n\tprivate _options: InteractionsOptions;\n\n\tprivate _pluggables: InteractionsProviders;\n\n\t/**\n\t * Initialize PubSub with AWS configurations\n\t *\n\t * @param {InteractionsOptions} options - Configuration object for Interactions\n\t */\n\tconstructor(options: InteractionsOptions) {\n\t\tthis._options = options;\n\t\tlogger.debug('Interactions Options', this._options);\n\t\tthis._pluggables = {};\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Interactions';\n\t}\n\n\t/**\n\t *\n\t * @param {InteractionsOptions} options - Configuration object for Interactions\n\t * @return {Object} - The current configuration\n\t */\n\tconfigure(options: InteractionsOptions) {\n\t\tconst opt = options ? options.Interactions || options : {};\n\t\tlogger.debug('configure Interactions', { opt });\n\t\tthis._options = { bots: {}, ...opt, ...opt.Interactions };\n\n\t\tconst aws_bots_config = this._options.aws_bots_config;\n\t\tconst bots_config = this._options.bots;\n\n\t\tif (!Object.keys(bots_config).length && aws_bots_config) {\n\t\t\t// Convert aws_bots_config to bots object\n\t\t\tif (Array.isArray(aws_bots_config)) {\n\t\t\t\taws_bots_config.forEach(bot => {\n\t\t\t\t\tthis._options.bots[bot.name] = bot;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Check if AWSLex provider is already on pluggables\n\t\tif (\n\t\t\t!this._pluggables.AWSLexProvider &&\n\t\t\tbots_config &&\n\t\t\tObject.keys(bots_config)\n\t\t\t\t.map(key => bots_config[key])\n\t\t\t\t.find(bot => !bot.providerName || bot.providerName === 'AWSLexProvider')\n\t\t) {\n\t\t\tthis._pluggables.AWSLexProvider = new AWSLexProvider();\n\t\t}\n\n\t\tObject.keys(this._pluggables).map(key => {\n\t\t\tthis._pluggables[key].configure(this._options.bots);\n\t\t});\n\n\t\treturn this._options;\n\t}\n\n\tpublic addPluggable(pluggable: InteractionsProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'Interactions') {\n\t\t\tif (!this._pluggables[pluggable.getProviderName()]) {\n\t\t\t\tpluggable.configure(this._options.bots);\n\t\t\t\tthis._pluggables[pluggable.getProviderName()] = pluggable;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Bot ' + pluggable.getProviderName() + ' already plugged'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: string\n\t): Promise<InteractionsResponse>;\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: InteractionsMessage\n\t): Promise<InteractionsResponse>;\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: object\n\t): Promise<InteractionsResponse>;\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: string | object\n\t): Promise<InteractionsResponse> {\n\t\tif (!this._options.bots || !this._options.bots[botname]) {\n\t\t\tthrow new Error('Bot ' + botname + ' does not exist');\n\t\t}\n\n\t\tconst botProvider =\n\t\t\tthis._options.bots[botname].providerName || 'AWSLexProvider';\n\n\t\tif (!this._pluggables[botProvider]) {\n\t\t\tthrow new Error(\n\t\t\t\t'Bot ' +\n\t\t\t\t\tbotProvider +\n\t\t\t\t\t' does not have valid pluggin did you try addPluggable first?'\n\t\t\t);\n\t\t}\n\t\treturn await this._pluggables[botProvider].sendMessage(botname, message);\n\t}\n\n\tpublic onComplete(botname: string, callback: (err, confirmation) => void) {\n\t\tif (!this._options.bots || !this._options.bots[botname]) {\n\t\t\tthrow new Error('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tconst botProvider =\n\t\t\tthis._options.bots[botname].providerName || 'AWSLexProvider';\n\n\t\tif (!this._pluggables[botProvider]) {\n\t\t\tthrow new Error(\n\t\t\t\t'Bot ' +\n\t\t\t\t\tbotProvider +\n\t\t\t\t\t' does not have valid pluggin did you try addPluggable first?'\n\t\t\t);\n\t\t}\n\t\tthis._pluggables[botProvider].onComplete(botname, callback);\n\t}\n}\n\nexport const Interactions = new InteractionsClass(null);\nAmplify.register(Interactions);\n"]},"metadata":{},"sourceType":"module"}