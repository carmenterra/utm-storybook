{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport { ConsoleLogger as Logger, Credentials, Parser, StorageHelper, Hub } from '@aws-amplify/core';\nimport { GetObjectCommand, DeleteObjectCommand, ListObjectsCommand, CopyObjectCommand } from '@aws-sdk/client-s3';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport { createRequest } from '@aws-sdk/util-create-request';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { SEND_DOWNLOAD_PROGRESS_EVENT, SEND_UPLOAD_PROGRESS_EVENT } from './axios-http-handler';\nimport { StorageErrorStrings } from '../common/StorageErrorStrings';\nimport { dispatchStorageEvent } from '../common/StorageUtils';\nimport { createPrefixMiddleware, prefixMiddlewareOptions, getPrefix, autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, createS3Client } from '../common/S3ClientUtils';\nimport { AWSS3ProviderManagedUpload } from './AWSS3ProviderManagedUpload';\nimport { AWSS3UploadTask, TaskEvents } from './AWSS3UploadTask';\nimport { UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nimport * as events from 'events';\nvar logger = new Logger('AWSS3Provider');\nvar DEFAULT_STORAGE_LEVEL = 'public';\nvar DEFAULT_PRESIGN_EXPIRATION = 900;\n/**\n * Provide storage methods to use AWS S3\n */\n\nvar AWSS3Provider =\n/** @class */\nfunction () {\n  /**\n   * Initialize Storage with AWS configurations\n   * @param {Object} config - Configuration object for storage\n   */\n  function AWSS3Provider(config) {\n    var _this = this;\n\n    this._config = config ? config : {};\n    this._storage = new StorageHelper().getStorage();\n    Hub.listen('auth', function (data) {\n      var payload = data.payload;\n\n      if (payload.event === 'signOut' || payload.event === 'signIn') {\n        _this._storage.removeItem(UPLOADS_STORAGE_KEY);\n      }\n    });\n    logger.debug('Storage Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   */\n\n\n  AWSS3Provider.prototype.getCategory = function () {\n    return AWSS3Provider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   */\n\n\n  AWSS3Provider.prototype.getProviderName = function () {\n    return AWSS3Provider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Storage part with aws configuration\n   * @param {Object} config - Configuration of the Storage\n   * @return {Object} - Current configuration\n   */\n\n\n  AWSS3Provider.prototype.configure = function (config) {\n    logger.debug('configure Storage', config);\n    if (!config) return this._config;\n    var amplifyConfig = Parser.parseMobilehubConfig(config);\n    this._config = Object.assign({}, this._config, amplifyConfig.Storage);\n\n    if (!this._config.bucket) {\n      logger.debug('Do not have bucket yet');\n    }\n\n    return this._config;\n  };\n\n  AWSS3Provider.prototype.startResumableUpload = function (addTaskInput, config) {\n    var s3Client = addTaskInput.s3Client,\n        emitter = addTaskInput.emitter,\n        key = addTaskInput.key,\n        file = addTaskInput.file,\n        params = addTaskInput.params;\n    var progressCallback = config.progressCallback,\n        completeCallback = config.completeCallback,\n        errorCallback = config.errorCallback,\n        _a = config.track,\n        track = _a === void 0 ? false : _a;\n\n    if (!(file instanceof Blob)) {\n      throw new Error(StorageErrorStrings.INVALID_BLOB);\n    }\n\n    emitter.on(TaskEvents.UPLOAD_PROGRESS, function (event) {\n      if (progressCallback) {\n        if (typeof progressCallback === 'function') {\n          progressCallback(event);\n        } else {\n          logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n        }\n      }\n    });\n    emitter.on(TaskEvents.UPLOAD_COMPLETE, function (event) {\n      if (completeCallback) {\n        if (typeof completeCallback === 'function') {\n          completeCallback(event);\n        } else {\n          logger.warn('completeCallback should be a function, not a ' + typeof completeCallback);\n        }\n      }\n    });\n    emitter.on(TaskEvents.ERROR, function (err) {\n      if (errorCallback) {\n        if (typeof errorCallback === 'function') {\n          errorCallback(err);\n        } else {\n          logger.warn('errorCallback should be a function, not a ' + typeof errorCallback);\n        }\n      }\n    }); // we want to keep this function sync so we defer this promise to AWSS3UploadTask to resolve when it's needed\n    // when its doing a final check with _listSingleFile function\n\n    var prefixPromise = Credentials.get().then(function (credentials) {\n      var cred = Credentials.shear(credentials);\n      return getPrefix(__assign(__assign({}, config), {\n        credentials: cred\n      }));\n    });\n    var task = new AWSS3UploadTask({\n      s3Client: s3Client,\n      file: file,\n      emitter: emitter,\n      level: config.level,\n      storage: this._storage,\n      params: params,\n      prefixPromise: prefixPromise\n    });\n    dispatchStorageEvent(track, 'upload', {\n      method: 'put',\n      result: 'success'\n    }, null, \"Upload Task created successfully for \" + key); // automatically start the upload task\n\n    task.resume();\n    return task;\n  };\n  /**\n   * Copy an object from a source object to a new object within the same bucket. Can optionally copy files across\n   * different level or identityId (if source object's level is 'protected').\n   *\n   * @async\n   * @param {S3CopySource} src - Key and optionally access level and identityId of the source object.\n   * @param {S3CopyDestination} dest - Key and optionally access level of the destination object.\n   * @param {S3ProviderCopyConfig} [config] - Optional configuration for s3 commands.\n   * @return {Promise<S3ProviderCopyOutput>} The key of the copied object.\n   */\n\n\n  AWSS3Provider.prototype.copy = function (src, dest, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, acl, bucket, cacheControl, expires, track, serverSideEncryption, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, SSEKMSKeyId, _a, srcLevel, srcIdentityId, srcKey, _b, destLevel, destKey, srcPrefix, destPrefix, finalSrcKey, finalDestKey, params, s3, error_1;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _c.sent();\n\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n\n            opt = Object.assign({}, this._config, config);\n            acl = opt.acl, bucket = opt.bucket, cacheControl = opt.cacheControl, expires = opt.expires, track = opt.track, serverSideEncryption = opt.serverSideEncryption, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, SSEKMSKeyId = opt.SSEKMSKeyId;\n            _a = src.level, srcLevel = _a === void 0 ? DEFAULT_STORAGE_LEVEL : _a, srcIdentityId = src.identityId, srcKey = src.key;\n            _b = dest.level, destLevel = _b === void 0 ? DEFAULT_STORAGE_LEVEL : _b, destKey = dest.key;\n\n            if (!srcKey || typeof srcKey !== 'string') {\n              throw new Error(StorageErrorStrings.NO_SRC_KEY);\n            }\n\n            if (!destKey || typeof destKey !== 'string') {\n              throw new Error(StorageErrorStrings.NO_DEST_KEY);\n            }\n\n            if (srcLevel !== 'protected' && srcIdentityId) {\n              logger.warn(\"You may copy files from another user if the source level is \\\"protected\\\", currently it's \" + srcLevel);\n            }\n\n            srcPrefix = this._prefix(__assign(__assign(__assign({}, opt), {\n              level: srcLevel\n            }), srcIdentityId && {\n              identityId: srcIdentityId\n            }));\n            destPrefix = this._prefix(__assign(__assign({}, opt), {\n              level: destLevel\n            }));\n            finalSrcKey = bucket + \"/\" + srcPrefix + srcKey;\n            finalDestKey = \"\" + destPrefix + destKey;\n            logger.debug(\"copying \" + finalSrcKey + \" to \" + finalDestKey);\n            params = {\n              Bucket: bucket,\n              CopySource: finalSrcKey,\n              Key: finalDestKey,\n              // Copies over metadata like contentType as well\n              MetadataDirective: 'COPY'\n            };\n            if (cacheControl) params.CacheControl = cacheControl;\n            if (expires) params.Expires = expires;\n\n            if (serverSideEncryption) {\n              params.ServerSideEncryption = serverSideEncryption;\n            }\n\n            if (SSECustomerAlgorithm) {\n              params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n            }\n\n            if (SSECustomerKey) {\n              params.SSECustomerKey = SSECustomerKey;\n            }\n\n            if (SSECustomerKeyMD5) {\n              params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n            }\n\n            if (SSEKMSKeyId) {\n              params.SSEKMSKeyId = SSEKMSKeyId;\n            }\n\n            if (acl) params.ACL = acl;\n            s3 = this._createNewS3Client(opt);\n            _c.label = 2;\n\n          case 2:\n            _c.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , s3.send(new CopyObjectCommand(params))];\n\n          case 3:\n            _c.sent();\n\n            dispatchStorageEvent(track, 'copy', {\n              method: 'copy',\n              result: 'success'\n            }, null, \"Copy success from \" + srcKey + \" to \" + destKey);\n            return [2\n            /*return*/\n            , {\n              key: destKey\n            }];\n\n          case 4:\n            error_1 = _c.sent();\n            dispatchStorageEvent(track, 'copy', {\n              method: 'copy',\n              result: 'failed'\n            }, null, \"Copy failed from \" + srcKey + \" to \" + destKey);\n            throw error_1;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3Provider.prototype.get = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, download, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, expires, track, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, progressCallback, prefix, final_key, emitter, s3, params, getObjectCommand, response, error_2, signer, request, url, _a, error_3;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _b.sent();\n\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, download = opt.download, cacheControl = opt.cacheControl, contentDisposition = opt.contentDisposition, contentEncoding = opt.contentEncoding, contentLanguage = opt.contentLanguage, contentType = opt.contentType, expires = opt.expires, track = opt.track, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, progressCallback = opt.progressCallback;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            emitter = new events.EventEmitter();\n            s3 = this._createNewS3Client(opt, emitter);\n            logger.debug('get ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            }; // See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property\n\n            if (cacheControl) params.ResponseCacheControl = cacheControl;\n            if (contentDisposition) params.ResponseContentDisposition = contentDisposition;\n            if (contentEncoding) params.ResponseContentEncoding = contentEncoding;\n            if (contentLanguage) params.ResponseContentLanguage = contentLanguage;\n            if (contentType) params.ResponseContentType = contentType;\n\n            if (SSECustomerAlgorithm) {\n              params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n            }\n\n            if (SSECustomerKey) {\n              params.SSECustomerKey = SSECustomerKey;\n            }\n\n            if (SSECustomerKeyMD5) {\n              params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n            }\n\n            if (!(download === true)) return [3\n            /*break*/\n            , 5];\n            getObjectCommand = new GetObjectCommand(params);\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2, 4,, 5]);\n\n            if (progressCallback) {\n              if (typeof progressCallback === 'function') {\n                emitter.on(SEND_DOWNLOAD_PROGRESS_EVENT, function (progress) {\n                  progressCallback(progress);\n                });\n              } else {\n                logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n              }\n            }\n\n            return [4\n            /*yield*/\n            , s3.send(getObjectCommand)];\n\n          case 3:\n            response = _b.sent();\n            emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n            dispatchStorageEvent(track, 'download', {\n              method: 'get',\n              result: 'success'\n            }, {\n              fileSize: Number(response.Body['size'] || response.Body['length'])\n            }, \"Download success for \" + key);\n            return [2\n            /*return*/\n            , response];\n\n          case 4:\n            error_2 = _b.sent();\n            dispatchStorageEvent(track, 'download', {\n              method: 'get',\n              result: 'failed'\n            }, null, \"Download failed with \" + error_2.message);\n            throw error_2;\n\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n\n            signer = new S3RequestPresigner(__assign({}, s3.config));\n            return [4\n            /*yield*/\n            , createRequest(s3, new GetObjectCommand(params))];\n\n          case 6:\n            request = _b.sent();\n            _a = formatUrl;\n            return [4\n            /*yield*/\n            , signer.presign(request, {\n              expiresIn: expires || DEFAULT_PRESIGN_EXPIRATION\n            })];\n\n          case 7:\n            url = _a.apply(void 0, [_b.sent()]);\n            dispatchStorageEvent(track, 'getSignedUrl', {\n              method: 'get',\n              result: 'success'\n            }, null, \"Signed URL: \" + url);\n            return [2\n            /*return*/\n            , url];\n\n          case 8:\n            error_3 = _b.sent();\n            logger.warn('get signed url error', error_3);\n            dispatchStorageEvent(track, 'getSignedUrl', {\n              method: 'get',\n              result: 'failed'\n            }, null, \"Could not get a signed URL for \" + key);\n            throw error_3;\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Put a file in S3 bucket specified to configure method\n   * @param key - key of the object\n   * @param object - File to be put in Amazon S3 bucket\n   * @param [config] - Optional configuration for the underlying S3 command\n   * @return an instance of AWSS3UploadTask or a promise that resolves to an object with the new object's key on\n   * success.\n   */\n\n\n  AWSS3Provider.prototype.put = function (key, object, config) {\n    var opt = Object.assign({}, this._config, config);\n    var bucket = opt.bucket,\n        track = opt.track,\n        progressCallback = opt.progressCallback,\n        level = opt.level,\n        resumable = opt.resumable;\n    var contentType = opt.contentType,\n        contentDisposition = opt.contentDisposition,\n        contentEncoding = opt.contentEncoding,\n        cacheControl = opt.cacheControl,\n        expires = opt.expires,\n        metadata = opt.metadata,\n        tagging = opt.tagging,\n        acl = opt.acl;\n    var serverSideEncryption = opt.serverSideEncryption,\n        SSECustomerAlgorithm = opt.SSECustomerAlgorithm,\n        SSECustomerKey = opt.SSECustomerKey,\n        SSECustomerKeyMD5 = opt.SSECustomerKeyMD5,\n        SSEKMSKeyId = opt.SSEKMSKeyId;\n    var type = contentType ? contentType : 'binary/octet-stream';\n    var params = {\n      Bucket: bucket,\n      Key: key,\n      Body: object,\n      ContentType: type\n    };\n\n    if (cacheControl) {\n      params.CacheControl = cacheControl;\n    }\n\n    if (contentDisposition) {\n      params.ContentDisposition = contentDisposition;\n    }\n\n    if (contentEncoding) {\n      params.ContentEncoding = contentEncoding;\n    }\n\n    if (expires) {\n      params.Expires = expires;\n    }\n\n    if (metadata) {\n      params.Metadata = metadata;\n    }\n\n    if (tagging) {\n      params.Tagging = tagging;\n    }\n\n    if (serverSideEncryption) {\n      params.ServerSideEncryption = serverSideEncryption;\n    }\n\n    if (SSECustomerAlgorithm) {\n      params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n    }\n\n    if (SSECustomerKey) {\n      params.SSECustomerKey = SSECustomerKey;\n    }\n\n    if (SSECustomerKeyMD5) {\n      params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n    }\n\n    if (SSEKMSKeyId) {\n      params.SSEKMSKeyId = SSEKMSKeyId;\n    }\n\n    var emitter = new events.EventEmitter();\n    var uploader = new AWSS3ProviderManagedUpload(params, opt, emitter);\n\n    if (acl) {\n      params.ACL = acl;\n    }\n\n    if (resumable === true) {\n      var s3Client = this._createNewS3Client(opt); // we are using aws sdk middleware to inject the prefix to key, this way we don't have to call\n      // this._ensureCredentials() which allows us to make this function sync so we can return non-Promise like UploadTask\n\n\n      s3Client.middlewareStack.add(createPrefixMiddleware(opt, key), prefixMiddlewareOptions);\n      var addTaskInput = {\n        bucket: bucket,\n        key: key,\n        s3Client: s3Client,\n        file: object,\n        emitter: emitter,\n        accessLevel: level,\n        params: params\n      }; // explicitly asserting the type here as Typescript could not infer that resumable is of type true\n\n      return this.startResumableUpload(addTaskInput, config);\n    }\n\n    try {\n      if (progressCallback) {\n        if (typeof progressCallback === 'function') {\n          emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n            progressCallback(progress);\n          });\n        } else {\n          logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n        }\n      }\n\n      return uploader.upload().then(function (response) {\n        logger.debug('upload result', response);\n        dispatchStorageEvent(track, 'upload', {\n          method: 'put',\n          result: 'success'\n        }, null, \"Upload success for \" + key);\n        return {\n          key: key\n        };\n      });\n    } catch (error) {\n      logger.warn('error uploading', error);\n      dispatchStorageEvent(track, 'upload', {\n        method: 'put',\n        result: 'failed'\n      }, null, \"Error uploading \" + key);\n      throw error;\n    }\n  };\n  /**\n   * Remove the object for specified key\n   * @param {string} key - key of the object\n   * @param {S3ProviderRemoveConfig} [config] - Optional configuration for the underlying S3 command\n   * @return {Promise<S3ProviderRemoveOutput>} - Promise resolves upon successful removal of the object\n   */\n\n\n  AWSS3Provider.prototype.remove = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, prefix, final_key, s3, params, deleteObjectCommand, response, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            s3 = this._createNewS3Client(opt);\n            logger.debug('remove ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            deleteObjectCommand = new DeleteObjectCommand(params);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , s3.send(deleteObjectCommand)];\n\n          case 3:\n            response = _a.sent();\n            dispatchStorageEvent(track, 'delete', {\n              method: 'remove',\n              result: 'success'\n            }, null, \"Deleted \" + key + \" successfully\");\n            return [2\n            /*return*/\n            , response];\n\n          case 4:\n            error_4 = _a.sent();\n            dispatchStorageEvent(track, 'delete', {\n              method: 'remove',\n              result: 'failed'\n            }, null, \"Deletion of \" + key + \" failed with \" + error_4);\n            throw error_4;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * List bucket objects relative to the level and prefix specified\n   * @param {string} path - the path that contains objects\n   * @param {S3ProviderListConfig} [config] - Optional configuration for the underlying S3 command\n   * @return {Promise<S3ProviderListOutput>} - Promise resolves to list of keys, eTags, lastModified and file size for\n   * all objects in path\n   */\n\n\n  AWSS3Provider.prototype.list = function (path, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, maxKeys, prefix, final_path, s3, params, listObjectsCommand, response, list, error_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track, maxKeys = opt.maxKeys;\n            prefix = this._prefix(opt);\n            final_path = prefix + path;\n            s3 = this._createNewS3Client(opt);\n            logger.debug('list ' + path + ' from ' + final_path);\n            params = {\n              Bucket: bucket,\n              Prefix: final_path,\n              MaxKeys: maxKeys\n            };\n            listObjectsCommand = new ListObjectsCommand(params);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , s3.send(listObjectsCommand)];\n\n          case 3:\n            response = _a.sent();\n            list = [];\n\n            if (response && response.Contents) {\n              list = response.Contents.map(function (item) {\n                return {\n                  key: item.Key.substr(prefix.length),\n                  eTag: item.ETag,\n                  lastModified: item.LastModified,\n                  size: item.Size\n                };\n              });\n            }\n\n            dispatchStorageEvent(track, 'list', {\n              method: 'list',\n              result: 'success'\n            }, null, list.length + \" items returned from list operation\");\n            logger.debug('list', list);\n            return [2\n            /*return*/\n            , list];\n\n          case 4:\n            error_5 = _a.sent();\n            logger.warn('list error', error_5);\n            dispatchStorageEvent(track, 'list', {\n              method: 'list',\n              result: 'failed'\n            }, null, \"Listing items failed: \" + error_5.message);\n            throw error_5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3Provider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2\n            /*return*/\n            , false];\n            cred = Credentials.shear(credentials);\n            logger.debug('set credentials for storage', cred);\n            this._config.credentials = cred;\n            return [2\n            /*return*/\n            , true];\n\n          case 2:\n            error_6 = _a.sent();\n            logger.warn('ensure credentials error', error_6);\n            return [2\n            /*return*/\n            , false];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3Provider.prototype._isWithCredentials = function (config) {\n    return typeof config === 'object' && config.hasOwnProperty('credentials');\n  };\n\n  AWSS3Provider.prototype._prefix = function (config) {\n    var credentials = config.credentials,\n        level = config.level;\n    var customPrefix = config.customPrefix || {};\n    var identityId = config.identityId || credentials.identityId;\n    var privatePath = (customPrefix.private !== undefined ? customPrefix.private : 'private/') + identityId + '/';\n    var protectedPath = (customPrefix.protected !== undefined ? customPrefix.protected : 'protected/') + identityId + '/';\n    var publicPath = customPrefix.public !== undefined ? customPrefix.public : 'public/';\n\n    switch (level) {\n      case 'private':\n        return privatePath;\n\n      case 'protected':\n        return protectedPath;\n\n      default:\n        return publicPath;\n    }\n  };\n  /**\n   * Creates an S3 client with new V3 aws sdk\n   */\n\n\n  AWSS3Provider.prototype._createNewS3Client = function (config, emitter) {\n    var s3client = createS3Client(config, emitter);\n    s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n    return s3client;\n  };\n\n  AWSS3Provider.CATEGORY = 'Storage';\n  AWSS3Provider.PROVIDER_NAME = 'AWSS3';\n  return AWSS3Provider;\n}();\n\nexport { AWSS3Provider };\n/**\n * @deprecated use named import\n */\n\nexport default AWSS3Provider;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAYA,SACCA,aAAa,IAAIC,MADlB,EAECC,WAFD,EAGCC,MAHD,EAKCC,aALD,EAMCC,GAND,QAOO,mBAPP;AAQA,SAECC,gBAFD,EAGCC,mBAHD,EAICC,kBAJD,EAQCC,iBARD,QAWO,oBAXP;AAYA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SACCC,4BADD,EAECC,0BAFD,QAGO,sBAHP;AAwBA,SAASC,mBAAT,QAAoC,+BAApC;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SACCC,sBADD,EAECC,uBAFD,EAGCC,SAHD,EAICC,6BAJD,EAKCC,oCALD,EAMCC,cAND,QAOO,yBAPP;AAQA,SAASC,0BAAT,QAA2C,8BAA3C;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,mBAA5C;AACA,SAASC,mBAAT,QAAoC,4BAApC;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AAGA,IAAMC,MAAM,GAAG,IAAI3B,MAAJ,CAAW,eAAX,CAAf;AAEA,IAAM4B,qBAAqB,GAAG,QAA9B;AACA,IAAMC,0BAA0B,GAAG,GAAnC;AAYA;;;;AAGA;AAAA;AAAA;AAMC;;;;AAIA,yBAAYC,MAAZ,EAAmC;AAAnC;;AACC,SAAKC,OAAL,GAAeD,MAAM,GAAGA,MAAH,GAAY,EAAjC;AACA,SAAKE,QAAL,GAAgB,IAAI7B,aAAJ,GAAoB8B,UAApB,EAAhB;AACA7B,OAAG,CAAC8B,MAAJ,CAAW,MAAX,EAAmB,gBAAI;AACd;;AACR,UAAIC,OAAO,CAACC,KAAR,KAAkB,SAAlB,IAA+BD,OAAO,CAACC,KAAR,KAAkB,QAArD,EAA+D;AAC9DC,aAAI,CAACL,QAAL,CAAcM,UAAd,CAAyBb,mBAAzB;AACA;AACD,KALD;AAMAE,UAAM,CAACY,KAAP,CAAa,iBAAb,EAAgC,KAAKR,OAArC;AACA;AAED;;;;;AAGOS,wCAAP;AACC,WAAOA,aAAa,CAACC,QAArB;AACA,GAFM;AAIP;;;;;AAGAD;AACC,WAAOA,aAAa,CAACE,aAArB;AACA,GAFD;AAIA;;;;;;;AAKOF,sCAAP,UAAiBV,MAAjB,EAAwB;AACvBH,UAAM,CAACY,KAAP,CAAa,mBAAb,EAAkCT,MAAlC;AACA,QAAI,CAACA,MAAL,EAAa,OAAO,KAAKC,OAAZ;AACb,QAAMY,aAAa,GAAGzC,MAAM,CAAC0C,oBAAP,CAA4Bd,MAA5B,CAAtB;AACA,SAAKC,OAAL,GAAec,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKf,OAAvB,EAAgCY,aAAa,CAACI,OAA9C,CAAf;;AACA,QAAI,CAAC,KAAKhB,OAAL,CAAaiB,MAAlB,EAA0B;AACzBrB,YAAM,CAACY,KAAP,CAAa,wBAAb;AACA;;AACD,WAAO,KAAKR,OAAZ;AACA,GATM;;AAWCS,iDAAR,UACCS,YADD,EAECnB,MAFD,EAEoD;AAE3C;AAAA,QAAUoB,8BAAV;AAAA,QAAmBC,sBAAnB;AAAA,QAAwBC,wBAAxB;AAAA,QAA8BC,4BAA9B;AAEP;AAAA,QACAC,0CADA;AAAA,QAEAC,oCAFA;AAAA,QAGAC,iBAHA;AAAA,QAGAC,kCAHA;;AAKD,QAAI,EAAEL,IAAI,YAAYM,IAAlB,CAAJ,EAA6B;AAC5B,YAAM,IAAIC,KAAJ,CAAU7C,mBAAmB,CAAC8C,YAA9B,CAAN;AACA;;AAEDV,WAAO,CAACW,EAAR,CAAWrC,UAAU,CAACsC,eAAtB,EAAuC,iBAAK;AAC3C,UAAIC,gBAAJ,EAAsB;AACrB,YAAI,OAAOA,gBAAP,KAA4B,UAAhC,EAA4C;AAC3CA,0BAAgB,CAAC3B,KAAD,CAAhB;AACA,SAFD,MAEO;AACNT,gBAAM,CAACqC,IAAP,CACC,kDACC,OAAOD,gBAFT;AAIA;AACD;AACD,KAXD;AAaAb,WAAO,CAACW,EAAR,CAAWrC,UAAU,CAACyC,eAAtB,EAAuC,iBAAK;AAC3C,UAAIX,gBAAJ,EAAsB;AACrB,YAAI,OAAOA,gBAAP,KAA4B,UAAhC,EAA4C;AAC3CA,0BAAgB,CAAClB,KAAD,CAAhB;AACA,SAFD,MAEO;AACNT,gBAAM,CAACqC,IAAP,CACC,kDACC,OAAOV,gBAFT;AAIA;AACD;AACD,KAXD;AAaAJ,WAAO,CAACW,EAAR,CAAWrC,UAAU,CAAC0C,KAAtB,EAA6B,eAAG;AAC/B,UAAIX,aAAJ,EAAmB;AAClB,YAAI,OAAOA,aAAP,KAAyB,UAA7B,EAAyC;AACxCA,uBAAa,CAACY,GAAD,CAAb;AACA,SAFD,MAEO;AACNxC,gBAAM,CAACqC,IAAP,CACC,+CAA+C,OAAOT,aADvD;AAGA;AACD;AACD,KAVD,EAvCmD,CAmDnD;AACA;;AACA,QAAMa,aAAa,GAAoBnE,WAAW,CAACoE,GAAZ,GAAkBC,IAAlB,CACtC,UAACC,WAAD,EAAiB;AAChB,UAAMC,IAAI,GAAGvE,WAAW,CAACwE,KAAZ,CAAkBF,WAAlB,CAAb;AACA,aAAOrD,SAAS,uBACZY,MADY,GACN;AACTyC,mBAAW,EAAEC;AADJ,OADM,EAAhB;AAIA,KAPqC,CAAvC;AAUA,QAAME,IAAI,GAAG,IAAInD,eAAJ,CAAoB;AAChCoD,cAAQ,UADwB;AAEhCvB,UAAI,MAF4B;AAGhCF,aAAO,SAHyB;AAIhC0B,WAAK,EAAE9C,MAAM,CAAC8C,KAJkB;AAKhCC,aAAO,EAAE,KAAK7C,QALkB;AAMhCqB,YAAM,QAN0B;AAOhCe,mBAAa;AAPmB,KAApB,CAAb;AAUArD,wBAAoB,CACnB0C,KADmB,EAEnB,QAFmB,EAGnB;AAAEqB,YAAM,EAAE,KAAV;AAAiBC,YAAM,EAAE;AAAzB,KAHmB,EAInB,IAJmB,EAKnB,0CAAwC5B,GALrB,CAApB,CAzEmD,CAiFnD;;AACAuB,QAAI,CAACM,MAAL;AAEA,WAAON,IAAP;AACA,GAvFO;AAyFR;;;;;;;;;;;;AAUalC,iCAAb,UACCyC,GADD,EAECC,IAFD,EAGCpD,MAHD,EAG8B;;;;;;;AAEP;AAAA;AAAA,cAAM,KAAKqD,kBAAL,EAAN;;;AAAhBC,yBAAa,GAAGC,SAAhB;;AACN,gBAAI,CAACD,aAAD,IAAkB,CAAC,KAAKE,kBAAL,CAAwB,KAAKvD,OAA7B,CAAvB,EAA8D;AAC7D,oBAAM,IAAI4B,KAAJ,CAAU7C,mBAAmB,CAACyE,cAA9B,CAAN;AACA;;AACKC,eAAG,GAAG3C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKf,OAAvB,EAAgCD,MAAhC,CAAN;AAEL2D,eAAG,GAUAD,GAAG,IAVN,EACAxC,MAAM,GASHwC,GAAG,OAVN,EAEAE,YAAY,GAQTF,GAAG,aAVN,EAGAG,OAAO,GAOJH,GAAG,QAVN,EAIA/B,KAAK,GAMF+B,GAAG,MAVN,EAKAI,oBAAoB,GAKjBJ,GAAG,qBAVN,EAMAK,oBAAoB,GAIjBL,GAAG,qBAVN,EAOAM,cAAc,GAGXN,GAAG,eAVN,EAQAO,iBAAiB,GAEdP,GAAG,kBAVN,EASAQ,WAAW,GACRR,GAAG,YAVN;AAYAhC,iBAGGyB,GAAG,MAHN,EAAOgB,QAAQ,mBAAGrE,qBAAH,GAAwB4B,EAAvC,EACY0C,aAAa,GAEtBjB,GAAG,WAHN,EAEKkB,MAAM,GACRlB,GAAG,IAHN;AAIOmB,iBAA2DlB,IAAI,MAA/D,EAAOmB,SAAS,mBAAGzE,qBAAH,GAAwBwE,EAAxC,EAA+CE,OAAO,GAAKpB,IAAI,IAA/D;;AACR,gBAAI,CAACiB,MAAD,IAAW,OAAOA,MAAP,KAAkB,QAAjC,EAA2C;AAC1C,oBAAM,IAAIxC,KAAJ,CAAU7C,mBAAmB,CAACyF,UAA9B,CAAN;AACA;;AACD,gBAAI,CAACD,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C;AAC5C,oBAAM,IAAI3C,KAAJ,CAAU7C,mBAAmB,CAAC0F,WAA9B,CAAN;AACA;;AACD,gBAAIP,QAAQ,KAAK,WAAb,IAA4BC,aAAhC,EAA+C;AAC9CvE,oBAAM,CAACqC,IAAP,CACC,+FAA2FiC,QAD5F;AAGA;;AACKQ,qBAAS,GAAG,KAAKC,OAAL,CAAYC,+BAC1BnB,GAD0B,GACvB;AACNZ,mBAAK,EAAEqB;AADD,aADuB,GAGzBC,aAAa,IAAI;AAAEU,wBAAU,EAAEV;AAAd,aAHQ,CAAZ,CAAZ;AAKAW,sBAAU,GAAG,KAAKH,OAAL,CAAYC,sBAAMnB,GAAN,GAAS;AAAEZ,mBAAK,EAAEyB;AAAT,aAAT,CAAZ,CAAb;AACAS,uBAAW,GAAM9D,MAAM,MAAN,GAAUyD,SAAV,GAAsBN,MAAvC;AACAY,wBAAY,GAAG,KAAGF,UAAH,GAAgBP,OAA/B;AACN3E,kBAAM,CAACY,KAAP,CAAa,aAAWuE,WAAX,GAAsB,MAAtB,GAA6BC,YAA1C;AAEM1D,kBAAM,GAA2B;AACtC2D,oBAAM,EAAEhE,MAD8B;AAEtCiE,wBAAU,EAAEH,WAF0B;AAGtCI,iBAAG,EAAEH,YAHiC;AAItC;AACAI,+BAAiB,EAAE;AALmB,aAAjC;AAQN,gBAAIzB,YAAJ,EAAkBrC,MAAM,CAAC+D,YAAP,GAAsB1B,YAAtB;AAClB,gBAAIC,OAAJ,EAAatC,MAAM,CAACgE,OAAP,GAAiB1B,OAAjB;;AACb,gBAAIC,oBAAJ,EAA0B;AACzBvC,oBAAM,CAACiE,oBAAP,GAA8B1B,oBAA9B;AACA;;AACD,gBAAIC,oBAAJ,EAA0B;AACzBxC,oBAAM,CAACwC,oBAAP,GAA8BA,oBAA9B;AACA;;AACD,gBAAIC,cAAJ,EAAoB;AACnBzC,oBAAM,CAACyC,cAAP,GAAwBA,cAAxB;AACA;;AACD,gBAAIC,iBAAJ,EAAuB;AACtB1C,oBAAM,CAAC0C,iBAAP,GAA2BA,iBAA3B;AACA;;AACD,gBAAIC,WAAJ,EAAiB;AAChB3C,oBAAM,CAAC2C,WAAP,GAAqBA,WAArB;AACA;;AACD,gBAAIP,GAAJ,EAASpC,MAAM,CAACkE,GAAP,GAAa9B,GAAb;AAEH+B,cAAE,GAAG,KAAKC,kBAAL,CAAwBjC,GAAxB,CAAL;;;;;;AAEL;AAAA;AAAA,cAAMgC,EAAE,CAACE,IAAH,CAAQ,IAAIlH,iBAAJ,CAAsB6C,MAAtB,CAAR,CAAN;;;AAAAgC;;AACAtE,gCAAoB,CACnB0C,KADmB,EAEnB,MAFmB,EAGnB;AACCqB,oBAAM,EAAE,MADT;AAECC,oBAAM,EAAE;AAFT,aAHmB,EAOnB,IAPmB,EAQnB,uBAAqBoB,MAArB,GAA2B,MAA3B,GAAkCG,OARf,CAApB;AAUA;AAAA;AAAA,cAAO;AACNnD,iBAAG,EAAEmD;AADC,aAAP;;;;AAIAvF,gCAAoB,CACnB0C,KADmB,EAEnB,MAFmB,EAGnB;AACCqB,oBAAM,EAAE,MADT;AAECC,oBAAM,EAAE;AAFT,aAHmB,EAOnB,IAPmB,EAQnB,sBAAoBoB,MAApB,GAA0B,MAA1B,GAAiCG,OARd,CAApB;AAUA,kBAAMqB,OAAN;;;;;;;;;AAED,GAzGY;;AAuHAnF,gCAAb,UACCW,GADD,EAECrB,MAFD,EAE6B;;;;;;;AAEN;AAAA;AAAA,cAAM,KAAKqD,kBAAL,EAAN;;;AAAhBC,yBAAa,GAAGgB,SAAhB;;AACN,gBAAI,CAAChB,aAAD,IAAkB,CAAC,KAAKE,kBAAL,CAAwB,KAAKvD,OAA7B,CAAvB,EAA8D;AAC7D,oBAAM,IAAI4B,KAAJ,CAAU7C,mBAAmB,CAACyE,cAA9B,CAAN;AACA;;AACKC,eAAG,GAAG3C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKf,OAAvB,EAAgCD,MAAhC,CAAN;AAELkB,kBAAM,GAaHwC,GAAG,OAbN,EACAoC,QAAQ,GAYLpC,GAAG,SAbN,EAEAE,YAAY,GAWTF,GAAG,aAbN,EAGAqC,kBAAkB,GAUfrC,GAAG,mBAbN,EAIAsC,eAAe,GASZtC,GAAG,gBAbN,EAKAuC,eAAe,GAQZvC,GAAG,gBAbN,EAMAwC,WAAW,GAORxC,GAAG,YAbN,EAOAG,OAAO,GAMJH,GAAG,QAbN,EAQA/B,KAAK,GAKF+B,GAAG,MAbN,EASAK,oBAAoB,GAIjBL,GAAG,qBAbN,EAUAM,cAAc,GAGXN,GAAG,eAbN,EAWAO,iBAAiB,GAEdP,GAAG,kBAbN,EAYAzB,gBAAgB,GACbyB,GAAG,iBAbN;AAcKyC,kBAAM,GAAG,KAAKvB,OAAL,CAAalB,GAAb,CAAT;AACA0C,qBAAS,GAAGD,MAAM,GAAG9E,GAArB;AACAD,mBAAO,GAAG,IAAIxB,MAAM,CAACyG,YAAX,EAAV;AACAX,cAAE,GAAG,KAAKC,kBAAL,CAAwBjC,GAAxB,EAA6BtC,OAA7B,CAAL;AACNvB,kBAAM,CAACY,KAAP,CAAa,SAASY,GAAT,GAAe,QAAf,GAA0B+E,SAAvC;AAEM7E,kBAAM,GAA0B;AACrC2D,oBAAM,EAAEhE,MAD6B;AAErCkE,iBAAG,EAAEgB;AAFgC,aAAhC,EAKN;;AACA,gBAAIxC,YAAJ,EAAkBrC,MAAM,CAAC+E,oBAAP,GAA8B1C,YAA9B;AAClB,gBAAImC,kBAAJ,EACCxE,MAAM,CAACgF,0BAAP,GAAoCR,kBAApC;AACD,gBAAIC,eAAJ,EAAqBzE,MAAM,CAACiF,uBAAP,GAAiCR,eAAjC;AACrB,gBAAIC,eAAJ,EAAqB1E,MAAM,CAACkF,uBAAP,GAAiCR,eAAjC;AACrB,gBAAIC,WAAJ,EAAiB3E,MAAM,CAACmF,mBAAP,GAA6BR,WAA7B;;AACjB,gBAAInC,oBAAJ,EAA0B;AACzBxC,oBAAM,CAACwC,oBAAP,GAA8BA,oBAA9B;AACA;;AACD,gBAAIC,cAAJ,EAAoB;AACnBzC,oBAAM,CAACyC,cAAP,GAAwBA,cAAxB;AACA;;AACD,gBAAIC,iBAAJ,EAAuB;AACtB1C,oBAAM,CAAC0C,iBAAP,GAA2BA,iBAA3B;AACA;;kBAEG6B,QAAQ,KAAK,OAAb;AAAA;AAAA;AACGa,4BAAgB,GAAG,IAAIpI,gBAAJ,CAAqBgD,MAArB,CAAnB;;;;;;AAEL,gBAAIU,gBAAJ,EAAsB;AACrB,kBAAI,OAAOA,gBAAP,KAA4B,UAAhC,EAA4C;AAC3Cb,uBAAO,CAACW,EAAR,CAAWjD,4BAAX,EAAyC,oBAAQ;AAChDmD,kCAAgB,CAAC2E,QAAD,CAAhB;AACA,iBAFD;AAGA,eAJD,MAIO;AACN/G,sBAAM,CAACqC,IAAP,CACC,kDACC,OAAOD,gBAFT;AAIA;AACD;;AACgB;AAAA;AAAA,cAAMyD,EAAE,CAACE,IAAH,CAAQe,gBAAR,CAAN;;;AAAXE,oBAAQ,GAAGvC,SAAX;AACNlD,mBAAO,CAAC0F,kBAAR,CAA2BhI,4BAA3B;AACAG,gCAAoB,CACnB0C,KADmB,EAEnB,UAFmB,EAGnB;AAAEqB,oBAAM,EAAE,KAAV;AAAiBC,oBAAM,EAAE;AAAzB,aAHmB,EAInB;AACC8D,sBAAQ,EAAEC,MAAM,CAACH,QAAQ,CAACI,IAAT,CAAc,MAAd,KAAyBJ,QAAQ,CAACI,IAAT,CAAc,QAAd,CAA1B;AADjB,aAJmB,EAOnB,0BAAwB5F,GAPL,CAApB;AASA;AAAA;AAAA,cAAOwF,QAAP;;;;AAEA5H,gCAAoB,CACnB0C,KADmB,EAEnB,UAFmB,EAGnB;AACCqB,oBAAM,EAAE,KADT;AAECC,oBAAM,EAAE;AAFT,aAHmB,EAOnB,IAPmB,EAQnB,0BAAwBiE,OAAK,CAACC,OARX,CAApB;AAUA,kBAAMD,OAAN;;;;;AAKKE,kBAAM,GAAG,IAAIvI,kBAAJ,CAAsBgG,aAAMa,EAAE,CAAC1F,MAAT,CAAtB,CAAT;AACU;AAAA;AAAA,cAAMpB,aAAa,CAAC8G,EAAD,EAAK,IAAInH,gBAAJ,CAAqBgD,MAArB,CAAL,CAAnB;;;AAAV8F,mBAAO,GAAG/C,SAAV;AAEM5C;AACX;AAAA;AAAA,cAAM0F,MAAM,CAACE,OAAP,CAAeD,OAAf,EAAwB;AAC7BE,uBAAS,EAAE1D,OAAO,IAAI9D;AADO,aAAxB,CAAN;;;AADKyH,eAAG,GAAG9F,kBACX4C,SADW,EAAN;AAKNrF,gCAAoB,CACnB0C,KADmB,EAEnB,cAFmB,EAGnB;AAAEqB,oBAAM,EAAE,KAAV;AAAiBC,oBAAM,EAAE;AAAzB,aAHmB,EAInB,IAJmB,EAKnB,iBAAeuE,GALI,CAApB;AAOA;AAAA;AAAA,cAAOA,GAAP;;;;AAEA3H,kBAAM,CAACqC,IAAP,CAAY,sBAAZ,EAAoCuF,OAApC;AACAxI,gCAAoB,CACnB0C,KADmB,EAEnB,cAFmB,EAGnB;AAAEqB,oBAAM,EAAE,KAAV;AAAiBC,oBAAM,EAAE;AAAzB,aAHmB,EAInB,IAJmB,EAKnB,oCAAkC5B,GALf,CAApB;AAOA,kBAAMoG,OAAN;;;;;;;;;AAED,GA1HY;AA4Hb;;;;;;;;;;AAQO/G,gCAAP,UACCW,GADD,EAECqG,MAFD,EAGC1H,MAHD,EAGW;AAEV,QAAM0D,GAAG,GAAG3C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKf,OAAvB,EAAgCD,MAAhC,CAAZ;AACQ;AAAA,QAAQ2B,iBAAR;AAAA,QAAeM,uCAAf;AAAA,QAAiCa,iBAAjC;AAAA,QAAwC6E,yBAAxC;AAEP;AAAA,QACA5B,2CADA;AAAA,QAEAC,qCAFA;AAAA,QAGApC,+BAHA;AAAA,QAIAC,qBAJA;AAAA,QAKA+D,uBALA;AAAA,QAMAC,qBANA;AAAA,QAOAlE,aAPA;AAUA;AAAA,QACAI,+CADA;AAAA,QAEAC,mCAFA;AAAA,QAGAC,yCAHA;AAAA,QAIAC,6BAJA;AAMD,QAAM4D,IAAI,GAAG5B,WAAW,GAAGA,WAAH,GAAiB,qBAAzC;AAEA,QAAM3E,MAAM,GAA0B;AACrC2D,YAAM,EAAEhE,MAD6B;AAErCkE,SAAG,EAAE/D,GAFgC;AAGrC4F,UAAI,EAAES,MAH+B;AAIrCK,iBAAW,EAAED;AAJwB,KAAtC;;AAMA,QAAIlE,YAAJ,EAAkB;AACjBrC,YAAM,CAAC+D,YAAP,GAAsB1B,YAAtB;AACA;;AACD,QAAImC,kBAAJ,EAAwB;AACvBxE,YAAM,CAACyG,kBAAP,GAA4BjC,kBAA5B;AACA;;AACD,QAAIC,eAAJ,EAAqB;AACpBzE,YAAM,CAAC0G,eAAP,GAAyBjC,eAAzB;AACA;;AACD,QAAInC,OAAJ,EAAa;AACZtC,YAAM,CAACgE,OAAP,GAAiB1B,OAAjB;AACA;;AACD,QAAI+D,QAAJ,EAAc;AACbrG,YAAM,CAAC2G,QAAP,GAAkBN,QAAlB;AACA;;AACD,QAAIC,OAAJ,EAAa;AACZtG,YAAM,CAAC4G,OAAP,GAAiBN,OAAjB;AACA;;AACD,QAAI/D,oBAAJ,EAA0B;AACzBvC,YAAM,CAACiE,oBAAP,GAA8B1B,oBAA9B;AACA;;AACD,QAAIC,oBAAJ,EAA0B;AACzBxC,YAAM,CAACwC,oBAAP,GAA8BA,oBAA9B;AACA;;AACD,QAAIC,cAAJ,EAAoB;AACnBzC,YAAM,CAACyC,cAAP,GAAwBA,cAAxB;AACA;;AACD,QAAIC,iBAAJ,EAAuB;AACtB1C,YAAM,CAAC0C,iBAAP,GAA2BA,iBAA3B;AACA;;AACD,QAAIC,WAAJ,EAAiB;AAChB3C,YAAM,CAAC2C,WAAP,GAAqBA,WAArB;AACA;;AAED,QAAM9C,OAAO,GAAG,IAAIxB,MAAM,CAACyG,YAAX,EAAhB;AACA,QAAM+B,QAAQ,GAAG,IAAI5I,0BAAJ,CAA+B+B,MAA/B,EAAuCmC,GAAvC,EAA4CtC,OAA5C,CAAjB;;AAEA,QAAIuC,GAAJ,EAAS;AACRpC,YAAM,CAACkE,GAAP,GAAa9B,GAAb;AACA;;AAED,QAAIgE,SAAS,KAAK,IAAlB,EAAwB;AACvB,UAAM9E,QAAQ,GAAG,KAAK8C,kBAAL,CAAwBjC,GAAxB,CAAjB,CADuB,CAEvB;AACA;;;AACAb,cAAQ,CAACwF,eAAT,CAAyBC,GAAzB,CACCpJ,sBAAsB,CAACwE,GAAD,EAAMrC,GAAN,CADvB,EAEClC,uBAFD;AAIA,UAAMgC,YAAY,GAAiB;AAClCD,cAAM,QAD4B;AAElCG,WAAG,KAF+B;AAGlCwB,gBAAQ,UAH0B;AAIlCvB,YAAI,EAAEoG,MAJ4B;AAKlCtG,eAAO,SAL2B;AAMlCmH,mBAAW,EAAEzF,KANqB;AAOlCvB,cAAM;AAP4B,OAAnC,CARuB,CAiBvB;;AACA,aAAO,KAAKiH,oBAAL,CACNrH,YADM,EAENnB,MAFM,CAAP;AAIA;;AAED,QAAI;AACH,UAAIiC,gBAAJ,EAAsB;AACrB,YAAI,OAAOA,gBAAP,KAA4B,UAAhC,EAA4C;AAC3Cb,iBAAO,CAACW,EAAR,CAAWhD,0BAAX,EAAuC,oBAAQ;AAC9CkD,4BAAgB,CAAC2E,QAAD,CAAhB;AACA,WAFD;AAGA,SAJD,MAIO;AACN/G,gBAAM,CAACqC,IAAP,CACC,kDACC,OAAOD,gBAFT;AAIA;AACD;;AAED,aAAOmG,QAAQ,CAACK,MAAT,GAAkBjG,IAAlB,CAAuB,oBAAQ;AACrC3C,cAAM,CAACY,KAAP,CAAa,eAAb,EAA8BoG,QAA9B;AACA5H,4BAAoB,CACnB0C,KADmB,EAEnB,QAFmB,EAGnB;AAAEqB,gBAAM,EAAE,KAAV;AAAiBC,gBAAM,EAAE;AAAzB,SAHmB,EAInB,IAJmB,EAKnB,wBAAsB5B,GALH,CAApB;AAOA,eAAO;AAAEA,aAAG;AAAL,SAAP;AACA,OAVM,CAAP;AAWA,KAzBD,CAyBE,OAAOqH,KAAP,EAAc;AACf7I,YAAM,CAACqC,IAAP,CAAY,iBAAZ,EAA+BwG,KAA/B;AACAzJ,0BAAoB,CACnB0C,KADmB,EAEnB,QAFmB,EAGnB;AAAEqB,cAAM,EAAE,KAAV;AAAiBC,cAAM,EAAE;AAAzB,OAHmB,EAInB,IAJmB,EAKnB,qBAAmB5B,GALA,CAApB;AAOA,YAAMqH,KAAN;AACA;AACD,GArIM;AAuIP;;;;;;;;AAMahI,mCAAb,UACCW,GADD,EAECrB,MAFD,EAEgC;;;;;;AAET;AAAA;AAAA,cAAM,KAAKqD,kBAAL,EAAN;;;AAAhBC,yBAAa,GAAG5B,SAAhB;;AACN,gBAAI,CAAC4B,aAAD,IAAkB,CAAC,KAAKE,kBAAL,CAAwB,KAAKvD,OAA7B,CAAvB,EAA8D;AAC7D,oBAAM,IAAI4B,KAAJ,CAAU7C,mBAAmB,CAACyE,cAA9B,CAAN;AACA;;AACKC,eAAG,GAAG3C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKf,OAAvB,EAAgCD,MAAhC,CAAN;AACEkB,kBAAM,GAAYwC,GAAG,OAArB,EAAQ/B,KAAK,GAAK+B,GAAG,MAArB;AAEFyC,kBAAM,GAAG,KAAKvB,OAAL,CAAalB,GAAb,CAAT;AACA0C,qBAAS,GAAGD,MAAM,GAAG9E,GAArB;AACAqE,cAAE,GAAG,KAAKC,kBAAL,CAAwBjC,GAAxB,CAAL;AACN7D,kBAAM,CAACY,KAAP,CAAa,YAAYY,GAAZ,GAAkB,QAAlB,GAA6B+E,SAA1C;AAEM7E,kBAAM,GAA6B;AACxC2D,oBAAM,EAAEhE,MADgC;AAExCkE,iBAAG,EAAEgB;AAFmC,aAAnC;AAKAuC,+BAAmB,GAAG,IAAInK,mBAAJ,CAAwB+C,MAAxB,CAAtB;;;;;;AAGY;AAAA;AAAA,cAAMmE,EAAE,CAACE,IAAH,CAAQ+C,mBAAR,CAAN;;;AAAX9B,oBAAQ,GAAGnF,SAAX;AACNzC,gCAAoB,CACnB0C,KADmB,EAEnB,QAFmB,EAGnB;AAAEqB,oBAAM,EAAE,QAAV;AAAoBC,oBAAM,EAAE;AAA5B,aAHmB,EAInB,IAJmB,EAKnB,aAAW5B,GAAX,GAAc,eALK,CAApB;AAOA;AAAA;AAAA,cAAOwF,QAAP;;;;AAEA5H,gCAAoB,CACnB0C,KADmB,EAEnB,QAFmB,EAGnB;AAAEqB,oBAAM,EAAE,QAAV;AAAoBC,oBAAM,EAAE;AAA5B,aAHmB,EAInB,IAJmB,EAKnB,iBAAe5B,GAAf,GAAkB,eAAlB,GAAkCuH,OALf,CAApB;AAOA,kBAAMA,OAAN;;;;;;;;;AAED,GA3CY;AA6Cb;;;;;;;;;AAOalI,iCAAb,UACCmI,IADD,EAEC7I,MAFD,EAE8B;;;;;;AAEP;AAAA;AAAA,cAAM,KAAKqD,kBAAL,EAAN;;;AAAhBC,yBAAa,GAAG5B,SAAhB;;AACN,gBAAI,CAAC4B,aAAD,IAAkB,CAAC,KAAKE,kBAAL,CAAwB,KAAKvD,OAA7B,CAAvB,EAA8D;AAC7D,oBAAM,IAAI4B,KAAJ,CAAU7C,mBAAmB,CAACyE,cAA9B,CAAN;AACA;;AACKC,eAAG,GAAG3C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKf,OAAvB,EAAgCD,MAAhC,CAAN;AACEkB,kBAAM,GAAqBwC,GAAG,OAA9B,EAAQ/B,KAAK,GAAc+B,GAAG,MAA9B,EAAeoF,OAAO,GAAKpF,GAAG,QAA9B;AAEFyC,kBAAM,GAAG,KAAKvB,OAAL,CAAalB,GAAb,CAAT;AACAqF,sBAAU,GAAG5C,MAAM,GAAG0C,IAAtB;AACAnD,cAAE,GAAG,KAAKC,kBAAL,CAAwBjC,GAAxB,CAAL;AACN7D,kBAAM,CAACY,KAAP,CAAa,UAAUoI,IAAV,GAAiB,QAAjB,GAA4BE,UAAzC;AAEMxH,kBAAM,GAAG;AACd2D,oBAAM,EAAEhE,MADM;AAEd8H,oBAAM,EAAED,UAFM;AAGdE,qBAAO,EAAEH;AAHK,aAAT;AAMAI,8BAAkB,GAAG,IAAIzK,kBAAJ,CAAuB8C,MAAvB,CAArB;;;;;;AAGY;AAAA;AAAA,cAAMmE,EAAE,CAACE,IAAH,CAAQsD,kBAAR,CAAN;;;AAAXrC,oBAAQ,GAAGnF,SAAX;AACFyH,gBAAI,GAAyB,EAA7B;;AACJ,gBAAItC,QAAQ,IAAIA,QAAQ,CAACuC,QAAzB,EAAmC;AAClCD,kBAAI,GAAGtC,QAAQ,CAACuC,QAAT,CAAkBC,GAAlB,CAAsB,gBAAI;AAChC,uBAAO;AACNhI,qBAAG,EAAEiI,IAAI,CAAClE,GAAL,CAASmE,MAAT,CAAgBpD,MAAM,CAACqD,MAAvB,CADC;AAENC,sBAAI,EAAEH,IAAI,CAACI,IAFL;AAGNC,8BAAY,EAAEL,IAAI,CAACM,YAHb;AAINC,sBAAI,EAAEP,IAAI,CAACQ;AAJL,iBAAP;AAMA,eAPM,CAAP;AAQA;;AACD7K,gCAAoB,CACnB0C,KADmB,EAEnB,MAFmB,EAGnB;AAAEqB,oBAAM,EAAE,MAAV;AAAkBC,oBAAM,EAAE;AAA1B,aAHmB,EAInB,IAJmB,EAKhBkG,IAAI,CAACK,MAAL,GAAW,qCALK,CAApB;AAOA3J,kBAAM,CAACY,KAAP,CAAa,MAAb,EAAqB0I,IAArB;AACA;AAAA;AAAA,cAAOA,IAAP;;;;AAEAtJ,kBAAM,CAACqC,IAAP,CAAY,YAAZ,EAA0B6H,OAA1B;AACA9K,gCAAoB,CACnB0C,KADmB,EAEnB,MAFmB,EAGnB;AAAEqB,oBAAM,EAAE,MAAV;AAAkBC,oBAAM,EAAE;AAA1B,aAHmB,EAInB,IAJmB,EAKnB,2BAAyB8G,OAAK,CAAC5C,OALZ,CAApB;AAOA,kBAAM4C,OAAN;;;;;;;;;AAED,GAzDY;;AA2DCrJ,+CAAd;;;;;;;;AAEsB;AAAA;AAAA,cAAMvC,WAAW,CAACoE,GAAZ,EAAN;;;AAAdE,uBAAW,GAAGf,SAAd;AACN,gBAAI,CAACe,WAAL,EAAkB;AAAA;AAAA,cAAO,KAAP;AACZC,gBAAI,GAAGvE,WAAW,CAACwE,KAAZ,CAAkBF,WAAlB,CAAP;AACN5C,kBAAM,CAACY,KAAP,CAAa,6BAAb,EAA4CiC,IAA5C;AACA,iBAAKzC,OAAL,CAAawC,WAAb,GAA2BC,IAA3B;AAEA;AAAA;AAAA,cAAO,IAAP;;;;AAEA7C,kBAAM,CAACqC,IAAP,CAAY,0BAAZ,EAAwC8H,OAAxC;AACA;AAAA;AAAA,cAAO,KAAP;;;;;;;;;AAED,GAba;;AAeNtJ,+CAAR,UACCV,MADD,EACuB;AAEtB,WAAO,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACiK,cAAP,CAAsB,aAAtB,CAArC;AACA,GAJO;;AAMAvJ,oCAAR,UAAgBV,MAAhB,EAKC;AACQ;AAAA,QAAa8C,oBAAb;AAER,QAAMoH,YAAY,GAAGlK,MAAM,CAACkK,YAAP,IAAuB,EAA5C;AACA,QAAMpF,UAAU,GAAG9E,MAAM,CAAC8E,UAAP,IAAqBrC,WAAW,CAACqC,UAApD;AACA,QAAMqF,WAAW,GAChB,CAACD,YAAY,CAACE,OAAb,KAAyBC,SAAzB,GAAqCH,YAAY,CAACE,OAAlD,GAA4D,UAA7D,IACAtF,UADA,GAEA,GAHD;AAIA,QAAMwF,aAAa,GAClB,CAACJ,YAAY,CAACK,SAAb,KAA2BF,SAA3B,GACEH,YAAY,CAACK,SADf,GAEE,YAFH,IAGAzF,UAHA,GAIA,GALD;AAMA,QAAM0F,UAAU,GACfN,YAAY,CAACO,MAAb,KAAwBJ,SAAxB,GAAoCH,YAAY,CAACO,MAAjD,GAA0D,SAD3D;;AAGA,YAAQ3H,KAAR;AACC,WAAK,SAAL;AACC,eAAOqH,WAAP;;AACD,WAAK,WAAL;AACC,eAAOG,aAAP;;AACD;AACC,eAAOE,UAAP;AANF;AAQA,GA/BO;AAiCR;;;;;AAGQ9J,+CAAR,UACCV,MADD,EAOCoB,OAPD,EAO8B;AAE7B,QAAMsJ,QAAQ,GAAGnL,cAAc,CAACS,MAAD,EAASoB,OAAT,CAA/B;AACAsJ,YAAQ,CAACrC,eAAT,CAAyBC,GAAzB,CACCjJ,6BAA6B,CAACqL,QAAQ,CAAC1K,MAAV,CAD9B,EAECV,oCAFD;AAIA,WAAOoL,QAAP;AACA,GAfO;;AAtsBQhK,2BAAW,SAAX;AACAA,gCAAgB,OAAhB;AAqtBjB;AAvtBA;;SAAaA;AAytBb;;;;AAGA,eAAeA,aAAf","names":["ConsoleLogger","Logger","Credentials","Parser","StorageHelper","Hub","GetObjectCommand","DeleteObjectCommand","ListObjectsCommand","CopyObjectCommand","formatUrl","createRequest","S3RequestPresigner","SEND_DOWNLOAD_PROGRESS_EVENT","SEND_UPLOAD_PROGRESS_EVENT","StorageErrorStrings","dispatchStorageEvent","createPrefixMiddleware","prefixMiddlewareOptions","getPrefix","autoAdjustClockskewMiddleware","autoAdjustClockskewMiddlewareOptions","createS3Client","AWSS3ProviderManagedUpload","AWSS3UploadTask","TaskEvents","UPLOADS_STORAGE_KEY","events","logger","DEFAULT_STORAGE_LEVEL","DEFAULT_PRESIGN_EXPIRATION","config","_config","_storage","getStorage","listen","payload","event","_this","removeItem","debug","AWSS3Provider","CATEGORY","PROVIDER_NAME","amplifyConfig","parseMobilehubConfig","Object","assign","Storage","bucket","addTaskInput","emitter","key","file","params","completeCallback","errorCallback","_a","track","Blob","Error","INVALID_BLOB","on","UPLOAD_PROGRESS","progressCallback","warn","UPLOAD_COMPLETE","ERROR","err","prefixPromise","get","then","credentials","cred","shear","task","s3Client","level","storage","method","result","resume","src","dest","_ensureCredentials","credentialsOK","_c","_isWithCredentials","NO_CREDENTIALS","opt","acl","cacheControl","expires","serverSideEncryption","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","SSEKMSKeyId","srcLevel","srcIdentityId","srcKey","_b","destLevel","destKey","NO_SRC_KEY","NO_DEST_KEY","srcPrefix","_prefix","__assign","identityId","destPrefix","finalSrcKey","finalDestKey","Bucket","CopySource","Key","MetadataDirective","CacheControl","Expires","ServerSideEncryption","ACL","s3","_createNewS3Client","send","error_1","download","contentDisposition","contentEncoding","contentLanguage","contentType","prefix","final_key","EventEmitter","ResponseCacheControl","ResponseContentDisposition","ResponseContentEncoding","ResponseContentLanguage","ResponseContentType","getObjectCommand","progress","response","removeAllListeners","fileSize","Number","Body","error_2","message","signer","request","presign","expiresIn","url","error_3","object","resumable","metadata","tagging","type","ContentType","ContentDisposition","ContentEncoding","Metadata","Tagging","uploader","middlewareStack","add","accessLevel","startResumableUpload","upload","error","deleteObjectCommand","error_4","path","maxKeys","final_path","Prefix","MaxKeys","listObjectsCommand","list","Contents","map","item","substr","length","eTag","ETag","lastModified","LastModified","size","Size","error_5","error_6","hasOwnProperty","customPrefix","privatePath","private","undefined","protectedPath","protected","publicPath","public","s3client"],"sources":["/Users/richards/node_modules/@aws-amplify/storage/src/providers/AWSS3Provider.ts"],"sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tParser,\n\tICredentials,\n\tStorageHelper,\n\tHub,\n} from '@aws-amplify/core';\nimport {\n\tS3Client,\n\tGetObjectCommand,\n\tDeleteObjectCommand,\n\tListObjectsCommand,\n\tGetObjectCommandOutput,\n\tDeleteObjectCommandInput,\n\tCopyObjectCommandInput,\n\tCopyObjectCommand,\n\tPutObjectCommandInput,\n\tGetObjectCommandInput,\n} from '@aws-sdk/client-s3';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport { createRequest } from '@aws-sdk/util-create-request';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport {\n\tSEND_DOWNLOAD_PROGRESS_EVENT,\n\tSEND_UPLOAD_PROGRESS_EVENT,\n} from './axios-http-handler';\nimport {\n\tStorageOptions,\n\tStorageProvider,\n\tS3ProviderGetConfig,\n\tS3ProviderGetOuput,\n\tS3ProviderPutConfig,\n\tS3ProviderRemoveConfig,\n\tS3ProviderListOutput,\n\tS3ProviderListConfig,\n\tS3ProviderCopyConfig,\n\tS3ProviderCopyOutput,\n\tS3CopySource,\n\tS3CopyDestination,\n\tStorageAccessLevel,\n\tCustomPrefix,\n\tS3ProviderRemoveOutput,\n\tS3ProviderPutOutput,\n\tResumableUploadConfig,\n\tUploadTask,\n} from '../types';\nimport { StorageErrorStrings } from '../common/StorageErrorStrings';\nimport { dispatchStorageEvent } from '../common/StorageUtils';\nimport {\n\tcreatePrefixMiddleware,\n\tprefixMiddlewareOptions,\n\tgetPrefix,\n\tautoAdjustClockskewMiddleware,\n\tautoAdjustClockskewMiddlewareOptions,\n\tcreateS3Client,\n} from '../common/S3ClientUtils';\nimport { AWSS3ProviderManagedUpload } from './AWSS3ProviderManagedUpload';\nimport { AWSS3UploadTask, TaskEvents } from './AWSS3UploadTask';\nimport { UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nimport * as events from 'events';\nimport { CancelTokenSource } from 'axios';\n\nconst logger = new Logger('AWSS3Provider');\n\nconst DEFAULT_STORAGE_LEVEL = 'public';\nconst DEFAULT_PRESIGN_EXPIRATION = 900;\n\ninterface AddTaskInput {\n\taccessLevel: StorageAccessLevel;\n\tfile: Blob;\n\tbucket: string;\n\temitter: events.EventEmitter;\n\tkey: string;\n\ts3Client: S3Client;\n\tparams?: PutObjectCommandInput;\n}\n\n/**\n * Provide storage methods to use AWS S3\n */\nexport class AWSS3Provider implements StorageProvider {\n\tstatic readonly CATEGORY = 'Storage';\n\tstatic readonly PROVIDER_NAME = 'AWSS3';\n\tprivate _config: StorageOptions;\n\tprivate _storage: Storage;\n\n\t/**\n\t * Initialize Storage with AWS configurations\n\t * @param {Object} config - Configuration object for storage\n\t */\n\tconstructor(config?: StorageOptions) {\n\t\tthis._config = config ? config : {};\n\t\tthis._storage = new StorageHelper().getStorage();\n\t\tHub.listen('auth', data => {\n\t\t\tconst { payload } = data;\n\t\t\tif (payload.event === 'signOut' || payload.event === 'signIn') {\n\t\t\t\tthis._storage.removeItem(UPLOADS_STORAGE_KEY);\n\t\t\t}\n\t\t});\n\t\tlogger.debug('Storage Options', this._config);\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tpublic getCategory(): string {\n\t\treturn AWSS3Provider.CATEGORY;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tgetProviderName(): 'AWSS3' {\n\t\treturn AWSS3Provider.PROVIDER_NAME;\n\t}\n\n\t/**\n\t * Configure Storage part with aws configuration\n\t * @param {Object} config - Configuration of the Storage\n\t * @return {Object} - Current configuration\n\t */\n\tpublic configure(config?): object {\n\t\tlogger.debug('configure Storage', config);\n\t\tif (!config) return this._config;\n\t\tconst amplifyConfig = Parser.parseMobilehubConfig(config);\n\t\tthis._config = Object.assign({}, this._config, amplifyConfig.Storage);\n\t\tif (!this._config.bucket) {\n\t\t\tlogger.debug('Do not have bucket yet');\n\t\t}\n\t\treturn this._config;\n\t}\n\n\tprivate startResumableUpload(\n\t\taddTaskInput: AddTaskInput,\n\t\tconfig: S3ProviderPutConfig & ResumableUploadConfig\n\t): UploadTask {\n\t\tconst { s3Client, emitter, key, file, params } = addTaskInput;\n\t\tconst {\n\t\t\tprogressCallback,\n\t\t\tcompleteCallback,\n\t\t\terrorCallback,\n\t\t\ttrack = false,\n\t\t} = config;\n\t\tif (!(file instanceof Blob)) {\n\t\t\tthrow new Error(StorageErrorStrings.INVALID_BLOB);\n\t\t}\n\n\t\temitter.on(TaskEvents.UPLOAD_PROGRESS, event => {\n\t\t\tif (progressCallback) {\n\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\tprogressCallback(event);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\temitter.on(TaskEvents.UPLOAD_COMPLETE, event => {\n\t\t\tif (completeCallback) {\n\t\t\t\tif (typeof completeCallback === 'function') {\n\t\t\t\t\tcompleteCallback(event);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'completeCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof completeCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\temitter.on(TaskEvents.ERROR, err => {\n\t\t\tif (errorCallback) {\n\t\t\t\tif (typeof errorCallback === 'function') {\n\t\t\t\t\terrorCallback(err);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'errorCallback should be a function, not a ' + typeof errorCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// we want to keep this function sync so we defer this promise to AWSS3UploadTask to resolve when it's needed\n\t\t// when its doing a final check with _listSingleFile function\n\t\tconst prefixPromise: Promise<string> = Credentials.get().then(\n\t\t\t(credentials: any) => {\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\treturn getPrefix({\n\t\t\t\t\t...config,\n\t\t\t\t\tcredentials: cred,\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\n\t\tconst task = new AWSS3UploadTask({\n\t\t\ts3Client,\n\t\t\tfile,\n\t\t\temitter,\n\t\t\tlevel: config.level,\n\t\t\tstorage: this._storage,\n\t\t\tparams,\n\t\t\tprefixPromise,\n\t\t});\n\n\t\tdispatchStorageEvent(\n\t\t\ttrack,\n\t\t\t'upload',\n\t\t\t{ method: 'put', result: 'success' },\n\t\t\tnull,\n\t\t\t`Upload Task created successfully for ${key}`\n\t\t);\n\n\t\t// automatically start the upload task\n\t\ttask.resume();\n\n\t\treturn task;\n\t}\n\n\t/**\n\t * Copy an object from a source object to a new object within the same bucket. Can optionally copy files across\n\t * different level or identityId (if source object's level is 'protected').\n\t *\n\t * @async\n\t * @param {S3CopySource} src - Key and optionally access level and identityId of the source object.\n\t * @param {S3CopyDestination} dest - Key and optionally access level of the destination object.\n\t * @param {S3ProviderCopyConfig} [config] - Optional configuration for s3 commands.\n\t * @return {Promise<S3ProviderCopyOutput>} The key of the copied object.\n\t */\n\tpublic async copy(\n\t\tsrc: S3CopySource,\n\t\tdest: S3CopyDestination,\n\t\tconfig?: S3ProviderCopyConfig\n\t): Promise<S3ProviderCopyOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst {\n\t\t\tacl,\n\t\t\tbucket,\n\t\t\tcacheControl,\n\t\t\texpires,\n\t\t\ttrack,\n\t\t\tserverSideEncryption,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tSSEKMSKeyId,\n\t\t} = opt;\n\t\tconst {\n\t\t\tlevel: srcLevel = DEFAULT_STORAGE_LEVEL,\n\t\t\tidentityId: srcIdentityId,\n\t\t\tkey: srcKey,\n\t\t} = src;\n\t\tconst { level: destLevel = DEFAULT_STORAGE_LEVEL, key: destKey } = dest;\n\t\tif (!srcKey || typeof srcKey !== 'string') {\n\t\t\tthrow new Error(StorageErrorStrings.NO_SRC_KEY);\n\t\t}\n\t\tif (!destKey || typeof destKey !== 'string') {\n\t\t\tthrow new Error(StorageErrorStrings.NO_DEST_KEY);\n\t\t}\n\t\tif (srcLevel !== 'protected' && srcIdentityId) {\n\t\t\tlogger.warn(\n\t\t\t\t`You may copy files from another user if the source level is \"protected\", currently it's ${srcLevel}`\n\t\t\t);\n\t\t}\n\t\tconst srcPrefix = this._prefix({\n\t\t\t...opt,\n\t\t\tlevel: srcLevel,\n\t\t\t...(srcIdentityId && { identityId: srcIdentityId }),\n\t\t});\n\t\tconst destPrefix = this._prefix({ ...opt, level: destLevel });\n\t\tconst finalSrcKey = `${bucket}/${srcPrefix}${srcKey}`;\n\t\tconst finalDestKey = `${destPrefix}${destKey}`;\n\t\tlogger.debug(`copying ${finalSrcKey} to ${finalDestKey}`);\n\n\t\tconst params: CopyObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tCopySource: finalSrcKey,\n\t\t\tKey: finalDestKey,\n\t\t\t// Copies over metadata like contentType as well\n\t\t\tMetadataDirective: 'COPY',\n\t\t};\n\n\t\tif (cacheControl) params.CacheControl = cacheControl;\n\t\tif (expires) params.Expires = expires;\n\t\tif (serverSideEncryption) {\n\t\t\tparams.ServerSideEncryption = serverSideEncryption;\n\t\t}\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\t\tif (SSEKMSKeyId) {\n\t\t\tparams.SSEKMSKeyId = SSEKMSKeyId;\n\t\t}\n\t\tif (acl) params.ACL = acl;\n\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\ttry {\n\t\t\tawait s3.send(new CopyObjectCommand(params));\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'copy',\n\t\t\t\t{\n\t\t\t\t\tmethod: 'copy',\n\t\t\t\t\tresult: 'success',\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t`Copy success from ${srcKey} to ${destKey}`\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tkey: destKey,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'copy',\n\t\t\t\t{\n\t\t\t\t\tmethod: 'copy',\n\t\t\t\t\tresult: 'failed',\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t`Copy failed from ${srcKey} to ${destKey}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Get a presigned URL of the file or the object data when download:true\n\t *\n\t * @param {string} key - key of the object\n\t * @param {S3ProviderGetConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<string | GetObjectCommandOutput>} - A promise resolves to Amazon S3 presigned URL or the\n\t * GetObjectCommandOutput if download is set to true on success\n\t */\n\tpublic async get<T extends S3ProviderGetConfig & StorageOptions>(\n\t\tkey: string,\n\t\tconfig?: T\n\t): Promise<S3ProviderGetOuput<T>>;\n\tpublic async get(\n\t\tkey: string,\n\t\tconfig?: S3ProviderGetConfig\n\t): Promise<string | GetObjectCommandOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst {\n\t\t\tbucket,\n\t\t\tdownload,\n\t\t\tcacheControl,\n\t\t\tcontentDisposition,\n\t\t\tcontentEncoding,\n\t\t\tcontentLanguage,\n\t\t\tcontentType,\n\t\t\texpires,\n\t\t\ttrack,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tprogressCallback,\n\t\t} = opt;\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst emitter = new events.EventEmitter();\n\t\tconst s3 = this._createNewS3Client(opt, emitter);\n\t\tlogger.debug('get ' + key + ' from ' + final_key);\n\n\t\tconst params: GetObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t};\n\n\t\t// See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property\n\t\tif (cacheControl) params.ResponseCacheControl = cacheControl;\n\t\tif (contentDisposition)\n\t\t\tparams.ResponseContentDisposition = contentDisposition;\n\t\tif (contentEncoding) params.ResponseContentEncoding = contentEncoding;\n\t\tif (contentLanguage) params.ResponseContentLanguage = contentLanguage;\n\t\tif (contentType) params.ResponseContentType = contentType;\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\n\t\tif (download === true) {\n\t\t\tconst getObjectCommand = new GetObjectCommand(params);\n\t\t\ttry {\n\t\t\t\tif (progressCallback) {\n\t\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\t\temitter.on(SEND_DOWNLOAD_PROGRESS_EVENT, progress => {\n\t\t\t\t\t\t\tprogressCallback(progress);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst response = await s3.send(getObjectCommand);\n\t\t\t\temitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'download',\n\t\t\t\t\t{ method: 'get', result: 'success' },\n\t\t\t\t\t{\n\t\t\t\t\t\tfileSize: Number(response.Body['size'] || response.Body['length']),\n\t\t\t\t\t},\n\t\t\t\t\t`Download success for ${key}`\n\t\t\t\t);\n\t\t\t\treturn response;\n\t\t\t} catch (error) {\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'download',\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: 'get',\n\t\t\t\t\t\tresult: 'failed',\n\t\t\t\t\t},\n\t\t\t\t\tnull,\n\t\t\t\t\t`Download failed with ${error.message}`\n\t\t\t\t);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst signer = new S3RequestPresigner({ ...s3.config });\n\t\t\tconst request = await createRequest(s3, new GetObjectCommand(params));\n\t\t\t// Default is 15 mins as defined in V2 AWS SDK\n\t\t\tconst url = formatUrl(\n\t\t\t\tawait signer.presign(request, {\n\t\t\t\t\texpiresIn: expires || DEFAULT_PRESIGN_EXPIRATION,\n\t\t\t\t})\n\t\t\t);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'getSignedUrl',\n\t\t\t\t{ method: 'get', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`Signed URL: ${url}`\n\t\t\t);\n\t\t\treturn url;\n\t\t} catch (error) {\n\t\t\tlogger.warn('get signed url error', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'getSignedUrl',\n\t\t\t\t{ method: 'get', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Could not get a signed URL for ${key}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Put a file in S3 bucket specified to configure method\n\t * @param key - key of the object\n\t * @param object - File to be put in Amazon S3 bucket\n\t * @param [config] - Optional configuration for the underlying S3 command\n\t * @return an instance of AWSS3UploadTask or a promise that resolves to an object with the new object's key on\n\t * success.\n\t */\n\tpublic put<T extends S3ProviderPutConfig>(\n\t\tkey: string,\n\t\tobject: PutObjectCommandInput['Body'],\n\t\tconfig?: T\n\t): S3ProviderPutOutput<T> {\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track, progressCallback, level, resumable } = opt;\n\t\tconst {\n\t\t\tcontentType,\n\t\t\tcontentDisposition,\n\t\t\tcontentEncoding,\n\t\t\tcacheControl,\n\t\t\texpires,\n\t\t\tmetadata,\n\t\t\ttagging,\n\t\t\tacl,\n\t\t} = opt;\n\t\tconst {\n\t\t\tserverSideEncryption,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tSSEKMSKeyId,\n\t\t} = opt;\n\t\tconst type = contentType ? contentType : 'binary/octet-stream';\n\n\t\tconst params: PutObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: key,\n\t\t\tBody: object,\n\t\t\tContentType: type,\n\t\t};\n\t\tif (cacheControl) {\n\t\t\tparams.CacheControl = cacheControl;\n\t\t}\n\t\tif (contentDisposition) {\n\t\t\tparams.ContentDisposition = contentDisposition;\n\t\t}\n\t\tif (contentEncoding) {\n\t\t\tparams.ContentEncoding = contentEncoding;\n\t\t}\n\t\tif (expires) {\n\t\t\tparams.Expires = expires;\n\t\t}\n\t\tif (metadata) {\n\t\t\tparams.Metadata = metadata;\n\t\t}\n\t\tif (tagging) {\n\t\t\tparams.Tagging = tagging;\n\t\t}\n\t\tif (serverSideEncryption) {\n\t\t\tparams.ServerSideEncryption = serverSideEncryption;\n\t\t}\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\t\tif (SSEKMSKeyId) {\n\t\t\tparams.SSEKMSKeyId = SSEKMSKeyId;\n\t\t}\n\n\t\tconst emitter = new events.EventEmitter();\n\t\tconst uploader = new AWSS3ProviderManagedUpload(params, opt, emitter);\n\n\t\tif (acl) {\n\t\t\tparams.ACL = acl;\n\t\t}\n\n\t\tif (resumable === true) {\n\t\t\tconst s3Client = this._createNewS3Client(opt);\n\t\t\t// we are using aws sdk middleware to inject the prefix to key, this way we don't have to call\n\t\t\t// this._ensureCredentials() which allows us to make this function sync so we can return non-Promise like UploadTask\n\t\t\ts3Client.middlewareStack.add(\n\t\t\t\tcreatePrefixMiddleware(opt, key),\n\t\t\t\tprefixMiddlewareOptions\n\t\t\t);\n\t\t\tconst addTaskInput: AddTaskInput = {\n\t\t\t\tbucket,\n\t\t\t\tkey,\n\t\t\t\ts3Client,\n\t\t\t\tfile: object as Blob,\n\t\t\t\temitter,\n\t\t\t\taccessLevel: level,\n\t\t\t\tparams,\n\t\t\t};\n\t\t\t// explicitly asserting the type here as Typescript could not infer that resumable is of type true\n\t\t\treturn this.startResumableUpload(\n\t\t\t\taddTaskInput,\n\t\t\t\tconfig as typeof config & { resumable: true }\n\t\t\t) as S3ProviderPutOutput<T>;\n\t\t}\n\n\t\ttry {\n\t\t\tif (progressCallback) {\n\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\temitter.on(SEND_UPLOAD_PROGRESS_EVENT, progress => {\n\t\t\t\t\t\tprogressCallback(progress);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uploader.upload().then(response => {\n\t\t\t\tlogger.debug('upload result', response);\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'upload',\n\t\t\t\t\t{ method: 'put', result: 'success' },\n\t\t\t\t\tnull,\n\t\t\t\t\t`Upload success for ${key}`\n\t\t\t\t);\n\t\t\t\treturn { key };\n\t\t\t}) as S3ProviderPutOutput<T>;\n\t\t} catch (error) {\n\t\t\tlogger.warn('error uploading', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'upload',\n\t\t\t\t{ method: 'put', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Error uploading ${key}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Remove the object for specified key\n\t * @param {string} key - key of the object\n\t * @param {S3ProviderRemoveConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<S3ProviderRemoveOutput>} - Promise resolves upon successful removal of the object\n\t */\n\tpublic async remove(\n\t\tkey: string,\n\t\tconfig?: S3ProviderRemoveConfig\n\t): Promise<S3ProviderRemoveOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track } = opt;\n\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\tlogger.debug('remove ' + key + ' from ' + final_key);\n\n\t\tconst params: DeleteObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t};\n\n\t\tconst deleteObjectCommand = new DeleteObjectCommand(params);\n\n\t\ttry {\n\t\t\tconst response = await s3.send(deleteObjectCommand);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'delete',\n\t\t\t\t{ method: 'remove', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`Deleted ${key} successfully`\n\t\t\t);\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'delete',\n\t\t\t\t{ method: 'remove', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Deletion of ${key} failed with ${error}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * List bucket objects relative to the level and prefix specified\n\t * @param {string} path - the path that contains objects\n\t * @param {S3ProviderListConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<S3ProviderListOutput>} - Promise resolves to list of keys, eTags, lastModified and file size for\n\t * all objects in path\n\t */\n\tpublic async list(\n\t\tpath: string,\n\t\tconfig?: S3ProviderListConfig\n\t): Promise<S3ProviderListOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track, maxKeys } = opt;\n\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_path = prefix + path;\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\tlogger.debug('list ' + path + ' from ' + final_path);\n\n\t\tconst params = {\n\t\t\tBucket: bucket,\n\t\t\tPrefix: final_path,\n\t\t\tMaxKeys: maxKeys,\n\t\t};\n\n\t\tconst listObjectsCommand = new ListObjectsCommand(params);\n\n\t\ttry {\n\t\t\tconst response = await s3.send(listObjectsCommand);\n\t\t\tlet list: S3ProviderListOutput = [];\n\t\t\tif (response && response.Contents) {\n\t\t\t\tlist = response.Contents.map(item => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkey: item.Key.substr(prefix.length),\n\t\t\t\t\t\teTag: item.ETag,\n\t\t\t\t\t\tlastModified: item.LastModified,\n\t\t\t\t\t\tsize: item.Size,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'list',\n\t\t\t\t{ method: 'list', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`${list.length} items returned from list operation`\n\t\t\t);\n\t\t\tlogger.debug('list', list);\n\t\t\treturn list;\n\t\t} catch (error) {\n\t\t\tlogger.warn('list error', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'list',\n\t\t\t\t{ method: 'list', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Listing items failed: ${error.message}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async _ensureCredentials(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return false;\n\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\tlogger.debug('set credentials for storage', cred);\n\t\t\tthis._config.credentials = cred;\n\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tlogger.warn('ensure credentials error', error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _isWithCredentials(\n\t\tconfig: StorageOptions\n\t): config is StorageOptions & { credentials: ICredentials } {\n\t\treturn typeof config === 'object' && config.hasOwnProperty('credentials');\n\t}\n\n\tprivate _prefix(config: {\n\t\tcredentials: ICredentials;\n\t\tlevel?: StorageAccessLevel;\n\t\tcustomPrefix?: CustomPrefix;\n\t\tidentityId?: string;\n\t}): string {\n\t\tconst { credentials, level } = config;\n\n\t\tconst customPrefix = config.customPrefix || {};\n\t\tconst identityId = config.identityId || credentials.identityId;\n\t\tconst privatePath =\n\t\t\t(customPrefix.private !== undefined ? customPrefix.private : 'private/') +\n\t\t\tidentityId +\n\t\t\t'/';\n\t\tconst protectedPath =\n\t\t\t(customPrefix.protected !== undefined\n\t\t\t\t? customPrefix.protected\n\t\t\t\t: 'protected/') +\n\t\t\tidentityId +\n\t\t\t'/';\n\t\tconst publicPath =\n\t\t\tcustomPrefix.public !== undefined ? customPrefix.public : 'public/';\n\n\t\tswitch (level) {\n\t\t\tcase 'private':\n\t\t\t\treturn privatePath;\n\t\t\tcase 'protected':\n\t\t\t\treturn protectedPath;\n\t\t\tdefault:\n\t\t\t\treturn publicPath;\n\t\t}\n\t}\n\n\t/**\n\t * Creates an S3 client with new V3 aws sdk\n\t */\n\tprivate _createNewS3Client(\n\t\tconfig: {\n\t\t\tregion?: string;\n\t\t\tcancelTokenSource?: CancelTokenSource;\n\t\t\tdangerouslyConnectToHttpEndpointForTesting?: boolean;\n\t\t\tuseAccelerateEndpoint?: boolean;\n\t\t},\n\t\temitter?: events.EventEmitter\n\t): S3Client {\n\t\tconst s3client = createS3Client(config, emitter);\n\t\ts3client.middlewareStack.add(\n\t\t\tautoAdjustClockskewMiddleware(s3client.config),\n\t\t\tautoAdjustClockskewMiddlewareOptions\n\t\t);\n\t\treturn s3client;\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AWSS3Provider;\n"]},"metadata":{},"sourceType":"module"}