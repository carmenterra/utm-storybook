{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand } from '@aws-sdk/client-s3';\nimport { SEND_UPLOAD_PROGRESS_EVENT, SEND_DOWNLOAD_PROGRESS_EVENT } from './axios-http-handler';\nimport * as events from 'events';\nimport { createPrefixMiddleware, prefixMiddlewareOptions, autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, createS3Client } from '../common/S3ClientUtils';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\n\nvar AWSS3ProviderManagedUpload =\n/** @class */\nfunction () {\n  function AWSS3ProviderManagedUpload(params, opts, emitter) {\n    // Defaults\n    this.minPartSize = 5 * 1024 * 1024; // in MB\n\n    this.queueSize = 4; // Data for current upload\n\n    this.body = null;\n    this.params = null;\n    this.opts = null;\n    this.completedParts = [];\n    this.cancel = false; // Progress reporting\n\n    this.bytesUploaded = 0;\n    this.totalBytesToUpload = 0;\n    this.emitter = null;\n    this.params = params;\n    this.opts = opts;\n    this.emitter = emitter;\n    this.s3client = this._createNewS3Client(opts, emitter);\n  }\n\n  AWSS3ProviderManagedUpload.prototype.upload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, putObjectCommand, uploadId, numberOfPartsToUpload, parts, start;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , this.validateAndSanitizeBody(this.params.Body)];\n\n          case 1:\n            _a.body = _b.sent();\n            this.totalBytesToUpload = this.byteLength(this.body);\n            if (!(this.totalBytesToUpload <= this.minPartSize)) return [3\n            /*break*/\n            , 2]; // Multipart upload is not required. Upload the sanitized body as is\n\n            this.params.Body = this.body;\n            putObjectCommand = new PutObjectCommand(this.params);\n            return [2\n            /*return*/\n            , this.s3client.send(putObjectCommand)];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.createMultiPartUpload()];\n\n          case 3:\n            uploadId = _b.sent();\n            numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.minPartSize);\n            parts = this.createParts();\n            start = 0;\n            _b.label = 4;\n\n          case 4:\n            if (!(start < numberOfPartsToUpload)) return [3\n            /*break*/\n            , 9];\n            /** This first block will try to cancel the upload if the cancel\n             *\trequest came before any parts uploads have started.\n             **/\n\n            return [4\n            /*yield*/\n            , this.checkIfUploadCancelled(uploadId)];\n\n          case 5:\n            /** This first block will try to cancel the upload if the cancel\n             *\trequest came before any parts uploads have started.\n             **/\n            _b.sent(); // Upload as many as `queueSize` parts simultaneously\n\n\n            return [4\n            /*yield*/\n            , this.uploadParts(uploadId, parts.slice(start, start + this.queueSize))];\n\n          case 6:\n            // Upload as many as `queueSize` parts simultaneously\n            _b.sent();\n            /** Call cleanup a second time in case there were part upload requests\n             *  in flight. This is to ensure that all parts are cleaned up.\n             */\n\n\n            return [4\n            /*yield*/\n            , this.checkIfUploadCancelled(uploadId)];\n\n          case 7:\n            /** Call cleanup a second time in case there were part upload requests\n             *  in flight. This is to ensure that all parts are cleaned up.\n             */\n            _b.sent();\n\n            _b.label = 8;\n\n          case 8:\n            start += this.queueSize;\n            return [3\n            /*break*/\n            , 4];\n\n          case 9:\n            parts.map(function (part) {\n              _this.removeEventListener(part);\n            });\n            return [4\n            /*yield*/\n            , this.finishMultiPartUpload(uploadId)];\n\n          case 10:\n            // Step 3: Finalize the upload such that S3 can recreate the file\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.createParts = function () {\n    var parts = [];\n\n    for (var bodyStart = 0; bodyStart < this.totalBytesToUpload;) {\n      var bodyEnd = Math.min(bodyStart + this.minPartSize, this.totalBytesToUpload);\n      parts.push({\n        bodyPart: this.body.slice(bodyStart, bodyEnd),\n        partNumber: parts.length + 1,\n        emitter: new events.EventEmitter(),\n        _lastUploadedBytes: 0\n      });\n      bodyStart += this.minPartSize;\n    }\n\n    return parts;\n  };\n\n  AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var createMultiPartUploadCommand, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n            return [4\n            /*yield*/\n            , this.s3client.send(createMultiPartUploadCommand)];\n\n          case 1:\n            response = _a.sent();\n            logger.debug(response.UploadId);\n            return [2\n            /*return*/\n            , response.UploadId];\n        }\n      });\n    });\n  };\n  /**\n   * @private Not to be extended outside of tests\n   * @VisibleFotTesting\n   */\n\n\n  AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allResults, i, error_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Promise.all(parts.map(function (part) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var options, _a, Key, Bucket, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, res;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      this.setupEventListener(part);\n                      options = {\n                        emitter: part.emitter\n                      };\n                      _a = this.params, Key = _a.Key, Bucket = _a.Bucket, SSECustomerAlgorithm = _a.SSECustomerAlgorithm, SSECustomerKey = _a.SSECustomerKey, SSECustomerKeyMD5 = _a.SSECustomerKeyMD5;\n                      return [4\n                      /*yield*/\n                      , this.s3client.send(new UploadPartCommand(__assign(__assign(__assign({\n                        PartNumber: part.partNumber,\n                        Body: part.bodyPart,\n                        UploadId: uploadId,\n                        Key: Key,\n                        Bucket: Bucket\n                      }, SSECustomerAlgorithm && {\n                        SSECustomerAlgorithm: SSECustomerAlgorithm\n                      }), SSECustomerKey && {\n                        SSECustomerKey: SSECustomerKey\n                      }), SSECustomerKeyMD5 && {\n                        SSECustomerKeyMD5: SSECustomerKeyMD5\n                      })), options)];\n\n                    case 1:\n                      res = _b.sent();\n                      return [2\n                      /*return*/\n                      , res];\n                  }\n                });\n              });\n            }))];\n\n          case 1:\n            allResults = _a.sent(); // The order of resolved promises is the same as input promise order.\n\n            for (i = 0; i < allResults.length; i++) {\n              this.completedParts.push({\n                PartNumber: parts[i].partNumber,\n                ETag: allResults[i].ETag\n              });\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_1 = _a.sent();\n            logger.error('error happened while uploading a part. Cancelling the multipart upload', error_1);\n            this.cancelUpload();\n            return [2\n            /*return*/\n            ];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, completeUploadCommand, data, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId,\n              MultipartUpload: {\n                Parts: this.completedParts\n              }\n            };\n            completeUploadCommand = new CompleteMultipartUploadCommand(input);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.s3client.send(completeUploadCommand)];\n\n          case 2:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data.Key];\n\n          case 3:\n            error_2 = _a.sent();\n            logger.error('error happened while finishing the upload. Cancelling the multipart upload', error_2);\n            this.cancelUpload();\n            return [2\n            /*return*/\n            ];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.checkIfUploadCancelled = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var errorMessage, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.cancel) return [3\n            /*break*/\n            , 5];\n            errorMessage = 'Upload was cancelled.';\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.cleanup(uploadId)];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_3 = _a.sent();\n            errorMessage += \" \" + error_3.message;\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            throw new Error(errorMessage);\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.cancelUpload = function () {\n    this.cancel = true;\n  };\n\n  AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Reset this's state\n            this.body = null;\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.totalBytesToUpload = 0;\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId\n            };\n            return [4\n            /*yield*/\n            , this.s3client.send(new AbortMultipartUploadCommand(input))];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.s3client.send(new ListPartsCommand(input))];\n\n          case 2:\n            data = _a.sent();\n\n            if (data && data.Parts && data.Parts.length > 0) {\n              throw new Error('Multi Part upload clean up failed');\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.removeEventListener = function (part) {\n    part.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n    part.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n  };\n\n  AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n    var _this = this;\n\n    part.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n      _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n\n      part._lastUploadedBytes = progress.loaded;\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n    this.bytesUploaded += incrementalUpdate;\n    this.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytesToUpload,\n      part: partNumber,\n      key: this.params.Key\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n    if (input === null || input === undefined) return 0;\n\n    if (typeof input.byteLength === 'number') {\n      return input.byteLength;\n    } else if (typeof input.length === 'number') {\n      return input.length;\n    } else if (typeof input.size === 'number') {\n      return input.size;\n    } else if (typeof input.path === 'string') {\n      /* NodeJs Support\n      return require('fs').lstatSync(input.path).size;\n      */\n    } else {\n      throw new Error('Cannot determine length of ' + input);\n    }\n  };\n\n  AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (this.isGenericObject(body)) {\n          // Any javascript object\n          return [2\n          /*return*/\n          , JSON.stringify(body)];\n        } else {\n          // Files, arrayBuffer etc\n          return [2\n          /*return*/\n          , body];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n    if (body !== null && typeof body === 'object') {\n      try {\n        return !(this.byteLength(body) >= 0);\n      } catch (error) {\n        // If we cannot determine the length of the body, consider it\n        // as a generic object and upload a stringified version of it\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n    var s3client = createS3Client(config, emitter);\n    s3client.middlewareStack.add(createPrefixMiddleware(this.opts, this.params.Key), prefixMiddlewareOptions);\n    s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n    return s3client;\n  };\n\n  return AWSS3ProviderManagedUpload;\n}();\n\nexport { AWSS3ProviderManagedUpload };","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","PutObjectCommand","CreateMultipartUploadCommand","UploadPartCommand","CompleteMultipartUploadCommand","ListPartsCommand","AbortMultipartUploadCommand","SEND_UPLOAD_PROGRESS_EVENT","SEND_DOWNLOAD_PROGRESS_EVENT","events","createPrefixMiddleware","prefixMiddlewareOptions","autoAdjustClockskewMiddleware","autoAdjustClockskewMiddlewareOptions","createS3Client","logger","params","opts","emitter","s3client","_createNewS3Client","AWSS3ProviderManagedUpload","_a","validateAndSanitizeBody","Body","body","_b","totalBytesToUpload","byteLength","minPartSize","putObjectCommand","send","createMultiPartUpload","uploadId","numberOfPartsToUpload","Math","ceil","parts","createParts","start","checkIfUploadCancelled","uploadParts","slice","queueSize","map","_this","removeEventListener","part","finishMultiPartUpload","bodyStart","bodyEnd","min","push","bodyPart","partNumber","length","EventEmitter","_lastUploadedBytes","createMultiPartUploadCommand","response","debug","UploadId","Promise","all","setupEventListener","options","Key","Bucket","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","__assign","PartNumber","res","allResults","i","completedParts","ETag","error","error_1","cancelUpload","input","MultipartUpload","Parts","completeUploadCommand","data","error_2","cancel","errorMessage","cleanup","error_3","message","Error","bytesUploaded","removeAllListeners","on","progressChanged","progress","loaded","incrementalUpdate","emit","total","key","undefined","size","path","isGenericObject","JSON","stringify","config","middlewareStack","add"],"sources":["/Users/richards/node_modules/@aws-amplify/storage/src/providers/AWSS3ProviderManagedUpload.ts"],"sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport {\n\tPutObjectCommand,\n\tPutObjectRequest,\n\tCreateMultipartUploadCommand,\n\tUploadPartCommand,\n\tCompleteMultipartUploadCommand,\n\tCompleteMultipartUploadCommandInput,\n\tListPartsCommand,\n\tAbortMultipartUploadCommand,\n\tCompletedPart,\n\tS3Client,\n} from '@aws-sdk/client-s3';\nimport {\n\tSEND_UPLOAD_PROGRESS_EVENT,\n\tSEND_DOWNLOAD_PROGRESS_EVENT,\n\tAxiosHttpHandlerOptions,\n} from './axios-http-handler';\nimport * as events from 'events';\nimport {\n\tcreatePrefixMiddleware,\n\tprefixMiddlewareOptions,\n\tautoAdjustClockskewMiddleware,\n\tautoAdjustClockskewMiddlewareOptions,\n\tcreateS3Client,\n} from '../common/S3ClientUtils';\n\nconst logger = new Logger('AWSS3ProviderManagedUpload');\n\nexport declare interface Part {\n\tbodyPart: any;\n\tpartNumber: number;\n\temitter: events.EventEmitter;\n\tetag?: string;\n\t_lastUploadedBytes: number;\n}\n\nexport class AWSS3ProviderManagedUpload {\n\t// Defaults\n\tprotected minPartSize = 5 * 1024 * 1024; // in MB\n\tprivate queueSize = 4;\n\n\t// Data for current upload\n\tprivate body = null;\n\tprivate params: PutObjectRequest = null;\n\tprivate opts = null;\n\tprivate completedParts: CompletedPart[] = [];\n\tprivate cancel = false;\n\tprivate s3client: S3Client;\n\n\t// Progress reporting\n\tprivate bytesUploaded = 0;\n\tprivate totalBytesToUpload = 0;\n\tprivate emitter: events.EventEmitter = null;\n\n\tconstructor(params: PutObjectRequest, opts, emitter: events.EventEmitter) {\n\t\tthis.params = params;\n\t\tthis.opts = opts;\n\t\tthis.emitter = emitter;\n\t\tthis.s3client = this._createNewS3Client(opts, emitter);\n\t}\n\n\tpublic async upload() {\n\t\tthis.body = await this.validateAndSanitizeBody(this.params.Body);\n\t\tthis.totalBytesToUpload = this.byteLength(this.body);\n\t\tif (this.totalBytesToUpload <= this.minPartSize) {\n\t\t\t// Multipart upload is not required. Upload the sanitized body as is\n\t\t\tthis.params.Body = this.body;\n\t\t\tconst putObjectCommand = new PutObjectCommand(this.params);\n\t\t\treturn this.s3client.send(putObjectCommand);\n\t\t} else {\n\t\t\t// Step 1: Initiate the multi part upload\n\t\t\tconst uploadId = await this.createMultiPartUpload();\n\n\t\t\t// Step 2: Upload chunks in parallel as requested\n\t\t\tconst numberOfPartsToUpload = Math.ceil(\n\t\t\t\tthis.totalBytesToUpload / this.minPartSize\n\t\t\t);\n\n\t\t\tconst parts: Part[] = this.createParts();\n\t\t\tfor (\n\t\t\t\tlet start = 0;\n\t\t\t\tstart < numberOfPartsToUpload;\n\t\t\t\tstart += this.queueSize\n\t\t\t) {\n\t\t\t\t/** This first block will try to cancel the upload if the cancel\n\t\t\t\t *\trequest came before any parts uploads have started.\n\t\t\t\t **/\n\t\t\t\tawait this.checkIfUploadCancelled(uploadId);\n\n\t\t\t\t// Upload as many as `queueSize` parts simultaneously\n\t\t\t\tawait this.uploadParts(\n\t\t\t\t\tuploadId,\n\t\t\t\t\tparts.slice(start, start + this.queueSize)\n\t\t\t\t);\n\n\t\t\t\t/** Call cleanup a second time in case there were part upload requests\n\t\t\t\t *  in flight. This is to ensure that all parts are cleaned up.\n\t\t\t\t */\n\t\t\t\tawait this.checkIfUploadCancelled(uploadId);\n\t\t\t}\n\n\t\t\tparts.map(part => {\n\t\t\t\tthis.removeEventListener(part);\n\t\t\t});\n\n\t\t\t// Step 3: Finalize the upload such that S3 can recreate the file\n\t\t\treturn await this.finishMultiPartUpload(uploadId);\n\t\t}\n\t}\n\n\tprivate createParts(): Part[] {\n\t\tconst parts: Part[] = [];\n\t\tfor (let bodyStart = 0; bodyStart < this.totalBytesToUpload; ) {\n\t\t\tconst bodyEnd = Math.min(\n\t\t\t\tbodyStart + this.minPartSize,\n\t\t\t\tthis.totalBytesToUpload\n\t\t\t);\n\t\t\tparts.push({\n\t\t\t\tbodyPart: this.body.slice(bodyStart, bodyEnd),\n\t\t\t\tpartNumber: parts.length + 1,\n\t\t\t\temitter: new events.EventEmitter(),\n\t\t\t\t_lastUploadedBytes: 0,\n\t\t\t});\n\t\t\tbodyStart += this.minPartSize;\n\t\t}\n\t\treturn parts;\n\t}\n\n\tprivate async createMultiPartUpload() {\n\t\tconst createMultiPartUploadCommand = new CreateMultipartUploadCommand(\n\t\t\tthis.params\n\t\t);\n\t\tconst response = await this.s3client.send(createMultiPartUploadCommand);\n\t\tlogger.debug(response.UploadId);\n\t\treturn response.UploadId;\n\t}\n\n\t/**\n\t * @private Not to be extended outside of tests\n\t * @VisibleFotTesting\n\t */\n\tprotected async uploadParts(uploadId: string, parts: Part[]) {\n\t\ttry {\n\t\t\tconst allResults = await Promise.all(\n\t\t\t\tparts.map(async part => {\n\t\t\t\t\tthis.setupEventListener(part);\n\t\t\t\t\tconst options: AxiosHttpHandlerOptions = { emitter: part.emitter };\n\t\t\t\t\tconst {\n\t\t\t\t\t\tKey,\n\t\t\t\t\t\tBucket,\n\t\t\t\t\t\tSSECustomerAlgorithm,\n\t\t\t\t\t\tSSECustomerKey,\n\t\t\t\t\t\tSSECustomerKeyMD5,\n\t\t\t\t\t} = this.params;\n\t\t\t\t\tconst res = await this.s3client.send(\n\t\t\t\t\t\tnew UploadPartCommand({\n\t\t\t\t\t\t\tPartNumber: part.partNumber,\n\t\t\t\t\t\t\tBody: part.bodyPart,\n\t\t\t\t\t\t\tUploadId: uploadId,\n\t\t\t\t\t\t\tKey,\n\t\t\t\t\t\t\tBucket,\n\t\t\t\t\t\t\t...(SSECustomerAlgorithm && { SSECustomerAlgorithm }),\n\t\t\t\t\t\t\t...(SSECustomerKey && { SSECustomerKey }),\n\t\t\t\t\t\t\t...(SSECustomerKeyMD5 && { SSECustomerKeyMD5 }),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\toptions\n\t\t\t\t\t);\n\t\t\t\t\treturn res;\n\t\t\t\t})\n\t\t\t);\n\t\t\t// The order of resolved promises is the same as input promise order.\n\t\t\tfor (let i = 0; i < allResults.length; i++) {\n\t\t\t\tthis.completedParts.push({\n\t\t\t\t\tPartNumber: parts[i].partNumber,\n\t\t\t\t\tETag: allResults[i].ETag,\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(\n\t\t\t\t'error happened while uploading a part. Cancelling the multipart upload',\n\t\t\t\terror\n\t\t\t);\n\t\t\tthis.cancelUpload();\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate async finishMultiPartUpload(uploadId: string) {\n\t\tconst input: CompleteMultipartUploadCommandInput = {\n\t\t\tBucket: this.params.Bucket,\n\t\t\tKey: this.params.Key,\n\t\t\tUploadId: uploadId,\n\t\t\tMultipartUpload: { Parts: this.completedParts },\n\t\t};\n\t\tconst completeUploadCommand = new CompleteMultipartUploadCommand(input);\n\t\ttry {\n\t\t\tconst data = await this.s3client.send(completeUploadCommand);\n\t\t\treturn data.Key;\n\t\t} catch (error) {\n\t\t\tlogger.error(\n\t\t\t\t'error happened while finishing the upload. Cancelling the multipart upload',\n\t\t\t\terror\n\t\t\t);\n\t\t\tthis.cancelUpload();\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate async checkIfUploadCancelled(uploadId: string) {\n\t\tif (this.cancel) {\n\t\t\tlet errorMessage = 'Upload was cancelled.';\n\t\t\ttry {\n\t\t\t\tawait this.cleanup(uploadId);\n\t\t\t} catch (error) {\n\t\t\t\terrorMessage += ` ${error.message}`;\n\t\t\t}\n\t\t\tthrow new Error(errorMessage);\n\t\t}\n\t}\n\n\tpublic cancelUpload() {\n\t\tthis.cancel = true;\n\t}\n\n\tprivate async cleanup(uploadId: string) {\n\t\t// Reset this's state\n\t\tthis.body = null;\n\t\tthis.completedParts = [];\n\t\tthis.bytesUploaded = 0;\n\t\tthis.totalBytesToUpload = 0;\n\n\t\tconst input = {\n\t\t\tBucket: this.params.Bucket,\n\t\t\tKey: this.params.Key,\n\t\t\tUploadId: uploadId,\n\t\t};\n\n\t\tawait this.s3client.send(new AbortMultipartUploadCommand(input));\n\n\t\t// verify that all parts are removed.\n\t\tconst data = await this.s3client.send(new ListPartsCommand(input));\n\n\t\tif (data && data.Parts && data.Parts.length > 0) {\n\t\t\tthrow new Error('Multi Part upload clean up failed');\n\t\t}\n\t}\n\n\tprivate removeEventListener(part: Part) {\n\t\tpart.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n\t\tpart.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n\t}\n\n\tprivate setupEventListener(part: Part) {\n\t\tpart.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, progress => {\n\t\t\tthis.progressChanged(\n\t\t\t\tpart.partNumber,\n\t\t\t\tprogress.loaded - part._lastUploadedBytes\n\t\t\t);\n\t\t\tpart._lastUploadedBytes = progress.loaded;\n\t\t});\n\t}\n\n\tprivate progressChanged(partNumber: number, incrementalUpdate: number) {\n\t\tthis.bytesUploaded += incrementalUpdate;\n\t\tthis.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n\t\t\tloaded: this.bytesUploaded,\n\t\t\ttotal: this.totalBytesToUpload,\n\t\t\tpart: partNumber,\n\t\t\tkey: this.params.Key,\n\t\t});\n\t}\n\n\tprivate byteLength(input: any) {\n\t\tif (input === null || input === undefined) return 0;\n\t\tif (typeof input.byteLength === 'number') {\n\t\t\treturn input.byteLength;\n\t\t} else if (typeof input.length === 'number') {\n\t\t\treturn input.length;\n\t\t} else if (typeof input.size === 'number') {\n\t\t\treturn input.size;\n\t\t} else if (typeof input.path === 'string') {\n\t\t\t/* NodeJs Support\n\t\t\treturn require('fs').lstatSync(input.path).size;\n\t\t\t*/\n\t\t} else {\n\t\t\tthrow new Error('Cannot determine length of ' + input);\n\t\t}\n\t}\n\n\tprivate async validateAndSanitizeBody(body: any): Promise<any> {\n\t\tif (this.isGenericObject(body)) {\n\t\t\t// Any javascript object\n\t\t\treturn JSON.stringify(body);\n\t\t} else {\n\t\t\t// Files, arrayBuffer etc\n\t\t\treturn body;\n\t\t}\n\t\t/* TODO: streams and files for nodejs \n\t\tif (\n\t\t\ttypeof body.path === 'string' &&\n\t\t\trequire('fs').lstatSync(body.path).size > 0\n\t\t) {\n\t\t\treturn body;\n\t\t} */\n\t}\n\n\tprivate isGenericObject(body: any): body is Object {\n\t\tif (body !== null && typeof body === 'object') {\n\t\t\ttry {\n\t\t\t\treturn !(this.byteLength(body) >= 0);\n\t\t\t} catch (error) {\n\t\t\t\t// If we cannot determine the length of the body, consider it\n\t\t\t\t// as a generic object and upload a stringified version of it\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected _createNewS3Client(config, emitter?: events.EventEmitter) {\n\t\tconst s3client = createS3Client(config, emitter);\n\t\ts3client.middlewareStack.add(\n\t\t\tcreatePrefixMiddleware(this.opts, this.params.Key),\n\t\t\tprefixMiddlewareOptions\n\t\t);\n\t\ts3client.middlewareStack.add(\n\t\t\tautoAdjustClockskewMiddleware(s3client.config),\n\t\t\tautoAdjustClockskewMiddlewareOptions\n\t\t);\n\t\treturn s3client;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}