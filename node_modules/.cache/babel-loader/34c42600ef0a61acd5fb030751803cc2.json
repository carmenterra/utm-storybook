{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { SumerianProvider } from './Providers/SumerianProvider';\nimport { XRProviderNotConfigured } from './Errors';\nvar logger = new Logger('XR');\nvar DEFAULT_PROVIDER_NAME = 'SumerianProvider';\n\nvar XRClass =\n/** @class */\nfunction () {\n  /**\n   * Initialize XR with AWS configurations\n   *\n   * @param {XROptions} options - Configuration object for XR\n   */\n  function XRClass(options) {\n    this._options = options;\n    logger.debug('XR Options', this._options);\n    this._defaultProvider = DEFAULT_PROVIDER_NAME;\n    this._pluggables = {}; // Add default provider\n\n    this.addPluggable(new SumerianProvider());\n  }\n  /**\n   * Configure XR part with configurations\n   *\n   * @param {XROptions} config - Configuration for XR\n   * @return {Object} - The current configuration\n   */\n\n\n  XRClass.prototype.configure = function (options) {\n    var _this = this;\n\n    var opt = options ? options.XR || options : {};\n    logger.debug('configure XR', {\n      opt: opt\n    });\n    this._options = Object.assign({}, this._options, opt);\n    Object.entries(this._pluggables).map(function (_a) {\n      var _b = __read(_a, 2),\n          name = _b[0],\n          provider = _b[1];\n\n      if (name === _this._defaultProvider && !opt[_this._defaultProvider]) {\n        provider.configure(_this._options);\n      } else {\n        provider.configure(_this._options[name]);\n      }\n    });\n    return this._options;\n  };\n  /**\n   * add plugin into XR category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n\n\n  XRClass.prototype.addPluggable = function (pluggable) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        if (pluggable && pluggable.getCategory() === 'XR') {\n          this._pluggables[pluggable.getProviderName()] = pluggable;\n          config = pluggable.configure(this._options);\n          return [2\n          /*return*/\n          , config];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  XRClass.prototype.loadScene = function (sceneName, domElementId, sceneOptions, provider) {\n    if (sceneOptions === void 0) {\n      sceneOptions = {};\n    }\n\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n            return [4\n            /*yield*/\n            , this._pluggables[provider].loadScene(sceneName, domElementId, sceneOptions)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  XRClass.prototype.isSceneLoaded = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isSceneLoaded(sceneName);\n  };\n\n  XRClass.prototype.getSceneController = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].getSceneController(sceneName);\n  };\n\n  XRClass.prototype.isVRCapable = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isVRCapable(sceneName);\n  };\n\n  XRClass.prototype.isVRPresentationActive = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isVRPresentationActive(sceneName);\n  };\n\n  XRClass.prototype.start = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].start(sceneName);\n  };\n\n  XRClass.prototype.enterVR = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].enterVR(sceneName);\n  };\n\n  XRClass.prototype.exitVR = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].exitVR(sceneName);\n  };\n\n  XRClass.prototype.isMuted = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isMuted(sceneName);\n  };\n\n  XRClass.prototype.setMuted = function (sceneName, muted, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].setMuted(sceneName, muted);\n  };\n\n  XRClass.prototype.onSceneEvent = function (sceneName, eventName, eventHandler, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].onSceneEvent(sceneName, eventName, eventHandler);\n  };\n\n  XRClass.prototype.enableAudio = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].enableAudio(sceneName);\n  };\n\n  return XRClass;\n}();\n\nexport { XRClass };\nexport var XR = new XRClass(null);\nAmplify.register(XR);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAYA,SAASA,OAAT,EAAkBC,aAAa,IAAIC,MAAnC,QAAiD,mBAAjD;AAEA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,uBAAT,QAAwC,UAAxC;AAEA,IAAMC,MAAM,GAAG,IAAIH,MAAJ,CAAW,IAAX,CAAf;AAEA,IAAMI,qBAAqB,GAAG,kBAA9B;;AAEA;AAAA;AAAA;AAMC;;;;;AAKA,mBAAYC,OAAZ,EAA8B;AAC7B,SAAKC,QAAL,GAAgBD,OAAhB;AACAF,UAAM,CAACI,KAAP,CAAa,YAAb,EAA2B,KAAKD,QAAhC;AACA,SAAKE,gBAAL,GAAwBJ,qBAAxB;AACA,SAAKK,WAAL,GAAmB,EAAnB,CAJ6B,CAM7B;;AACA,SAAKC,YAAL,CAAkB,IAAIT,gBAAJ,EAAlB;AACA;AAED;;;;;;;;AAMAU,0CAAUN,OAAV,EAA4B;AAA5B;;AACC,QAAMO,GAAG,GAAGP,OAAO,GAAGA,OAAO,CAACQ,EAAR,IAAcR,OAAjB,GAA2B,EAA9C;AACAF,UAAM,CAACI,KAAP,CAAa,cAAb,EAA6B;AAAEK,SAAG;AAAL,KAA7B;AAEA,SAAKN,QAAL,GAAgBQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKT,QAAvB,EAAiCM,GAAjC,CAAhB;AAEAE,UAAM,CAACE,OAAP,CAAe,KAAKP,WAApB,EAAiCQ,GAAjC,CAAqC,UAACC,EAAD,EAAiB;UAAhBC;UAACC;UAAMC;;AAC5C,UAAID,IAAI,KAAKE,KAAI,CAACd,gBAAd,IAAkC,CAACI,GAAG,CAACU,KAAI,CAACd,gBAAN,CAA1C,EAAmE;AAClEa,gBAAQ,CAACE,SAAT,CAAmBD,KAAI,CAAChB,QAAxB;AACA,OAFD,MAEO;AACNe,gBAAQ,CAACE,SAAT,CAAmBD,KAAI,CAAChB,QAAL,CAAcc,IAAd,CAAnB;AACA;AACD,KAND;AAQA,WAAO,KAAKd,QAAZ;AACA,GAfD;AAiBA;;;;;;AAIaK,mCAAb,UAA0Ba,SAA1B,EAA+C;;;;AAC9C,YAAIA,SAAS,IAAIA,SAAS,CAACC,WAAV,OAA4B,IAA7C,EAAmD;AAClD,eAAKhB,WAAL,CAAiBe,SAAS,CAACE,eAAV,EAAjB,IAAgDF,SAAhD;AACMG,gBAAM,GAAGH,SAAS,CAACD,SAAV,CAAoB,KAAKjB,QAAzB,CAAT;AAEN;AAAA;AAAA,YAAOqB,MAAP;AACA;;;;;;;AACD,GAPY;;AASAhB,gCAAb,UACCiB,SADD,EAECC,YAFD,EAGCC,YAHD,EAICT,QAJD,EAIyC;AADxC;AAAAS;AAA+B;;AAC/B;AAAAT,iBAAmB,KAAKb,gBAAxB;AAAwC;;;;;;AAExC,gBAAI,CAAC,KAAKC,WAAL,CAAiBY,QAAjB,CAAL,EACC,MAAM,IAAInB,uBAAJ,CACL,eAAamB,QAAb,GAAqB,kBADhB,CAAN;AAGM;AAAA;AAAA,cAAM,KAAKZ,WAAL,CAAiBY,QAAjB,EAA2BU,SAA3B,CACZH,SADY,EAEZC,YAFY,EAGZC,YAHY,CAAN;;;AAAP;AAAA;AAAA,cAAOZ,SAAP;;;;AAKA,GAfY;;AAiBNP,oCAAP,UACCiB,SADD,EAECP,QAFD,EAEyC;AAAxC;AAAAA,iBAAmB,KAAKb,gBAAxB;AAAwC;;AAExC,QAAI,CAAC,KAAKC,WAAL,CAAiBY,QAAjB,CAAL,EACC,MAAM,IAAInB,uBAAJ,CACL,eAAamB,QAAb,GAAqB,kBADhB,CAAN;AAGD,WAAO,KAAKZ,WAAL,CAAiBY,QAAjB,EAA2BW,aAA3B,CAAyCJ,SAAzC,CAAP;AACA,GATM;;AAWAjB,yCAAP,UACCiB,SADD,EAECP,QAFD,EAEyC;AAAxC;AAAAA,iBAAmB,KAAKb,gBAAxB;AAAwC;;AAExC,QAAI,CAAC,KAAKC,WAAL,CAAiBY,QAAjB,CAAL,EACC,MAAM,IAAInB,uBAAJ,CACL,eAAamB,QAAb,GAAqB,kBADhB,CAAN;AAGD,WAAO,KAAKZ,WAAL,CAAiBY,QAAjB,EAA2BY,kBAA3B,CAA8CL,SAA9C,CAAP;AACA,GATM;;AAWAjB,kCAAP,UACCiB,SADD,EAECP,QAFD,EAEyC;AAAxC;AAAAA,iBAAmB,KAAKb,gBAAxB;AAAwC;;AAExC,QAAI,CAAC,KAAKC,WAAL,CAAiBY,QAAjB,CAAL,EACC,MAAM,IAAInB,uBAAJ,CACL,eAAamB,QAAb,GAAqB,kBADhB,CAAN;AAGD,WAAO,KAAKZ,WAAL,CAAiBY,QAAjB,EAA2Ba,WAA3B,CAAuCN,SAAvC,CAAP;AACA,GATM;;AAWAjB,6CAAP,UACCiB,SADD,EAECP,QAFD,EAEyC;AAAxC;AAAAA,iBAAmB,KAAKb,gBAAxB;AAAwC;;AAExC,QAAI,CAAC,KAAKC,WAAL,CAAiBY,QAAjB,CAAL,EACC,MAAM,IAAInB,uBAAJ,CACL,eAAamB,QAAb,GAAqB,kBADhB,CAAN;AAGD,WAAO,KAAKZ,WAAL,CAAiBY,QAAjB,EAA2Bc,sBAA3B,CAAkDP,SAAlD,CAAP;AACA,GATM;;AAWAjB,4BAAP,UAAaiB,SAAb,EAAgCP,QAAhC,EAAwE;AAAxC;AAAAA,iBAAmB,KAAKb,gBAAxB;AAAwC;;AACvE,QAAI,CAAC,KAAKC,WAAL,CAAiBY,QAAjB,CAAL,EACC,MAAM,IAAInB,uBAAJ,CACL,eAAamB,QAAb,GAAqB,kBADhB,CAAN;AAGD,WAAO,KAAKZ,WAAL,CAAiBY,QAAjB,EAA2Be,KAA3B,CAAiCR,SAAjC,CAAP;AACA,GANM;;AAQAjB,8BAAP,UAAeiB,SAAf,EAAkCP,QAAlC,EAA0E;AAAxC;AAAAA,iBAAmB,KAAKb,gBAAxB;AAAwC;;AACzE,QAAI,CAAC,KAAKC,WAAL,CAAiBY,QAAjB,CAAL,EACC,MAAM,IAAInB,uBAAJ,CACL,eAAamB,QAAb,GAAqB,kBADhB,CAAN;AAGD,WAAO,KAAKZ,WAAL,CAAiBY,QAAjB,EAA2BgB,OAA3B,CAAmCT,SAAnC,CAAP;AACA,GANM;;AAQAjB,6BAAP,UAAciB,SAAd,EAAiCP,QAAjC,EAAyE;AAAxC;AAAAA,iBAAmB,KAAKb,gBAAxB;AAAwC;;AACxE,QAAI,CAAC,KAAKC,WAAL,CAAiBY,QAAjB,CAAL,EACC,MAAM,IAAInB,uBAAJ,CACL,eAAamB,QAAb,GAAqB,kBADhB,CAAN;AAGD,WAAO,KAAKZ,WAAL,CAAiBY,QAAjB,EAA2BiB,MAA3B,CAAkCV,SAAlC,CAAP;AACA,GANM;;AAQAjB,8BAAP,UAAeiB,SAAf,EAAkCP,QAAlC,EAA0E;AAAxC;AAAAA,iBAAmB,KAAKb,gBAAxB;AAAwC;;AACzE,QAAI,CAAC,KAAKC,WAAL,CAAiBY,QAAjB,CAAL,EACC,MAAM,IAAInB,uBAAJ,CACL,eAAamB,QAAb,GAAqB,kBADhB,CAAN;AAGD,WAAO,KAAKZ,WAAL,CAAiBY,QAAjB,EAA2BkB,OAA3B,CAAmCX,SAAnC,CAAP;AACA,GANM;;AAQAjB,+BAAP,UACCiB,SADD,EAECY,KAFD,EAGCnB,QAHD,EAGyC;AAAxC;AAAAA,iBAAmB,KAAKb,gBAAxB;AAAwC;;AAExC,QAAI,CAAC,KAAKC,WAAL,CAAiBY,QAAjB,CAAL,EACC,MAAM,IAAInB,uBAAJ,CACL,eAAamB,QAAb,GAAqB,kBADhB,CAAN;AAGD,WAAO,KAAKZ,WAAL,CAAiBY,QAAjB,EAA2BoB,QAA3B,CAAoCb,SAApC,EAA+CY,KAA/C,CAAP;AACA,GAVM;;AAYA7B,mCAAP,UACCiB,SADD,EAECc,SAFD,EAGCC,YAHD,EAICtB,QAJD,EAIyC;AAAxC;AAAAA,iBAAmB,KAAKb,gBAAxB;AAAwC;;AAExC,QAAI,CAAC,KAAKC,WAAL,CAAiBY,QAAjB,CAAL,EACC,MAAM,IAAInB,uBAAJ,CACL,eAAamB,QAAb,GAAqB,kBADhB,CAAN;AAGD,WAAO,KAAKZ,WAAL,CAAiBY,QAAjB,EAA2BuB,YAA3B,CACNhB,SADM,EAENc,SAFM,EAGNC,YAHM,CAAP;AAKA,GAfM;;AAiBAhC,kCAAP,UACCiB,SADD,EAECP,QAFD,EAEyC;AAAxC;AAAAA,iBAAmB,KAAKb,gBAAxB;AAAwC;;AAExC,QAAI,CAAC,KAAKC,WAAL,CAAiBY,QAAjB,CAAL,EACC,MAAM,IAAInB,uBAAJ,CACL,eAAamB,QAAb,GAAqB,kBADhB,CAAN;AAGD,WAAO,KAAKZ,WAAL,CAAiBY,QAAjB,EAA2BwB,WAA3B,CAAuCjB,SAAvC,CAAP;AACA,GATM;;AAUR;AAAC,CA7LD;;;AA+LA,OAAO,IAAMf,EAAE,GAAG,IAAIF,OAAJ,CAAY,IAAZ,CAAX;AACPb,OAAO,CAACgD,QAAR,CAAiBjC,EAAjB","names":["Amplify","ConsoleLogger","Logger","SumerianProvider","XRProviderNotConfigured","logger","DEFAULT_PROVIDER_NAME","options","_options","debug","_defaultProvider","_pluggables","addPluggable","XRClass","opt","XR","Object","assign","entries","map","_a","_b","name","provider","_this","configure","pluggable","getCategory","getProviderName","config","sceneName","domElementId","sceneOptions","loadScene","isSceneLoaded","getSceneController","isVRCapable","isVRPresentationActive","start","enterVR","exitVR","isMuted","muted","setMuted","eventName","eventHandler","onSceneEvent","enableAudio","register"],"sources":["/Users/richards/node_modules/@aws-amplify/xr/src/XR.ts"],"sourcesContent":["/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { XRProvider, XROptions, SceneOptions } from './types';\nimport { SumerianProvider } from './Providers/SumerianProvider';\nimport { XRProviderNotConfigured } from './Errors';\n\nconst logger = new Logger('XR');\n\nconst DEFAULT_PROVIDER_NAME = 'SumerianProvider';\n\nexport class XRClass {\n\tprivate _options: XROptions;\n\n\tprivate _pluggables: { [key: string]: XRProvider };\n\tprivate _defaultProvider: string;\n\n\t/**\n\t * Initialize XR with AWS configurations\n\t *\n\t * @param {XROptions} options - Configuration object for XR\n\t */\n\tconstructor(options: XROptions) {\n\t\tthis._options = options;\n\t\tlogger.debug('XR Options', this._options);\n\t\tthis._defaultProvider = DEFAULT_PROVIDER_NAME;\n\t\tthis._pluggables = {};\n\n\t\t// Add default provider\n\t\tthis.addPluggable(new SumerianProvider());\n\t}\n\n\t/**\n\t * Configure XR part with configurations\n\t *\n\t * @param {XROptions} config - Configuration for XR\n\t * @return {Object} - The current configuration\n\t */\n\tconfigure(options: XROptions) {\n\t\tconst opt = options ? options.XR || options : {};\n\t\tlogger.debug('configure XR', { opt });\n\n\t\tthis._options = Object.assign({}, this._options, opt);\n\n\t\tObject.entries(this._pluggables).map(([name, provider]) => {\n\t\t\tif (name === this._defaultProvider && !opt[this._defaultProvider]) {\n\t\t\t\tprovider.configure(this._options);\n\t\t\t} else {\n\t\t\t\tprovider.configure(this._options[name]);\n\t\t\t}\n\t\t});\n\n\t\treturn this._options;\n\t}\n\n\t/**\n\t * add plugin into XR category\n\t * @param {Object} pluggable - an instance of the plugin\n\t */\n\tpublic async addPluggable(pluggable: XRProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'XR') {\n\t\t\tthis._pluggables[pluggable.getProviderName()] = pluggable;\n\t\t\tconst config = pluggable.configure(this._options);\n\n\t\t\treturn config;\n\t\t}\n\t}\n\n\tpublic async loadScene(\n\t\tsceneName: string,\n\t\tdomElementId: string,\n\t\tsceneOptions: SceneOptions = {},\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn await this._pluggables[provider].loadScene(\n\t\t\tsceneName,\n\t\t\tdomElementId,\n\t\t\tsceneOptions\n\t\t);\n\t}\n\n\tpublic isSceneLoaded(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].isSceneLoaded(sceneName);\n\t}\n\n\tpublic getSceneController(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].getSceneController(sceneName);\n\t}\n\n\tpublic isVRCapable(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].isVRCapable(sceneName);\n\t}\n\n\tpublic isVRPresentationActive(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].isVRPresentationActive(sceneName);\n\t}\n\n\tpublic start(sceneName: string, provider: string = this._defaultProvider) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].start(sceneName);\n\t}\n\n\tpublic enterVR(sceneName: string, provider: string = this._defaultProvider) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].enterVR(sceneName);\n\t}\n\n\tpublic exitVR(sceneName: string, provider: string = this._defaultProvider) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].exitVR(sceneName);\n\t}\n\n\tpublic isMuted(sceneName: string, provider: string = this._defaultProvider) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].isMuted(sceneName);\n\t}\n\n\tpublic setMuted(\n\t\tsceneName: string,\n\t\tmuted: boolean,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].setMuted(sceneName, muted);\n\t}\n\n\tpublic onSceneEvent(\n\t\tsceneName: string,\n\t\teventName: string,\n\t\teventHandler: Function,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].onSceneEvent(\n\t\t\tsceneName,\n\t\t\teventName,\n\t\t\teventHandler\n\t\t);\n\t}\n\n\tpublic enableAudio(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].enableAudio(sceneName);\n\t}\n}\n\nexport const XR = new XRClass(null);\nAmplify.register(XR);\n"]},"metadata":{},"sourceType":"module"}