{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelPredicateCreator, ModelSortPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne } from '../../types';\nimport { exhaustiveCheck, getIndex, getIndexFromAssociation, isModelConstructor, isPrivateMode, traverseModel, validatePredicate, sortCompareFunction } from '../../util';\nvar logger = new Logger('DataStore');\nvar DB_NAME = 'amplify-datastore';\n\nvar IndexedDBAdapter =\n/** @class */\nfunction () {\n  function IndexedDBAdapter() {\n    this.dbName = DB_NAME;\n  }\n\n  IndexedDBAdapter.prototype.checkPrivate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var isPrivate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , isPrivateMode().then(function (isPrivate) {\n              return isPrivate;\n            })];\n\n          case 1:\n            isPrivate = _a.sent();\n\n            if (isPrivate) {\n              logger.error(\"IndexedDB not supported in this browser's private mode\");\n              return [2\n              /*return*/\n              , Promise.reject(\"IndexedDB not supported in this browser's private mode\")];\n            } else {\n              return [2\n              /*return*/\n              , Promise.resolve()];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return this.getStorename(namespace, modelName);\n  };\n\n  IndexedDBAdapter.prototype.getStorename = function (namespace, modelName) {\n    var storeName = namespace + \"_\" + modelName;\n    return storeName;\n  };\n\n  IndexedDBAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName, sessionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var VERSION, _a, error_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _b.sent();\n\n            if (!!this.initPromise) return [3\n            /*break*/\n            , 2];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.initPromise];\n\n          case 3:\n            _b.sent();\n\n            _b.label = 4;\n\n          case 4:\n            if (sessionId) {\n              this.dbName = DB_NAME + \"-\" + sessionId;\n            }\n\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _b.label = 5;\n\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n\n            if (!!this.db) return [3\n            /*break*/\n            , 7];\n            VERSION = 2;\n            _a = this;\n            return [4\n            /*yield*/\n            , idb.openDB(this.dbName, VERSION, {\n              upgrade: function (db, oldVersion, newVersion, txn) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var _a, _b, storeName, origStore, tmpName, newStore, cursor, count, e_1_1, error_2;\n\n                  var e_1, _c;\n\n                  var _this = this;\n\n                  return __generator(this, function (_d) {\n                    switch (_d.label) {\n                      case 0:\n                        if (oldVersion === 0) {\n                          Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                            var namespace = theSchema.namespaces[namespaceName];\n                            Object.keys(namespace.models).forEach(function (modelName) {\n                              var storeName = _this.getStorename(namespaceName, modelName);\n\n                              var store = db.createObjectStore(storeName, {\n                                autoIncrement: true\n                              });\n                              var indexes = _this.schema.namespaces[namespaceName].relationships[modelName].indexes;\n                              indexes.forEach(function (index) {\n                                return store.createIndex(index, index);\n                              });\n                              store.createIndex('byId', 'id', {\n                                unique: true\n                              });\n                            });\n                          });\n                          return [2\n                          /*return*/\n                          ];\n                        }\n\n                        if (!(oldVersion === 1 && newVersion === 2)) return [3\n                        /*break*/\n                        , 16];\n                        _d.label = 1;\n\n                      case 1:\n                        _d.trys.push([1, 14,, 15]);\n\n                        _d.label = 2;\n\n                      case 2:\n                        _d.trys.push([2, 11, 12, 13]);\n\n                        _a = __values(txn.objectStoreNames), _b = _a.next();\n                        _d.label = 3;\n\n                      case 3:\n                        if (!!_b.done) return [3\n                        /*break*/\n                        , 10];\n                        storeName = _b.value;\n                        origStore = txn.objectStore(storeName);\n                        tmpName = \"tmp_\" + storeName;\n                        origStore.name = tmpName;\n                        newStore = db.createObjectStore(storeName, {\n                          keyPath: undefined,\n                          autoIncrement: true\n                        });\n                        newStore.createIndex('byId', 'id', {\n                          unique: true\n                        });\n                        return [4\n                        /*yield*/\n                        , origStore.openCursor()];\n\n                      case 4:\n                        cursor = _d.sent();\n                        count = 0;\n                        _d.label = 5;\n\n                      case 5:\n                        if (!(cursor && cursor.value)) return [3\n                        /*break*/\n                        , 8]; // we don't pass key, since they are all new entries in the new store\n\n                        return [4\n                        /*yield*/\n                        , newStore.put(cursor.value)];\n\n                      case 6:\n                        // we don't pass key, since they are all new entries in the new store\n                        _d.sent();\n\n                        return [4\n                        /*yield*/\n                        , cursor.continue()];\n\n                      case 7:\n                        cursor = _d.sent();\n                        count++;\n                        return [3\n                        /*break*/\n                        , 5];\n\n                      case 8:\n                        // delete original\n                        db.deleteObjectStore(tmpName);\n                        logger.debug(count + \" \" + storeName + \" records migrated\");\n                        _d.label = 9;\n\n                      case 9:\n                        _b = _a.next();\n                        return [3\n                        /*break*/\n                        , 3];\n\n                      case 10:\n                        return [3\n                        /*break*/\n                        , 13];\n\n                      case 11:\n                        e_1_1 = _d.sent();\n                        e_1 = {\n                          error: e_1_1\n                        };\n                        return [3\n                        /*break*/\n                        , 13];\n\n                      case 12:\n                        try {\n                          if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                        } finally {\n                          if (e_1) throw e_1.error;\n                        }\n\n                        return [7\n                        /*endfinally*/\n                        ];\n\n                      case 13:\n                        return [3\n                        /*break*/\n                        , 15];\n\n                      case 14:\n                        error_2 = _d.sent();\n                        logger.error('Error migrating IndexedDB data', error_2);\n                        txn.abort();\n                        throw error_2;\n\n                      case 15:\n                        return [2\n                        /*return*/\n                        ];\n\n                      case 16:\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              }\n            })];\n\n          case 6:\n            _a.db = _b.sent();\n            this.resolve();\n            _b.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            error_1 = _b.sent();\n            this.reject(error_1);\n            return [3\n            /*break*/\n            , 9];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype._get = function (storeOrStoreName, id) {\n    return __awaiter(this, void 0, void 0, function () {\n      var index, storeName, store, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typeof storeOrStoreName === 'string') {\n              storeName = storeOrStoreName;\n              index = this.db.transaction(storeName, 'readonly').store.index('byId');\n            } else {\n              store = storeOrStoreName;\n              index = store.index('byId');\n            }\n\n            return [4\n            /*yield*/\n            , index.get(id)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.save = function (model, condition) {\n    var e_2, _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, connectedModels, namespaceName, set, connectionStoreNames, tx, store, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, store_1, id, fromDB_1, opType, key, e_2_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _b.sent();\n\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[this.namespaceResolver(modelConstructor)], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                  item = _a.item,\n                  instance = _a.instance;\n\n              var storeName = _this.getStorename(namespaceName, modelName);\n\n              set.add(storeName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance\n              };\n            });\n            tx = this.db.transaction(__spread([storeName], Array.from(set.values())), 'readwrite');\n            store = tx.objectStore(storeName);\n            return [4\n            /*yield*/\n            , this._get(store, model.id)];\n\n          case 2:\n            fromDB = _b.sent();\n\n            if (condition && fromDB) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              predicateObjs = predicates.predicates, type = predicates.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n\n            result = [];\n            _b.label = 3;\n\n          case 3:\n            _b.trys.push([3, 11, 12, 17]);\n\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _b.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , connectionStoreNames_1.next()];\n\n          case 5:\n            if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3\n            /*break*/\n            , 10];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance;\n            store_1 = tx.objectStore(storeName_1);\n            id = item.id;\n            return [4\n            /*yield*/\n            , this._get(store_1, id)];\n\n          case 6:\n            fromDB_1 = _b.sent();\n            opType = fromDB_1 === undefined ? OpType.INSERT : OpType.UPDATE;\n            if (!(id === model.id || opType === OpType.INSERT)) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , store_1.index('byId').getKey(item.id)];\n\n          case 7:\n            key = _b.sent();\n            return [4\n            /*yield*/\n            , store_1.put(item, key)];\n\n          case 8:\n            _b.sent();\n\n            result.push([instance, opType]);\n            _b.label = 9;\n\n          case 9:\n            return [3\n            /*break*/\n            , 4];\n\n          case 10:\n            return [3\n            /*break*/\n            , 17];\n\n          case 11:\n            e_2_1 = _b.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 17];\n\n          case 12:\n            _b.trys.push([12,, 15, 16]);\n\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3\n            /*break*/\n            , 14];\n            return [4\n            /*yield*/\n            , _a.call(connectionStoreNames_1)];\n\n          case 13:\n            _b.sent();\n\n            _b.label = 14;\n\n          case 14:\n            return [3\n            /*break*/\n            , 16];\n\n          case 15:\n            if (e_2) throw e_2.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 16:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 17:\n            return [4\n            /*yield*/\n            , tx.done];\n\n          case 18:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    var records_1, records_1_1, records_2, records_2_1;\n\n    var e_3, _a, e_4, _b, e_5, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor, tx, relations_1, relations_1_1, relation, fieldName, modelName, targetName, storeName, store, modelConstructor_1, _d, recordItem, getByfield, connectionRecord, e_4_1, recordItem, connectionRecord, e_5_1, e_3_1;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            namespace = this.schema.namespaces[namespaceName];\n            relations = namespace.relationships[srcModelName].relationTypes;\n            connectionStoreNames = relations.map(function (_a) {\n              var modelName = _a.modelName;\n              return _this.getStorename(namespaceName, modelName);\n            });\n            modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n\n            if (connectionStoreNames.length === 0) {\n              return [2\n              /*return*/\n              , records.map(function (record) {\n                return _this.modelInstanceCreator(modelConstructor, record);\n              })];\n            }\n\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readonly');\n            _e.label = 1;\n\n          case 1:\n            _e.trys.push([1, 34, 35, 40]);\n\n            relations_1 = __asyncValues(relations);\n            _e.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , relations_1.next()];\n\n          case 3:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3\n            /*break*/\n            , 33];\n            relation = relations_1_1.value;\n            fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName;\n            storeName = this.getStorename(namespaceName, modelName);\n            store = tx.objectStore(storeName);\n            modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n            _d = relation.relationType;\n\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3\n                /*break*/\n                , 4];\n\n              case 'BELONGS_TO':\n                return [3\n                /*break*/\n                , 17];\n\n              case 'HAS_MANY':\n                return [3\n                /*break*/\n                , 30];\n            }\n\n            return [3\n            /*break*/\n            , 31];\n\n          case 4:\n            _e.trys.push([4, 10, 11, 16]);\n\n            records_1 = __asyncValues(records);\n            _e.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , records_1.next()];\n\n          case 6:\n            if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3\n            /*break*/\n            , 9];\n            recordItem = records_1_1.value;\n            getByfield = recordItem[targetName] ? targetName : fieldName;\n            if (!recordItem[getByfield]) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , this._get(store, recordItem[getByfield])];\n\n          case 7:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            _e.label = 8;\n\n          case 8:\n            return [3\n            /*break*/\n            , 5];\n\n          case 9:\n            return [3\n            /*break*/\n            , 16];\n\n          case 10:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3\n            /*break*/\n            , 16];\n\n          case 11:\n            _e.trys.push([11,, 14, 15]);\n\n            if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3\n            /*break*/\n            , 13];\n            return [4\n            /*yield*/\n            , _b.call(records_1)];\n\n          case 12:\n            _e.sent();\n\n            _e.label = 13;\n\n          case 13:\n            return [3\n            /*break*/\n            , 15];\n\n          case 14:\n            if (e_4) throw e_4.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 16:\n            return [3\n            /*break*/\n            , 32];\n\n          case 17:\n            _e.trys.push([17, 23, 24, 29]);\n\n            records_2 = __asyncValues(records);\n            _e.label = 18;\n\n          case 18:\n            return [4\n            /*yield*/\n            , records_2.next()];\n\n          case 19:\n            if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3\n            /*break*/\n            , 22];\n            recordItem = records_2_1.value;\n            if (!recordItem[targetName]) return [3\n            /*break*/\n            , 21];\n            return [4\n            /*yield*/\n            , this._get(store, recordItem[targetName])];\n\n          case 20:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            delete recordItem[targetName];\n            _e.label = 21;\n\n          case 21:\n            return [3\n            /*break*/\n            , 18];\n\n          case 22:\n            return [3\n            /*break*/\n            , 29];\n\n          case 23:\n            e_5_1 = _e.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3\n            /*break*/\n            , 29];\n\n          case 24:\n            _e.trys.push([24,, 27, 28]);\n\n            if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3\n            /*break*/\n            , 26];\n            return [4\n            /*yield*/\n            , _c.call(records_2)];\n\n          case 25:\n            _e.sent();\n\n            _e.label = 26;\n\n          case 26:\n            return [3\n            /*break*/\n            , 28];\n\n          case 27:\n            if (e_5) throw e_5.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 28:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 29:\n            return [3\n            /*break*/\n            , 32];\n\n          case 30:\n            // TODO: Lazy loading\n            return [3\n            /*break*/\n            , 32];\n\n          case 31:\n            exhaustiveCheck(relation.relationType);\n            return [3\n            /*break*/\n            , 32];\n\n          case 32:\n            return [3\n            /*break*/\n            , 2];\n\n          case 33:\n            return [3\n            /*break*/\n            , 40];\n\n          case 34:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3\n            /*break*/\n            , 40];\n\n          case 35:\n            _e.trys.push([35,, 38, 39]);\n\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3\n            /*break*/\n            , 37];\n            return [4\n            /*yield*/\n            , _a.call(relations_1)];\n\n          case 36:\n            _e.sent();\n\n            _e.label = 37;\n\n          case 37:\n            return [3\n            /*break*/\n            , 39];\n\n          case 38:\n            if (e_3) throw e_3.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 39:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 40:\n            return [2\n            /*return*/\n            , records.map(function (record) {\n              return _this.modelInstanceCreator(modelConstructor, record);\n            })];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, queryById, hasSort, hasPagination, records;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n            queryById = predicates && this.idFromPredicate(predicates);\n            hasSort = pagination && pagination.sort;\n            hasPagination = pagination && pagination.limit;\n            return [4\n            /*yield*/\n            , function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryById) return [3\n                      /*break*/\n                      , 2];\n                      return [4\n                      /*yield*/\n                      , this.getById(storeName, queryById)];\n\n                    case 1:\n                      record = _a.sent();\n                      return [2\n                      /*return*/\n                      , record ? [record] : []];\n\n                    case 2:\n                      if (!predicates) return [3\n                      /*break*/\n                      , 4];\n                      return [4\n                      /*yield*/\n                      , this.filterOnPredicate(storeName, predicates)];\n\n                    case 3:\n                      filtered = _a.sent();\n                      return [2\n                      /*return*/\n                      , this.inMemoryPagination(filtered, pagination)];\n\n                    case 4:\n                      if (!hasSort) return [3\n                      /*break*/\n                      , 6];\n                      return [4\n                      /*yield*/\n                      , this.getAll(storeName)];\n\n                    case 5:\n                      all = _a.sent();\n                      return [2\n                      /*return*/\n                      , this.inMemoryPagination(all, pagination)];\n\n                    case 6:\n                      if (hasPagination) {\n                        return [2\n                        /*return*/\n                        , this.enginePagination(storeName, pagination)];\n                      }\n\n                      return [2\n                      /*return*/\n                      , this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n\n          case 2:\n            records = _a.sent();\n            return [4\n            /*yield*/\n            , this.load(namespaceName, modelConstructor.name, records)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getById = function (storeName, id) {\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._get(storeName, id)];\n\n          case 1:\n            record = _a.sent();\n            return [2\n            /*return*/\n            , record];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.idFromPredicate = function (predicates) {\n    var predicateObjs = predicates.predicates;\n    var idPredicate = predicateObjs.length === 1 && predicateObjs.find(function (p) {\n      return isPredicateObj(p) && p.field === 'id' && p.operator === 'eq';\n    });\n    return idPredicate && idPredicate.operand;\n  };\n\n  IndexedDBAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, all, filtered;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4\n            /*yield*/\n            , this.getAll(storeName)];\n\n          case 1:\n            all = _a.sent();\n            filtered = predicateObjs ? all.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : all;\n            return [2\n            /*return*/\n            , filtered];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    if (pagination && records.length > 1) {\n      if (pagination.sort) {\n        var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n\n        if (sortPredicates.length) {\n          var compareFn = sortCompareFunction(sortPredicates);\n          records.sort(compareFn);\n        }\n      }\n\n      var _a = pagination.page,\n          page = _a === void 0 ? 0 : _a,\n          _b = pagination.limit,\n          limit = _b === void 0 ? 0 : _b;\n      var start = Math.max(0, page * limit) || 0;\n      var end = limit > 0 ? start + limit : records.length;\n      return records.slice(start, end);\n    }\n\n    return records;\n  };\n\n  IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!pagination) return [3\n            /*break*/\n            , 7];\n            _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            initialRecord = Math.max(0, page * limit) || 0;\n            return [4\n            /*yield*/\n            , this.db.transaction(storeName).objectStore(storeName).openCursor()];\n\n          case 1:\n            cursor = _c.sent();\n            if (!(cursor && initialRecord > 0)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , cursor.advance(initialRecord)];\n\n          case 2:\n            _c.sent();\n\n            _c.label = 3;\n\n          case 3:\n            pageResults = [];\n            hasLimit = typeof limit === 'number' && limit > 0;\n            _c.label = 4;\n\n          case 4:\n            if (!(cursor && cursor.value)) return [3\n            /*break*/\n            , 6];\n            pageResults.push(cursor.value);\n\n            if (hasLimit && pageResults.length === limit) {\n              return [3\n              /*break*/\n              , 6];\n            }\n\n            return [4\n            /*yield*/\n            , cursor.continue()];\n\n          case 5:\n            cursor = _c.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 6:\n            result = pageResults;\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 8:\n            result = _c.sent();\n            _c.label = 9;\n\n          case 9:\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, cursor, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4\n            /*yield*/\n            , this.db.transaction([storeName], 'readonly').objectStore(storeName).openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];\n\n          case 2:\n            cursor = _a.sent();\n            result = cursor ? cursor.value : undefined;\n            return [2\n            /*return*/\n            , result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, storeName, models, relations, deletedModels, deletedModels, model, modelConstructor, nameSpace, storeName, tx, store, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3\n            /*break*/\n            , 9];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4\n            /*yield*/\n            , this.query(modelConstructor, condition)];\n\n          case 2:\n            models = _a.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 3:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 4:\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [models, deletedModels]];\n\n          case 5:\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 6:\n            _a.sent(); // Delete all\n\n\n            return [4\n            /*yield*/\n            , this.db.transaction([storeName], 'readwrite').objectStore(storeName).clear()];\n\n          case 7:\n            // Delete all\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [models, deletedModels]];\n\n          case 8:\n            return [3\n            /*break*/\n            , 17];\n\n          case 9:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3\n            /*break*/\n            , 13];\n            tx = this.db.transaction([storeName], 'readwrite');\n            store = tx.objectStore(storeName);\n            return [4\n            /*yield*/\n            , this._get(store, model.id)];\n\n          case 10:\n            fromDB = _a.sent();\n\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2\n              /*return*/\n              , [[model], []]];\n            }\n\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            predicateObjs = predicates.predicates, type = predicates.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n\n            return [4\n            /*yield*/\n            , tx.done];\n\n          case 11:\n            _a.sent();\n\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 12:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 15];\n\n          case 13:\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 14:\n            _a.sent();\n\n            _a.label = 15;\n\n          case 15:\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 16:\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [[model], deletedModels]];\n\n          case 17:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {\n    var deleteQueue_1, deleteQueue_1_1;\n\n    var e_6, _a, e_7, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var connectionStoreNames, tx, deleteItem, storeName, items, store, items_1, items_1_1, item, key, e_7_1, e_6_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            connectionStoreNames = deleteQueue.map(function (_a) {\n              var storeName = _a.storeName;\n              return storeName;\n            });\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readwrite');\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 22, 23, 28]);\n\n            deleteQueue_1 = __asyncValues(deleteQueue);\n            _c.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , deleteQueue_1.next()];\n\n          case 3:\n            if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3\n            /*break*/\n            , 21];\n            deleteItem = deleteQueue_1_1.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            store = tx.objectStore(storeName);\n            _c.label = 4;\n\n          case 4:\n            _c.trys.push([4, 14, 15, 20]);\n\n            items_1 = __asyncValues(items);\n            _c.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , items_1.next()];\n\n          case 6:\n            if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3\n            /*break*/\n            , 13];\n            item = items_1_1.value;\n            if (!item) return [3\n            /*break*/\n            , 12];\n            key = void 0;\n            if (!(typeof item === 'object')) return [3\n            /*break*/\n            , 8];\n            return [4\n            /*yield*/\n            , store.index('byId').getKey(item['id'])];\n\n          case 7:\n            key = _c.sent();\n            return [3\n            /*break*/\n            , 10];\n\n          case 8:\n            return [4\n            /*yield*/\n            , store.index('byId').getKey(item.toString())];\n\n          case 9:\n            key = _c.sent();\n            _c.label = 10;\n\n          case 10:\n            if (!(key !== undefined)) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , store.delete(key)];\n\n          case 11:\n            _c.sent();\n\n            _c.label = 12;\n\n          case 12:\n            return [3\n            /*break*/\n            , 5];\n\n          case 13:\n            return [3\n            /*break*/\n            , 20];\n\n          case 14:\n            e_7_1 = _c.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3\n            /*break*/\n            , 20];\n\n          case 15:\n            _c.trys.push([15,, 18, 19]);\n\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3\n            /*break*/\n            , 17];\n            return [4\n            /*yield*/\n            , _b.call(items_1)];\n\n          case 16:\n            _c.sent();\n\n            _c.label = 17;\n\n          case 17:\n            return [3\n            /*break*/\n            , 19];\n\n          case 18:\n            if (e_7) throw e_7.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 19:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 20:\n            return [3\n            /*break*/\n            , 2];\n\n          case 21:\n            return [3\n            /*break*/\n            , 28];\n\n          case 22:\n            e_6_1 = _c.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3\n            /*break*/\n            , 28];\n\n          case 23:\n            _c.trys.push([23,, 26, 27]);\n\n            if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3\n            /*break*/\n            , 25];\n            return [4\n            /*yield*/\n            , _a.call(deleteQueue_1)];\n\n          case 24:\n            _c.sent();\n\n            _c.label = 25;\n\n          case 25:\n            return [3\n            /*break*/\n            , 27];\n\n          case 26:\n            if (e_6) throw e_6.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 27:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 28:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n\n    var e_8, _a, e_9, _b, e_10, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, fieldName, modelName, targetName, storeName, index, _d, model, hasOneIndex, hasOneCustomField, value, recordToDelete, e_9_1, model, childrenArray, e_10_1, e_8_1;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 35, 36, 41]);\n\n            relations_2 = __asyncValues(relations);\n            _e.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , relations_2.next()];\n\n          case 2:\n            if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3\n            /*break*/\n            , 34];\n            rel = relations_2_1.value;\n            relationType = rel.relationType, fieldName = rel.fieldName, modelName = rel.modelName, targetName = rel.targetName;\n            storeName = this.getStorename(nameSpace, modelName);\n            index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel) || // if we were unable to find an index via relationTypes\n            // i.e. for keyName connections, attempt to find one by the\n            // associatedWith property\n            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, rel.associatedWith);\n            _d = relationType;\n\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3\n                /*break*/\n                , 3];\n\n              case 'HAS_MANY':\n                return [3\n                /*break*/\n                , 17];\n\n              case 'BELONGS_TO':\n                return [3\n                /*break*/\n                , 31];\n            }\n\n            return [3\n            /*break*/\n            , 32];\n\n          case 3:\n            _e.trys.push([3, 10, 11, 16]);\n\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , models_1.next()];\n\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3\n            /*break*/\n            , 9];\n            model = models_1_1.value;\n            hasOneIndex = index || 'byId';\n            hasOneCustomField = targetName in model;\n            value = hasOneCustomField ? model[targetName] : model.id;\n            if (!value) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(hasOneIndex).get(value)];\n\n          case 6:\n            recordToDelete = _e.sent();\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n\n          case 7:\n            _e.sent();\n\n            _e.label = 8;\n\n          case 8:\n            return [3\n            /*break*/\n            , 4];\n\n          case 9:\n            return [3\n            /*break*/\n            , 16];\n\n          case 10:\n            e_9_1 = _e.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3\n            /*break*/\n            , 16];\n\n          case 11:\n            _e.trys.push([11,, 14, 15]);\n\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3\n            /*break*/\n            , 13];\n            return [4\n            /*yield*/\n            , _b.call(models_1)];\n\n          case 12:\n            _e.sent();\n\n            _e.label = 13;\n\n          case 13:\n            return [3\n            /*break*/\n            , 15];\n\n          case 14:\n            if (e_9) throw e_9.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 16:\n            return [3\n            /*break*/\n            , 33];\n\n          case 17:\n            _e.trys.push([17, 24, 25, 30]);\n\n            models_2 = __asyncValues(models);\n            _e.label = 18;\n\n          case 18:\n            return [4\n            /*yield*/\n            , models_2.next()];\n\n          case 19:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3\n            /*break*/\n            , 23];\n            model = models_2_1.value;\n            return [4\n            /*yield*/\n            , this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).getAll(model['id'])];\n\n          case 20:\n            childrenArray = _e.sent();\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n\n          case 21:\n            _e.sent();\n\n            _e.label = 22;\n\n          case 22:\n            return [3\n            /*break*/\n            , 18];\n\n          case 23:\n            return [3\n            /*break*/\n            , 30];\n\n          case 24:\n            e_10_1 = _e.sent();\n            e_10 = {\n              error: e_10_1\n            };\n            return [3\n            /*break*/\n            , 30];\n\n          case 25:\n            _e.trys.push([25,, 28, 29]);\n\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3\n            /*break*/\n            , 27];\n            return [4\n            /*yield*/\n            , _c.call(models_2)];\n\n          case 26:\n            _e.sent();\n\n            _e.label = 27;\n\n          case 27:\n            return [3\n            /*break*/\n            , 29];\n\n          case 28:\n            if (e_10) throw e_10.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 29:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 30:\n            return [3\n            /*break*/\n            , 33];\n\n          case 31:\n            // Intentionally blank\n            return [3\n            /*break*/\n            , 33];\n\n          case 32:\n            exhaustiveCheck(relationType);\n            return [3\n            /*break*/\n            , 33];\n\n          case 33:\n            return [3\n            /*break*/\n            , 1];\n\n          case 34:\n            return [3\n            /*break*/\n            , 41];\n\n          case 35:\n            e_8_1 = _e.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3\n            /*break*/\n            , 41];\n\n          case 36:\n            _e.trys.push([36,, 39, 40]);\n\n            if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3\n            /*break*/\n            , 38];\n            return [4\n            /*yield*/\n            , _a.call(relations_2)];\n\n          case 37:\n            _e.sent();\n\n            _e.label = 38;\n\n          case 38:\n            return [3\n            /*break*/\n            , 40];\n\n          case 39:\n            if (e_8) throw e_8.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 40:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 41:\n            deleteQueue.push({\n              storeName: this.getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            this.db.close();\n            return [4\n            /*yield*/\n            , idb.deleteDB(this.dbName)];\n\n          case 2:\n            _a.sent();\n\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, storeName, txn, store, _loop_1, this_1, items_2, items_2_1, item, e_11_1;\n\n      var e_11, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2\n              /*return*/\n              , []];\n            }\n\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _b.sent();\n\n            result = [];\n            storeName = this.getStorenameForModel(modelConstructor);\n            txn = this.db.transaction(storeName, 'readwrite');\n            store = txn.store;\n\n            _loop_1 = function (item) {\n              var connectedModels, id, _deleted, index, key, instance;\n\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    connectedModels = traverseModel(modelConstructor.name, this_1.modelInstanceCreator(modelConstructor, item), this_1.schema.namespaces[this_1.namespaceResolver(modelConstructor)], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n                    id = item.id, _deleted = item._deleted;\n                    index = store.index('byId');\n                    return [4\n                    /*yield*/\n                    , index.getKey(id)];\n\n                  case 1:\n                    key = _a.sent();\n                    if (!!_deleted) return [3\n                    /*break*/\n                    , 3];\n                    instance = connectedModels.find(function (_a) {\n                      var instance = _a.instance;\n                      return instance.id === id;\n                    }).instance;\n                    result.push([instance, key ? OpType.UPDATE : OpType.INSERT]);\n                    return [4\n                    /*yield*/\n                    , store.put(instance, key)];\n\n                  case 2:\n                    _a.sent();\n\n                    return [3\n                    /*break*/\n                    , 5];\n\n                  case 3:\n                    result.push([item, OpType.DELETE]);\n                    if (!key) return [3\n                    /*break*/\n                    , 5];\n                    return [4\n                    /*yield*/\n                    , store.delete(key)];\n\n                  case 4:\n                    _a.sent();\n\n                    _a.label = 5;\n\n                  case 5:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2, 7, 8, 9]);\n\n            items_2 = __values(items), items_2_1 = items_2.next();\n            _b.label = 3;\n\n          case 3:\n            if (!!items_2_1.done) return [3\n            /*break*/\n            , 6];\n            item = items_2_1.value;\n            return [5\n            /*yield**/\n            , _loop_1(item)];\n\n          case 4:\n            _b.sent();\n\n            _b.label = 5;\n\n          case 5:\n            items_2_1 = items_2.next();\n            return [3\n            /*break*/\n            , 3];\n\n          case 6:\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            e_11_1 = _b.sent();\n            e_11 = {\n              error: e_11_1\n            };\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            try {\n              if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n            } finally {\n              if (e_11) throw e_11.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 9:\n            return [4\n            /*yield*/\n            , txn.done];\n\n          case 10:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  return IndexedDBAdapter;\n}();\n\nexport default new IndexedDBAdapter();","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","idb","ModelPredicateCreator","ModelSortPredicateCreator","isPredicateObj","OpType","QueryOne","exhaustiveCheck","getIndex","getIndexFromAssociation","isModelConstructor","isPrivateMode","traverseModel","validatePredicate","sortCompareFunction","logger","DB_NAME","IndexedDBAdapter","then","isPrivate","_a","error","Promise","reject","resolve","modelConstructor","namespace","namespaceResolver","getStorename","modelName","storeName","theSchema","modelInstanceCreator","getModelConstructorByModelName","sessionId","checkPrivate","_b","initPromise","res","rej","_this","dbName","schema","db","VERSION","openDB","upgrade","oldVersion","newVersion","txn","Object","keys","namespaces","forEach","namespaceName","models","store","createObjectStore","autoIncrement","indexes","relationships","createIndex","index","unique","objectStoreNames","origStore","objectStore","tmpName","name","newStore","keyPath","undefined","openCursor","cursor","_d","count","value","put","continue","deleteObjectStore","debug","error_2","abort","error_1","storeOrStoreName","id","transaction","get","result","model","condition","getPrototypeOf","constructor","getStorenameForModel","connectedModels","set","Set","connectionStoreNames","values","map","item","instance","add","tx","__spread","Array","from","_get","fromDB","predicates","getPredicates","predicateObjs","type","isValid","msg","Error","connectionStoreNames_1","resItem","storeName_1","store_1","fromDB_1","opType","INSERT","UPDATE","getKey","key","push","done","srcModelName","records","relations","relationTypes","length","record","relations_1","relation","fieldName","targetName","modelConstructor_1","relationType","records_1","recordItem","getByfield","connectionRecord","_e","records_2","predicate","pagination","queryById","idFromPredicate","hasSort","sort","hasPagination","limit","getById","filterOnPredicate","filtered","inMemoryPagination","getAll","all","enginePagination","load","idPredicate","find","p","field","operator","operand","filter","m","sortPredicates","compareFn","start","Math","max","page","end","slice","initialRecord","_c","advance","pageResults","hasLimit","firstOrLast","FIRST","modelOrModelConstructor","deleteQueue","nameSpace","query","deleteTraverse","deleteItem","deletedModels","reduce","acc","items","concat","clear","warn","deleteQueue_1","items_1","toString","delete","srcModel","relations_2","rel","associatedWith","models_1","hasOneIndex","hasOneCustomField","recordToDelete","models_2","childrenArray","close","deleteDB","this_1","_deleted","DELETE","items_2","items_2_1"],"sources":["/Users/richards/node_modules/@aws-amplify/datastore/src/storage/adapter/IndexedDBAdapter.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelInstanceCreator } from '../../datastore/datastore';\nimport {\n\tModelPredicateCreator,\n\tModelSortPredicateCreator,\n} from '../../predicates';\nimport {\n\tInternalSchema,\n\tisPredicateObj,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tNamespaceResolver,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicateObject,\n\tPredicatesGroup,\n\tQueryOne,\n\tRelationType,\n} from '../../types';\nimport {\n\texhaustiveCheck,\n\tgetIndex,\n\tgetIndexFromAssociation,\n\tisModelConstructor,\n\tisPrivateMode,\n\ttraverseModel,\n\tvalidatePredicate,\n\tsortCompareFunction,\n} from '../../util';\nimport { Adapter } from './index';\n\nconst logger = new Logger('DataStore');\n\nconst DB_NAME = 'amplify-datastore';\n\nclass IndexedDBAdapter implements Adapter {\n\tprivate schema: InternalSchema;\n\tprivate namespaceResolver: NamespaceResolver;\n\tprivate modelInstanceCreator: ModelInstanceCreator;\n\tprivate getModelConstructorByModelName: (\n\t\tnamsespaceName: string,\n\t\tmodelName: string\n\t) => PersistentModelConstructor<any>;\n\tprivate db: idb.IDBPDatabase;\n\tprivate initPromise: Promise<void>;\n\tprivate resolve: (value?: any) => void;\n\tprivate reject: (value?: any) => void;\n\tprivate dbName: string = DB_NAME;\n\n\tprivate async checkPrivate() {\n\t\tconst isPrivate = await isPrivateMode().then(isPrivate => {\n\t\t\treturn isPrivate;\n\t\t});\n\t\tif (isPrivate) {\n\t\t\tlogger.error(\"IndexedDB not supported in this browser's private mode\");\n\t\t\treturn Promise.reject(\n\t\t\t\t\"IndexedDB not supported in this browser's private mode\"\n\t\t\t);\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\tprivate getStorenameForModel(\n\t\tmodelConstructor: PersistentModelConstructor<any>\n\t) {\n\t\tconst namespace = this.namespaceResolver(modelConstructor);\n\t\tconst { name: modelName } = modelConstructor;\n\n\t\treturn this.getStorename(namespace, modelName);\n\t}\n\n\tprivate getStorename(namespace: string, modelName: string) {\n\t\tconst storeName = `${namespace}_${modelName}`;\n\n\t\treturn storeName;\n\t}\n\n\tasync setUp(\n\t\ttheSchema: InternalSchema,\n\t\tnamespaceResolver: NamespaceResolver,\n\t\tmodelInstanceCreator: ModelInstanceCreator,\n\t\tgetModelConstructorByModelName: (\n\t\t\tnamsespaceName: string,\n\t\t\tmodelName: string\n\t\t) => PersistentModelConstructor<any>,\n\t\tsessionId?: string\n\t) {\n\t\tawait this.checkPrivate();\n\t\tif (!this.initPromise) {\n\t\t\tthis.initPromise = new Promise((res, rej) => {\n\t\t\t\tthis.resolve = res;\n\t\t\t\tthis.reject = rej;\n\t\t\t});\n\t\t} else {\n\t\t\tawait this.initPromise;\n\t\t}\n\t\tif (sessionId) {\n\t\t\tthis.dbName = `${DB_NAME}-${sessionId}`;\n\t\t}\n\t\tthis.schema = theSchema;\n\t\tthis.namespaceResolver = namespaceResolver;\n\t\tthis.modelInstanceCreator = modelInstanceCreator;\n\t\tthis.getModelConstructorByModelName = getModelConstructorByModelName;\n\n\t\ttry {\n\t\t\tif (!this.db) {\n\t\t\t\tconst VERSION = 2;\n\t\t\t\tthis.db = await idb.openDB(this.dbName, VERSION, {\n\t\t\t\t\tupgrade: async (db, oldVersion, newVersion, txn) => {\n\t\t\t\t\t\tif (oldVersion === 0) {\n\t\t\t\t\t\t\tObject.keys(theSchema.namespaces).forEach(namespaceName => {\n\t\t\t\t\t\t\t\tconst namespace = theSchema.namespaces[namespaceName];\n\n\t\t\t\t\t\t\t\tObject.keys(namespace.models).forEach(modelName => {\n\t\t\t\t\t\t\t\t\tconst storeName = this.getStorename(namespaceName, modelName);\n\t\t\t\t\t\t\t\t\tconst store = db.createObjectStore(storeName, {\n\t\t\t\t\t\t\t\t\t\tautoIncrement: true,\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\tconst indexes =\n\t\t\t\t\t\t\t\t\t\tthis.schema.namespaces[namespaceName].relationships[\n\t\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t\t].indexes;\n\t\t\t\t\t\t\t\t\tindexes.forEach(index => store.createIndex(index, index));\n\n\t\t\t\t\t\t\t\t\tstore.createIndex('byId', 'id', { unique: true });\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (oldVersion === 1 && newVersion === 2) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tfor (const storeName of txn.objectStoreNames) {\n\t\t\t\t\t\t\t\t\tconst origStore = txn.objectStore(storeName);\n\n\t\t\t\t\t\t\t\t\t// rename original store\n\t\t\t\t\t\t\t\t\tconst tmpName = `tmp_${storeName}`;\n\t\t\t\t\t\t\t\t\torigStore.name = tmpName;\n\n\t\t\t\t\t\t\t\t\t// create new store with original name\n\t\t\t\t\t\t\t\t\tconst newStore = db.createObjectStore(storeName, {\n\t\t\t\t\t\t\t\t\t\tkeyPath: undefined,\n\t\t\t\t\t\t\t\t\t\tautoIncrement: true,\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\tnewStore.createIndex('byId', 'id', { unique: true });\n\n\t\t\t\t\t\t\t\t\tlet cursor = await origStore.openCursor();\n\t\t\t\t\t\t\t\t\tlet count = 0;\n\n\t\t\t\t\t\t\t\t\t// Copy data from original to new\n\t\t\t\t\t\t\t\t\twhile (cursor && cursor.value) {\n\t\t\t\t\t\t\t\t\t\t// we don't pass key, since they are all new entries in the new store\n\t\t\t\t\t\t\t\t\t\tawait newStore.put(cursor.value);\n\n\t\t\t\t\t\t\t\t\t\tcursor = await cursor.continue();\n\t\t\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// delete original\n\t\t\t\t\t\t\t\t\tdb.deleteObjectStore(tmpName);\n\n\t\t\t\t\t\t\t\t\tlogger.debug(`${count} ${storeName} records migrated`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tlogger.error('Error migrating IndexedDB data', error);\n\t\t\t\t\t\t\t\ttxn.abort();\n\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.resolve();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.reject(error);\n\t\t}\n\t}\n\n\tprivate async _get<T>(\n\t\tstoreOrStoreName: idb.IDBPObjectStore | string,\n\t\tid: string\n\t): Promise<T> {\n\t\tlet index: idb.IDBPIndex;\n\n\t\tif (typeof storeOrStoreName === 'string') {\n\t\t\tconst storeName = storeOrStoreName;\n\t\t\tindex = this.db.transaction(storeName, 'readonly').store.index('byId');\n\t\t} else {\n\t\t\tconst store = storeOrStoreName;\n\t\t\tindex = store.index('byId');\n\t\t}\n\n\t\tconst result = await index.get(id);\n\n\t\treturn result;\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T, OpType.INSERT | OpType.UPDATE][]> {\n\t\tawait this.checkPrivate();\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst connectedModels = traverseModel(\n\t\t\tmodelConstructor.name,\n\t\t\tmodel,\n\t\t\tthis.schema.namespaces[this.namespaceResolver(modelConstructor)],\n\t\t\tthis.modelInstanceCreator,\n\t\t\tthis.getModelConstructorByModelName\n\t\t);\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst set = new Set<string>();\n\t\tconst connectionStoreNames = Object.values(connectedModels).map(\n\t\t\t({ modelName, item, instance }) => {\n\t\t\t\tconst storeName = this.getStorename(namespaceName, modelName);\n\t\t\t\tset.add(storeName);\n\t\t\t\treturn { storeName, item, instance };\n\t\t\t}\n\t\t);\n\t\tconst tx = this.db.transaction(\n\t\t\t[storeName, ...Array.from(set.values())],\n\t\t\t'readwrite'\n\t\t);\n\t\tconst store = tx.objectStore(storeName);\n\n\t\tconst fromDB = await this._get(store, model.id);\n\n\t\tif (condition && fromDB) {\n\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\t\tconst isValid = validatePredicate(fromDB, type, predicateObjs);\n\n\t\t\tif (!isValid) {\n\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t}\n\n\t\tconst result: [T, OpType.INSERT | OpType.UPDATE][] = [];\n\n\t\tfor await (const resItem of connectionStoreNames) {\n\t\t\tconst { storeName, item, instance } = resItem;\n\t\t\tconst store = tx.objectStore(storeName);\n\t\t\tconst { id } = item;\n\n\t\t\tconst fromDB = <T>await this._get(store, id);\n\t\t\tconst opType: OpType =\n\t\t\t\tfromDB === undefined ? OpType.INSERT : OpType.UPDATE;\n\n\t\t\t// Even if the parent is an INSERT, the child might not be, so we need to get its key\n\t\t\tif (id === model.id || opType === OpType.INSERT) {\n\t\t\t\tconst key = await store.index('byId').getKey(item.id);\n\t\t\t\tawait store.put(item, key);\n\n\t\t\t\tresult.push([instance, opType]);\n\t\t\t}\n\t\t}\n\n\t\tawait tx.done;\n\n\t\treturn result;\n\t}\n\n\tprivate async load<T>(\n\t\tnamespaceName: string,\n\t\tsrcModelName: string,\n\t\trecords: T[]\n\t): Promise<T[]> {\n\t\tconst namespace = this.schema.namespaces[namespaceName];\n\t\tconst relations = namespace.relationships[srcModelName].relationTypes;\n\t\tconst connectionStoreNames = relations.map(({ modelName }) => {\n\t\t\treturn this.getStorename(namespaceName, modelName);\n\t\t});\n\t\tconst modelConstructor = this.getModelConstructorByModelName(\n\t\t\tnamespaceName,\n\t\t\tsrcModelName\n\t\t);\n\n\t\tif (connectionStoreNames.length === 0) {\n\t\t\treturn records.map(record =>\n\t\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t\t);\n\t\t}\n\n\t\tconst tx = this.db.transaction([...connectionStoreNames], 'readonly');\n\n\t\tfor await (const relation of relations) {\n\t\t\tconst { fieldName, modelName, targetName } = relation;\n\t\t\tconst storeName = this.getStorename(namespaceName, modelName);\n\t\t\tconst store = tx.objectStore(storeName);\n\t\t\tconst modelConstructor = this.getModelConstructorByModelName(\n\t\t\t\tnamespaceName,\n\t\t\t\tmodelName\n\t\t\t);\n\n\t\t\tswitch (relation.relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tfor await (const recordItem of records) {\n\t\t\t\t\t\tconst getByfield = recordItem[targetName] ? targetName : fieldName;\n\t\t\t\t\t\tif (!recordItem[getByfield]) break;\n\n\t\t\t\t\t\tconst connectionRecord = await this._get(\n\t\t\t\t\t\t\tstore,\n\t\t\t\t\t\t\trecordItem[getByfield]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\trecordItem[fieldName] =\n\t\t\t\t\t\t\tconnectionRecord &&\n\t\t\t\t\t\t\tthis.modelInstanceCreator(modelConstructor, connectionRecord);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\tfor await (const recordItem of records) {\n\t\t\t\t\t\tif (recordItem[targetName]) {\n\t\t\t\t\t\t\tconst connectionRecord = await this._get(\n\t\t\t\t\t\t\t\tstore,\n\t\t\t\t\t\t\t\trecordItem[targetName]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\trecordItem[fieldName] =\n\t\t\t\t\t\t\t\tconnectionRecord &&\n\t\t\t\t\t\t\t\tthis.modelInstanceCreator(modelConstructor, connectionRecord);\n\t\t\t\t\t\t\tdelete recordItem[targetName];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\t// TODO: Lazy loading\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\texhaustiveCheck(relation.relationType);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn records.map(record =>\n\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t);\n\t}\n\n\tasync query<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tawait this.checkPrivate();\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst predicates =\n\t\t\tpredicate && ModelPredicateCreator.getPredicates(predicate);\n\t\tconst queryById = predicates && this.idFromPredicate(predicates);\n\t\tconst hasSort = pagination && pagination.sort;\n\t\tconst hasPagination = pagination && pagination.limit;\n\n\t\tconst records: T[] = await (async () => {\n\t\t\tif (queryById) {\n\t\t\t\tconst record = await this.getById(storeName, queryById);\n\t\t\t\treturn record ? [record] : [];\n\t\t\t}\n\n\t\t\tif (predicates) {\n\t\t\t\tconst filtered = await this.filterOnPredicate(storeName, predicates);\n\t\t\t\treturn this.inMemoryPagination(filtered, pagination);\n\t\t\t}\n\n\t\t\tif (hasSort) {\n\t\t\t\tconst all = await this.getAll(storeName);\n\t\t\t\treturn this.inMemoryPagination(all, pagination);\n\t\t\t}\n\n\t\t\tif (hasPagination) {\n\t\t\t\treturn this.enginePagination(storeName, pagination);\n\t\t\t}\n\n\t\t\treturn this.getAll(storeName);\n\t\t})();\n\n\t\treturn await this.load(namespaceName, modelConstructor.name, records);\n\t}\n\n\tprivate async getById<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tid: string\n\t): Promise<T> {\n\t\tconst record = <T>await this._get(storeName, id);\n\t\treturn record;\n\t}\n\n\tprivate async getAll<T extends PersistentModel>(\n\t\tstoreName: string\n\t): Promise<T[]> {\n\t\treturn await this.db.getAll(storeName);\n\t}\n\n\tprivate idFromPredicate<T extends PersistentModel>(\n\t\tpredicates: PredicatesGroup<T>\n\t) {\n\t\tconst { predicates: predicateObjs } = predicates;\n\t\tconst idPredicate =\n\t\t\tpredicateObjs.length === 1 &&\n\t\t\t(predicateObjs.find(\n\t\t\t\tp => isPredicateObj(p) && p.field === 'id' && p.operator === 'eq'\n\t\t\t) as PredicateObject<T>);\n\n\t\treturn idPredicate && idPredicate.operand;\n\t}\n\n\tprivate async filterOnPredicate<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpredicates: PredicatesGroup<T>\n\t) {\n\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\tconst all = <T[]>await this.getAll(storeName);\n\n\t\tconst filtered = predicateObjs\n\t\t\t? all.filter(m => validatePredicate(m, type, predicateObjs))\n\t\t\t: all;\n\n\t\treturn filtered;\n\t}\n\n\tprivate inMemoryPagination<T extends PersistentModel>(\n\t\trecords: T[],\n\t\tpagination?: PaginationInput<T>\n\t): T[] {\n\t\tif (pagination && records.length > 1) {\n\t\t\tif (pagination.sort) {\n\t\t\t\tconst sortPredicates = ModelSortPredicateCreator.getPredicates(\n\t\t\t\t\tpagination.sort\n\t\t\t\t);\n\n\t\t\t\tif (sortPredicates.length) {\n\t\t\t\t\tconst compareFn = sortCompareFunction(sortPredicates);\n\t\t\t\t\trecords.sort(compareFn);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst { page = 0, limit = 0 } = pagination;\n\t\t\tconst start = Math.max(0, page * limit) || 0;\n\n\t\t\tconst end = limit > 0 ? start + limit : records.length;\n\n\t\t\treturn records.slice(start, end);\n\t\t}\n\t\treturn records;\n\t}\n\n\tprivate async enginePagination<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tlet result: T[];\n\n\t\tif (pagination) {\n\t\t\tconst { page = 0, limit = 0 } = pagination;\n\t\t\tconst initialRecord = Math.max(0, page * limit) || 0;\n\n\t\t\tlet cursor = await this.db\n\t\t\t\t.transaction(storeName)\n\t\t\t\t.objectStore(storeName)\n\t\t\t\t.openCursor();\n\n\t\t\tif (cursor && initialRecord > 0) {\n\t\t\t\tawait cursor.advance(initialRecord);\n\t\t\t}\n\n\t\t\tconst pageResults: T[] = [];\n\t\t\tconst hasLimit = typeof limit === 'number' && limit > 0;\n\n\t\t\twhile (cursor && cursor.value) {\n\t\t\t\tpageResults.push(cursor.value);\n\n\t\t\t\tif (hasLimit && pageResults.length === limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcursor = await cursor.continue();\n\t\t\t}\n\n\t\t\tresult = pageResults;\n\t\t} else {\n\t\t\tresult = <T[]>await this.db.getAll(storeName);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync queryOne<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tfirstOrLast: QueryOne = QueryOne.FIRST\n\t): Promise<T | undefined> {\n\t\tawait this.checkPrivate();\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst cursor = await this.db\n\t\t\t.transaction([storeName], 'readonly')\n\t\t\t.objectStore(storeName)\n\t\t\t.openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev');\n\n\t\tconst result = cursor ? <T>cursor.value : undefined;\n\n\t\treturn result && this.modelInstanceCreator(modelConstructor, result);\n\t}\n\n\tasync delete<T extends PersistentModel>(\n\t\tmodelOrModelConstructor: T | PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T[], T[]]> {\n\t\tawait this.checkPrivate();\n\t\tconst deleteQueue: { storeName: string; items: T[] }[] = [];\n\n\t\tif (isModelConstructor(modelOrModelConstructor)) {\n\t\t\tconst modelConstructor = modelOrModelConstructor;\n\t\t\tconst nameSpace = this.namespaceResolver(modelConstructor);\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tconst models = await this.query(modelConstructor, condition);\n\t\t\tconst relations =\n\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n\t\t\t\t\t.relationTypes;\n\n\t\t\tif (condition !== undefined) {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t} else {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\t// Delete all\n\t\t\t\tawait this.db\n\t\t\t\t\t.transaction([storeName], 'readwrite')\n\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t.clear();\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t}\n\t\t} else {\n\t\t\tconst model = modelOrModelConstructor;\n\n\t\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\t\tconst nameSpace = this.namespaceResolver(modelConstructor);\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tif (condition) {\n\t\t\t\tconst tx = this.db.transaction([storeName], 'readwrite');\n\t\t\t\tconst store = tx.objectStore(storeName);\n\n\t\t\t\tconst fromDB = await this._get(store, model.id);\n\n\t\t\t\tif (fromDB === undefined) {\n\t\t\t\t\tconst msg = 'Model instance not found in storage';\n\t\t\t\t\tlogger.warn(msg, { model });\n\n\t\t\t\t\treturn [[model], []];\n\t\t\t\t}\n\n\t\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\t\t\tconst isValid = validatePredicate(fromDB, type, predicateObjs);\n\n\t\t\t\tif (!isValid) {\n\t\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t\tawait tx.done;\n\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n\t\t\t\t\t\t.relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n\t\t\t\t\t\t.relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t<T[]>[]\n\t\t\t);\n\n\t\t\treturn [[model], deletedModels];\n\t\t}\n\t}\n\n\tprivate async deleteItem<T extends PersistentModel>(\n\t\tdeleteQueue?: { storeName: string; items: T[] | IDBValidKey[] }[]\n\t) {\n\t\tconst connectionStoreNames = deleteQueue.map(({ storeName }) => {\n\t\t\treturn storeName;\n\t\t});\n\n\t\tconst tx = this.db.transaction([...connectionStoreNames], 'readwrite');\n\t\tfor await (const deleteItem of deleteQueue) {\n\t\t\tconst { storeName, items } = deleteItem;\n\t\t\tconst store = tx.objectStore(storeName);\n\n\t\t\tfor await (const item of items) {\n\t\t\t\tif (item) {\n\t\t\t\t\tlet key: IDBValidKey;\n\n\t\t\t\t\tif (typeof item === 'object') {\n\t\t\t\t\t\tkey = await store.index('byId').getKey(item['id']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkey = await store.index('byId').getKey(item.toString());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (key !== undefined) {\n\t\t\t\t\t\tawait store.delete(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async deleteTraverse<T extends PersistentModel>(\n\t\trelations: RelationType[],\n\t\tmodels: T[],\n\t\tsrcModel: string,\n\t\tnameSpace: string,\n\t\tdeleteQueue: { storeName: string; items: T[] }[]\n\t): Promise<void> {\n\t\tfor await (const rel of relations) {\n\t\t\tconst { relationType, fieldName, modelName, targetName } = rel;\n\t\t\tconst storeName = this.getStorename(nameSpace, modelName);\n\n\t\t\tconst index: string =\n\t\t\t\tgetIndex(\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\tsrcModel\n\t\t\t\t) ||\n\t\t\t\t// if we were unable to find an index via relationTypes\n\t\t\t\t// i.e. for keyName connections, attempt to find one by the\n\t\t\t\t// associatedWith property\n\t\t\t\tgetIndexFromAssociation(\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName].indexes,\n\t\t\t\t\trel.associatedWith\n\t\t\t\t);\n\n\t\t\tswitch (relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tconst hasOneIndex = index || 'byId';\n\n\t\t\t\t\t\tconst hasOneCustomField = targetName in model;\n\t\t\t\t\t\tconst value = hasOneCustomField ? model[targetName] : model.id;\n\t\t\t\t\t\tif (!value) break;\n\n\t\t\t\t\t\tconst recordToDelete = <T>(\n\t\t\t\t\t\t\tawait this.db\n\t\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t\t.index(hasOneIndex)\n\t\t\t\t\t\t\t\t.get(value)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\trecordToDelete ? [recordToDelete] : [],\n\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tconst childrenArray = await this.db\n\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t.index(index)\n\t\t\t\t\t\t\t.getAll(model['id']);\n\n\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\tchildrenArray,\n\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\texhaustiveCheck(relationType);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tdeleteQueue.push({\n\t\t\tstoreName: this.getStorename(nameSpace, srcModel),\n\t\t\titems: models.map(record =>\n\t\t\t\tthis.modelInstanceCreator(\n\t\t\t\t\tthis.getModelConstructorByModelName(nameSpace, srcModel),\n\t\t\t\t\trecord\n\t\t\t\t)\n\t\t\t),\n\t\t});\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tawait this.checkPrivate();\n\n\t\tthis.db.close();\n\n\t\tawait idb.deleteDB(this.dbName);\n\n\t\tthis.db = undefined;\n\t\tthis.initPromise = undefined;\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<any>,\n\t\titems: ModelInstanceMetadata[]\n\t): Promise<[T, OpType][]> {\n\t\tif (items.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tawait this.checkPrivate();\n\n\t\tconst result: [T, OpType][] = [];\n\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst txn = this.db.transaction(storeName, 'readwrite');\n\t\tconst store = txn.store;\n\n\t\tfor (const item of items) {\n\t\t\tconst connectedModels = traverseModel(\n\t\t\t\tmodelConstructor.name,\n\t\t\t\tthis.modelInstanceCreator(modelConstructor, item),\n\t\t\t\tthis.schema.namespaces[this.namespaceResolver(modelConstructor)],\n\t\t\t\tthis.modelInstanceCreator,\n\t\t\t\tthis.getModelConstructorByModelName\n\t\t\t);\n\n\t\t\tconst { id, _deleted } = item;\n\t\t\tconst index = store.index('byId');\n\t\t\tconst key = await index.getKey(id);\n\n\t\t\tif (!_deleted) {\n\t\t\t\tconst { instance } = connectedModels.find(\n\t\t\t\t\t({ instance }) => instance.id === id\n\t\t\t\t);\n\n\t\t\t\tresult.push([\n\t\t\t\t\t<T>(<unknown>instance),\n\t\t\t\t\tkey ? OpType.UPDATE : OpType.INSERT,\n\t\t\t\t]);\n\t\t\t\tawait store.put(instance, key);\n\t\t\t} else {\n\t\t\t\tresult.push([<T>(<unknown>item), OpType.DELETE]);\n\n\t\t\t\tif (key) {\n\t\t\t\t\tawait store.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait txn.done;\n\n\t\treturn result;\n\t}\n}\n\nexport default new IndexedDBAdapter();\n"]},"metadata":{},"sourceType":"module"}