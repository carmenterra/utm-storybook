{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport API from '@aws-amplify/api';\nimport Observable from 'zen-observable-ts';\nimport { buildGraphQLOperation, getModelAuthModes, getClientSideAuthError, getForbiddenError, predicateToGraphQLFilter, getTokenForCustomAuth } from '../utils';\nimport { jitteredExponentialRetry, ConsoleLogger as Logger, Hub, NonRetryableError } from '@aws-amplify/core';\nimport { ModelPredicateCreator } from '../../predicates';\nvar opResultDefaults = {\n  items: [],\n  nextToken: null,\n  startedAt: null\n};\nvar logger = new Logger('DataStore');\n\nvar SyncProcessor =\n/** @class */\nfunction () {\n  function SyncProcessor(schema, syncPredicates, amplifyConfig, authModeStrategy) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    this.schema = schema;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.typeQuery = new WeakMap();\n    this.generateQueries();\n  }\n\n  SyncProcessor.prototype.generateQueries = function () {\n    var _this = this;\n\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var _a = __read(buildGraphQLOperation(namespace, model, 'LIST'), 1),\n            _b = __read(_a[0]),\n            opNameQuery = _b.slice(1);\n\n        _this.typeQuery.set(model, opNameQuery);\n      });\n    });\n  };\n\n  SyncProcessor.prototype.graphqlFilterFromPredicate = function (model) {\n    if (!this.syncPredicates) {\n      return null;\n    }\n\n    var predicatesGroup = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);\n\n    if (!predicatesGroup) {\n      return null;\n    }\n\n    return predicateToGraphQLFilter(predicatesGroup);\n  };\n\n  SyncProcessor.prototype.retrievePage = function (modelDefinition, lastSync, nextToken, limit, filter) {\n    if (limit === void 0) {\n      limit = null;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, opName, query, variables, modelAuthModes, readAuthModes, authModeAttempts, authModeRetry, data, _b, _c, opResult, items, newNextToken, startedAt;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = __read(this.typeQuery.get(modelDefinition), 2), opName = _a[0], query = _a[1];\n            variables = {\n              limit: limit,\n              nextToken: nextToken,\n              lastSync: lastSync,\n              filter: filter\n            };\n            return [4\n            /*yield*/\n            , getModelAuthModes({\n              authModeStrategy: this.authModeStrategy,\n              defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n              modelName: modelDefinition.name,\n              schema: this.schema\n            })];\n\n          case 1:\n            modelAuthModes = _d.sent();\n            readAuthModes = modelAuthModes.READ;\n            authModeAttempts = 0;\n\n            authModeRetry = function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_1, authMode;\n\n                var _a;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _b.trys.push([0, 2,, 4]);\n\n                      logger.debug(\"Attempting sync with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [4\n                      /*yield*/\n                      , this.jitteredRetry({\n                        query: query,\n                        variables: variables,\n                        opName: opName,\n                        modelDefinition: modelDefinition,\n                        authMode: readAuthModes[authModeAttempts]\n                      })];\n\n                    case 1:\n                      response = _b.sent();\n                      logger.debug(\"Sync successful with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [2\n                      /*return*/\n                      , response];\n\n                    case 2:\n                      error_1 = _b.sent();\n                      authModeAttempts++;\n\n                      if (authModeAttempts >= readAuthModes.length) {\n                        authMode = readAuthModes[authModeAttempts - 1];\n                        logger.debug(\"Sync failed with authMode: \" + authMode, error_1);\n\n                        if (getClientSideAuthError(error_1) || getForbiddenError(error_1)) {\n                          // return empty list of data so DataStore will continue to sync other models\n                          logger.warn(\"User is unauthorized to query \" + opName + \" with auth mode \" + authMode + \". No data could be returned.\");\n                          return [2\n                          /*return*/\n                          , {\n                            data: (_a = {}, _a[opName] = opResultDefaults, _a)\n                          }];\n                        }\n\n                        throw error_1;\n                      }\n\n                      logger.debug(\"Sync failed with authMode: \" + readAuthModes[authModeAttempts - 1] + \". Retrying with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [4\n                      /*yield*/\n                      , authModeRetry()];\n\n                    case 3:\n                      return [2\n                      /*return*/\n                      , _b.sent()];\n\n                    case 4:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            };\n\n            return [4\n            /*yield*/\n            , authModeRetry()];\n\n          case 2:\n            data = _d.sent().data;\n            _b = data, _c = opName, opResult = _b[_c];\n            items = opResult.items, newNextToken = opResult.nextToken, startedAt = opResult.startedAt;\n            return [2\n            /*return*/\n            , {\n              nextToken: newNextToken,\n              startedAt: startedAt,\n              items: items\n            }];\n        }\n      });\n    });\n  }; // Partial data private feature flag. Not a public API. This will be removed in a future release.\n\n\n  SyncProcessor.prototype.partialDataFeatureFlagEnabled = function () {\n    try {\n      var flag = sessionStorage.getItem('datastorePartialData');\n      return Boolean(flag);\n    } catch (e) {\n      return false;\n    }\n  };\n\n  SyncProcessor.prototype.jitteredRetry = function (_a) {\n    var query = _a.query,\n        variables = _a.variables,\n        opName = _a.opName,\n        modelDefinition = _a.modelDefinition,\n        authMode = _a.authMode;\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , jitteredExponentialRetry(function (query, variables) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var authToken, error_2, clientOrForbiddenErrorMessage, hasItems, result, unauthorized, result;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 3,, 4]);\n\n                      return [4\n                      /*yield*/\n                      , getTokenForCustomAuth(authMode, this.amplifyConfig)];\n\n                    case 1:\n                      authToken = _a.sent();\n                      return [4\n                      /*yield*/\n                      , API.graphql({\n                        query: query,\n                        variables: variables,\n                        authMode: authMode,\n                        authToken: authToken\n                      })];\n\n                    case 2:\n                      return [2\n                      /*return*/\n                      , _a.sent()];\n\n                    case 3:\n                      error_2 = _a.sent();\n                      clientOrForbiddenErrorMessage = getClientSideAuthError(error_2) || getForbiddenError(error_2);\n\n                      if (clientOrForbiddenErrorMessage) {\n                        throw new NonRetryableError(clientOrForbiddenErrorMessage);\n                      }\n\n                      hasItems = Boolean(error_2 && error_2.data && error_2.data[opName] && error_2.data[opName].items);\n\n                      if (this.partialDataFeatureFlagEnabled()) {\n                        if (hasItems) {\n                          result = error_2;\n                          result.data[opName].items = result.data[opName].items.filter(function (item) {\n                            return item !== null;\n                          });\n\n                          if (error_2.errors) {\n                            Hub.dispatch('datastore', {\n                              event: 'syncQueriesPartialSyncError',\n                              data: {\n                                errors: error_2.errors,\n                                modelName: modelDefinition.name\n                              }\n                            });\n                          }\n\n                          return [2\n                          /*return*/\n                          , result];\n                        } else {\n                          throw error_2;\n                        }\n                      }\n\n                      unauthorized = error_2 && error_2.errors && error_2.errors.some(function (err) {\n                        return err.errorType === 'Unauthorized';\n                      });\n\n                      if (unauthorized) {\n                        result = error_2;\n\n                        if (hasItems) {\n                          result.data[opName].items = result.data[opName].items.filter(function (item) {\n                            return item !== null;\n                          });\n                        } else {\n                          result.data[opName] = __assign(__assign({}, opResultDefaults), result.data[opName]);\n                        }\n\n                        logger.warn('queryError', \"User is unauthorized to query \" + opName + \", some items could not be returned.\");\n                        return [2\n                        /*return*/\n                        , result];\n                      } else {\n                        throw error_2;\n                      }\n\n                      return [3\n                      /*break*/\n                      , 4];\n\n                    case 4:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }, [query, variables])];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n\n  SyncProcessor.prototype.start = function (typesLastSync) {\n    var _this = this;\n\n    var processing = true;\n    var _a = this.amplifyConfig,\n        maxRecordsToSync = _a.maxRecordsToSync,\n        syncPageSize = _a.syncPageSize;\n    var parentPromises = new Map();\n    var observable = new Observable(function (observer) {\n      var sortedTypesLastSyncs = Object.values(_this.schema.namespaces).reduce(function (map, namespace) {\n        var e_1, _a;\n\n        try {\n          for (var _b = __values(Array.from(namespace.modelTopologicalOrdering.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var modelName = _c.value;\n            var typeLastSync = typesLastSync.get(namespace.models[modelName]);\n            map.set(namespace.models[modelName], typeLastSync);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n\n        return map;\n      }, new Map());\n      var allModelsReady = Array.from(sortedTypesLastSyncs.entries()).filter(function (_a) {\n        var _b = __read(_a, 1),\n            syncable = _b[0].syncable;\n\n        return syncable;\n      }).map(function (_a) {\n        var _b = __read(_a, 2),\n            modelDefinition = _b[0],\n            _c = __read(_b[1], 2),\n            namespace = _c[0],\n            lastSync = _c[1];\n\n        return __awaiter(_this, void 0, void 0, function () {\n          var done, nextToken, startedAt, items, recordsReceived, filter, parents, promises, promise;\n\n          var _this = this;\n\n          return __generator(this, function (_d) {\n            switch (_d.label) {\n              case 0:\n                done = false;\n                nextToken = null;\n                startedAt = null;\n                items = null;\n                recordsReceived = 0;\n                filter = this.graphqlFilterFromPredicate(modelDefinition);\n                parents = this.schema.namespaces[namespace].modelTopologicalOrdering.get(modelDefinition.name);\n                promises = parents.map(function (parent) {\n                  return parentPromises.get(namespace + \"_\" + parent);\n                });\n                promise = new Promise(function (res) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var limit;\n\n                    var _a;\n\n                    return __generator(this, function (_b) {\n                      switch (_b.label) {\n                        case 0:\n                          return [4\n                          /*yield*/\n                          , Promise.all(promises)];\n\n                        case 1:\n                          _b.sent();\n\n                          _b.label = 2;\n\n                        case 2:\n                          if (!processing) {\n                            return [2\n                            /*return*/\n                            ];\n                          }\n\n                          limit = Math.min(maxRecordsToSync - recordsReceived, syncPageSize);\n                          return [4\n                          /*yield*/\n                          , this.retrievePage(modelDefinition, lastSync, nextToken, limit, filter)];\n\n                        case 3:\n                          _a = _b.sent(), items = _a.items, nextToken = _a.nextToken, startedAt = _a.startedAt;\n                          recordsReceived += items.length;\n                          done = nextToken === null || recordsReceived >= maxRecordsToSync;\n                          observer.next({\n                            namespace: namespace,\n                            modelDefinition: modelDefinition,\n                            items: items,\n                            done: done,\n                            startedAt: startedAt,\n                            isFullSync: !lastSync\n                          });\n                          _b.label = 4;\n\n                        case 4:\n                          if (!done) return [3\n                          /*break*/\n                          , 2];\n                          _b.label = 5;\n\n                        case 5:\n                          res();\n                          return [2\n                          /*return*/\n                          ];\n                      }\n                    });\n                  });\n                });\n                parentPromises.set(namespace + \"_\" + modelDefinition.name, promise);\n                return [4\n                /*yield*/\n                , promise];\n\n              case 1:\n                _d.sent();\n\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      });\n      Promise.all(allModelsReady).then(function () {\n        observer.complete();\n      });\n      return function () {\n        processing = false;\n      };\n    });\n    return observable;\n  };\n\n  return SyncProcessor;\n}();\n\nexport { SyncProcessor };","map":{"version":3,"mappings":"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","names":["API","Observable","buildGraphQLOperation","getModelAuthModes","getClientSideAuthError","getForbiddenError","predicateToGraphQLFilter","getTokenForCustomAuth","jitteredExponentialRetry","ConsoleLogger","Logger","Hub","NonRetryableError","ModelPredicateCreator","opResultDefaults","items","nextToken","startedAt","logger","schema","syncPredicates","amplifyConfig","authModeStrategy","WeakMap","generateQueries","SyncProcessor","Object","values","namespaces","forEach","namespace","models","filter","_a","syncable","_b","opNameQuery","_this","typeQuery","set","model","predicatesGroup","getPredicates","get","modelDefinition","lastSync","limit","opName","query","variables","defaultAuthMode","aws_appsync_authenticationType","modelName","name","modelAuthModes","_d","readAuthModes","READ","authModeAttempts","authModeRetry","debug","jitteredRetry","authMode","response","length","error_1","warn","data","_c","opResult","newNextToken","flag","sessionStorage","getItem","Boolean","e","authToken","graphql","clientOrForbiddenErrorMessage","error_2","hasItems","partialDataFeatureFlagEnabled","result","errors","dispatch","event","unauthorized","some","errorType","__assign","typesLastSync","processing","maxRecordsToSync","syncPageSize","parentPromises","Map","observable","sortedTypesLastSyncs","reduce","map","from","modelTopologicalOrdering","keys","typeLastSync","allModelsReady","Array","entries","done","recordsReceived","graphqlFilterFromPredicate","parents","promises","parent","promise","Promise","res","all","Math","min","retrievePage","observer","next","isFullSync","then","complete"],"sources":["/Users/richards/node_modules/@aws-amplify/datastore/src/sync/processors/sync.ts"],"sourcesContent":["import API, { GraphQLResult, GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport Observable from 'zen-observable-ts';\nimport {\n\tInternalSchema,\n\tModelInstanceMetadata,\n\tSchemaModel,\n\tModelPredicate,\n\tPredicatesGroup,\n\tGraphQLFilter,\n\tAuthModeStrategy,\n} from '../../types';\nimport {\n\tbuildGraphQLOperation,\n\tgetModelAuthModes,\n\tgetClientSideAuthError,\n\tgetForbiddenError,\n\tpredicateToGraphQLFilter,\n\tgetTokenForCustomAuth,\n} from '../utils';\nimport {\n\tjitteredExponentialRetry,\n\tConsoleLogger as Logger,\n\tHub,\n\tNonRetryableError,\n} from '@aws-amplify/core';\nimport { ModelPredicateCreator } from '../../predicates';\n\nconst opResultDefaults = {\n\titems: [],\n\tnextToken: null,\n\tstartedAt: null,\n};\n\nconst logger = new Logger('DataStore');\n\nclass SyncProcessor {\n\tprivate readonly typeQuery = new WeakMap<SchemaModel, [string, string]>();\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly syncPredicates: WeakMap<SchemaModel, ModelPredicate<any>>,\n\t\tprivate readonly amplifyConfig: Record<string, any> = {},\n\t\tprivate readonly authModeStrategy: AuthModeStrategy\n\t) {\n\t\tthis.generateQueries();\n\t}\n\n\tprivate generateQueries() {\n\t\tObject.values(this.schema.namespaces).forEach(namespace => {\n\t\t\tObject.values(namespace.models)\n\t\t\t\t.filter(({ syncable }) => syncable)\n\t\t\t\t.forEach(model => {\n\t\t\t\t\tconst [[, ...opNameQuery]] = buildGraphQLOperation(\n\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t'LIST'\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.typeQuery.set(model, opNameQuery);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate graphqlFilterFromPredicate(model: SchemaModel): GraphQLFilter {\n\t\tif (!this.syncPredicates) {\n\t\t\treturn null;\n\t\t}\n\t\tconst predicatesGroup: PredicatesGroup<any> = ModelPredicateCreator.getPredicates(\n\t\t\tthis.syncPredicates.get(model),\n\t\t\tfalse\n\t\t);\n\n\t\tif (!predicatesGroup) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn predicateToGraphQLFilter(predicatesGroup);\n\t}\n\n\tprivate async retrievePage<\n\t\tT extends ModelInstanceMetadata = ModelInstanceMetadata\n\t>(\n\t\tmodelDefinition: SchemaModel,\n\t\tlastSync: number,\n\t\tnextToken: string,\n\t\tlimit: number = null,\n\t\tfilter: GraphQLFilter\n\t): Promise<{ nextToken: string; startedAt: number; items: T[] }> {\n\t\tconst [opName, query] = this.typeQuery.get(modelDefinition);\n\n\t\tconst variables = {\n\t\t\tlimit,\n\t\t\tnextToken,\n\t\t\tlastSync,\n\t\t\tfilter,\n\t\t};\n\n\t\tconst modelAuthModes = await getModelAuthModes({\n\t\t\tauthModeStrategy: this.authModeStrategy,\n\t\t\tdefaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n\t\t\tmodelName: modelDefinition.name,\n\t\t\tschema: this.schema,\n\t\t});\n\n\t\t// sync only needs the READ auth mode(s)\n\t\tconst readAuthModes = modelAuthModes.READ;\n\n\t\tlet authModeAttempts = 0;\n\t\tconst authModeRetry = async () => {\n\t\t\ttry {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`Attempting sync with authMode: ${readAuthModes[authModeAttempts]}`\n\t\t\t\t);\n\t\t\t\tconst response = await this.jitteredRetry<T>({\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\topName,\n\t\t\t\t\tmodelDefinition,\n\t\t\t\t\tauthMode: readAuthModes[authModeAttempts],\n\t\t\t\t});\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`Sync successful with authMode: ${readAuthModes[authModeAttempts]}`\n\t\t\t\t);\n\t\t\t\treturn response;\n\t\t\t} catch (error) {\n\t\t\t\tauthModeAttempts++;\n\t\t\t\tif (authModeAttempts >= readAuthModes.length) {\n\t\t\t\t\tconst authMode = readAuthModes[authModeAttempts - 1];\n\t\t\t\t\tlogger.debug(`Sync failed with authMode: ${authMode}`, error);\n\t\t\t\t\tif (getClientSideAuthError(error) || getForbiddenError(error)) {\n\t\t\t\t\t\t// return empty list of data so DataStore will continue to sync other models\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t`User is unauthorized to query ${opName} with auth mode ${authMode}. No data could be returned.`\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t[opName]: opResultDefaults,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`Sync failed with authMode: ${\n\t\t\t\t\t\treadAuthModes[authModeAttempts - 1]\n\t\t\t\t\t}. Retrying with authMode: ${readAuthModes[authModeAttempts]}`\n\t\t\t\t);\n\t\t\t\treturn await authModeRetry();\n\t\t\t}\n\t\t};\n\n\t\tconst { data } = await authModeRetry();\n\n\t\tconst { [opName]: opResult } = data;\n\n\t\tconst { items, nextToken: newNextToken, startedAt } = opResult;\n\n\t\treturn {\n\t\t\tnextToken: newNextToken,\n\t\t\tstartedAt,\n\t\t\titems,\n\t\t};\n\t}\n\n\t// Partial data private feature flag. Not a public API. This will be removed in a future release.\n\tprivate partialDataFeatureFlagEnabled() {\n\t\ttry {\n\t\t\tconst flag = sessionStorage.getItem('datastorePartialData');\n\t\t\treturn Boolean(flag);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate async jitteredRetry<T>({\n\t\tquery,\n\t\tvariables,\n\t\topName,\n\t\tmodelDefinition,\n\t\tauthMode,\n\t}: {\n\t\tquery: string;\n\t\tvariables: { limit: number; lastSync: number; nextToken: string };\n\t\topName: string;\n\t\tmodelDefinition: SchemaModel;\n\t\tauthMode: GRAPHQL_AUTH_MODE;\n\t}): Promise<\n\t\tGraphQLResult<{\n\t\t\t[opName: string]: {\n\t\t\t\titems: T[];\n\t\t\t\tnextToken: string;\n\t\t\t\tstartedAt: number;\n\t\t\t};\n\t\t}>\n\t> {\n\t\treturn await jitteredExponentialRetry(\n\t\t\tasync (query, variables) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst authToken = await getTokenForCustomAuth(\n\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\tthis.amplifyConfig\n\t\t\t\t\t);\n\n\t\t\t\t\treturn await API.graphql({\n\t\t\t\t\t\tquery,\n\t\t\t\t\t\tvariables,\n\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\tauthToken,\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Catch client-side (GraphQLAuthError) & 401/403 errors here so that we don't continue to retry\n\t\t\t\t\tconst clientOrForbiddenErrorMessage =\n\t\t\t\t\t\tgetClientSideAuthError(error) || getForbiddenError(error);\n\t\t\t\t\tif (clientOrForbiddenErrorMessage) {\n\t\t\t\t\t\tthrow new NonRetryableError(clientOrForbiddenErrorMessage);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst hasItems = Boolean(\n\t\t\t\t\t\terror &&\n\t\t\t\t\t\t\terror.data &&\n\t\t\t\t\t\t\terror.data[opName] &&\n\t\t\t\t\t\t\terror.data[opName].items\n\t\t\t\t\t);\n\n\t\t\t\t\tif (this.partialDataFeatureFlagEnabled()) {\n\t\t\t\t\t\tif (hasItems) {\n\t\t\t\t\t\t\tconst result = error;\n\t\t\t\t\t\t\tresult.data[opName].items = result.data[opName].items.filter(\n\t\t\t\t\t\t\t\titem => item !== null\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (error.errors) {\n\t\t\t\t\t\t\t\tHub.dispatch('datastore', {\n\t\t\t\t\t\t\t\t\tevent: 'syncQueriesPartialSyncError',\n\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\terrors: error.errors,\n\t\t\t\t\t\t\t\t\t\tmodelName: modelDefinition.name,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the error is unauthorized, filter out unauthorized items and return accessible items\n\t\t\t\t\tconst unauthorized =\n\t\t\t\t\t\terror &&\n\t\t\t\t\t\terror.errors &&\n\t\t\t\t\t\t(error.errors as [any]).some(\n\t\t\t\t\t\t\terr => err.errorType === 'Unauthorized'\n\t\t\t\t\t\t);\n\t\t\t\t\tif (unauthorized) {\n\t\t\t\t\t\tconst result = error;\n\n\t\t\t\t\t\tif (hasItems) {\n\t\t\t\t\t\t\tresult.data[opName].items = result.data[opName].items.filter(\n\t\t\t\t\t\t\t\titem => item !== null\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.data[opName] = {\n\t\t\t\t\t\t\t\t...opResultDefaults,\n\t\t\t\t\t\t\t\t...result.data[opName],\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t'queryError',\n\t\t\t\t\t\t\t`User is unauthorized to query ${opName}, some items could not be returned.`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t[query, variables]\n\t\t);\n\t}\n\n\tstart(\n\t\ttypesLastSync: Map<SchemaModel, [string, number]>\n\t): Observable<SyncModelPage> {\n\t\tlet processing = true;\n\t\tconst { maxRecordsToSync, syncPageSize } = this.amplifyConfig;\n\t\tconst parentPromises = new Map<string, Promise<void>>();\n\t\tconst observable = new Observable<SyncModelPage>(observer => {\n\t\t\tconst sortedTypesLastSyncs = Object.values(this.schema.namespaces).reduce(\n\t\t\t\t(map, namespace) => {\n\t\t\t\t\tfor (const modelName of Array.from(\n\t\t\t\t\t\tnamespace.modelTopologicalOrdering.keys()\n\t\t\t\t\t)) {\n\t\t\t\t\t\tconst typeLastSync = typesLastSync.get(namespace.models[modelName]);\n\t\t\t\t\t\tmap.set(namespace.models[modelName], typeLastSync);\n\t\t\t\t\t}\n\t\t\t\t\treturn map;\n\t\t\t\t},\n\t\t\t\tnew Map<SchemaModel, [string, number]>()\n\t\t\t);\n\n\t\t\tconst allModelsReady = Array.from(sortedTypesLastSyncs.entries())\n\t\t\t\t.filter(([{ syncable }]) => syncable)\n\t\t\t\t.map(async ([modelDefinition, [namespace, lastSync]]) => {\n\t\t\t\t\tlet done = false;\n\t\t\t\t\tlet nextToken: string = null;\n\t\t\t\t\tlet startedAt: number = null;\n\t\t\t\t\tlet items: ModelInstanceMetadata[] = null;\n\n\t\t\t\t\tlet recordsReceived = 0;\n\t\t\t\t\tconst filter = this.graphqlFilterFromPredicate(modelDefinition);\n\n\t\t\t\t\tconst parents = this.schema.namespaces[\n\t\t\t\t\t\tnamespace\n\t\t\t\t\t].modelTopologicalOrdering.get(modelDefinition.name);\n\t\t\t\t\tconst promises = parents.map(parent =>\n\t\t\t\t\t\tparentPromises.get(`${namespace}_${parent}`)\n\t\t\t\t\t);\n\n\t\t\t\t\tconst promise = new Promise<void>(async res => {\n\t\t\t\t\t\tawait Promise.all(promises);\n\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tif (!processing) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst limit = Math.min(\n\t\t\t\t\t\t\t\tmaxRecordsToSync - recordsReceived,\n\t\t\t\t\t\t\t\tsyncPageSize\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t({ items, nextToken, startedAt } = await this.retrievePage(\n\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\tlastSync,\n\t\t\t\t\t\t\t\tnextToken,\n\t\t\t\t\t\t\t\tlimit,\n\t\t\t\t\t\t\t\tfilter\n\t\t\t\t\t\t\t));\n\n\t\t\t\t\t\t\trecordsReceived += items.length;\n\n\t\t\t\t\t\t\tdone = nextToken === null || recordsReceived >= maxRecordsToSync;\n\n\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\titems,\n\t\t\t\t\t\t\t\tdone,\n\t\t\t\t\t\t\t\tstartedAt,\n\t\t\t\t\t\t\t\tisFullSync: !lastSync,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} while (!done);\n\n\t\t\t\t\t\tres();\n\t\t\t\t\t});\n\n\t\t\t\t\tparentPromises.set(`${namespace}_${modelDefinition.name}`, promise);\n\n\t\t\t\t\tawait promise;\n\t\t\t\t});\n\n\t\t\tPromise.all(allModelsReady).then(() => {\n\t\t\t\tobserver.complete();\n\t\t\t});\n\n\t\t\treturn () => {\n\t\t\t\tprocessing = false;\n\t\t\t};\n\t\t});\n\n\t\treturn observable;\n\t}\n}\n\nexport type SyncModelPage = {\n\tnamespace: string;\n\tmodelDefinition: SchemaModel;\n\titems: ModelInstanceMetadata[];\n\tstartedAt: number;\n\tdone: boolean;\n\tisFullSync: boolean;\n};\n\nexport { SyncProcessor };\n"]},"metadata":{},"sourceType":"module"}