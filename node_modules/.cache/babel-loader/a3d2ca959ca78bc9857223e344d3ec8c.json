{"ast":null,"code":"var ModelSortPredicateCreator =\n/** @class */\nfunction () {\n  function ModelSortPredicateCreator() {}\n\n  ModelSortPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function (_target, propertyKey, receiver) {\n        var field = propertyKey;\n\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n\n        var result = function (sortDirection) {\n          ModelSortPredicateCreator.sortPredicateGroupsMap.get(receiver).push({\n            field: field,\n            sortDirection: sortDirection\n          });\n          return receiver;\n        };\n\n        return result;\n      }\n    });\n    ModelSortPredicateCreator.sortPredicateGroupsMap.set(predicate, []);\n    return predicate;\n  };\n\n  ModelSortPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelSortPredicateCreator.sortPredicateGroupsMap.has(predicate);\n  };\n\n  ModelSortPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n\n    if (throwOnInvalid && !ModelSortPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n\n    return ModelSortPredicateCreator.sortPredicateGroupsMap.get(predicate);\n  }; // transforms cb-style predicate into Proxy\n\n\n  ModelSortPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n\n    return existing(ModelSortPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n\n  ModelSortPredicateCreator.sortPredicateGroupsMap = new WeakMap();\n  return ModelSortPredicateCreator;\n}();\n\nexport { ModelSortPredicateCreator };","map":{"version":3,"mappings":"AASA;AAAA;AAAA;AAAA,wCA2EC;;AArEeA,qDAAf,UACCC,eADD,EAC6B;AAEpB;AACR,QAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAiBC,MAAM,CAACC,IAAP,CAAYJ,eAAe,CAACK,MAA5B,CAAjB,CAAnB;AAEA,QAAIC,OAAJ;AACA,QAAMC,SAAS,GAAG,IAAIC,KAAJ,CACjB,EADiB,EAEhBF,OAAO,GAAG;AACVG,SAAG,EAAH,UAAIC,OAAJ,EAAaC,WAAb,EAA0BC,QAA1B,EAAoD;AACnD,YAAMC,KAAK,GAAGF,WAAd;;AAEA,YAAI,CAACV,UAAU,CAACa,GAAX,CAAeD,KAAf,CAAL,EAA4B;AAC3B,gBAAM,IAAIE,KAAJ,CACL,qCAAmCF,KAAnC,GAAwC,WAAxC,GAAoDG,SAD/C,CAAN;AAGA;;AAED,YAAMC,MAAM,GAAG,UAACC,aAAD,EAA6B;AAC3CnB,mCAAyB,CAACoB,sBAA1B,CACEV,GADF,CACMG,QADN,EAEEQ,IAFF,CAEO;AAAEP,iBAAK,OAAP;AAASK,yBAAa;AAAtB,WAFP;AAIA,iBAAON,QAAP;AACA,SAND;;AAOA,eAAOK,MAAP;AACA;AAlBS,KAFM,CAAlB;AAwBAlB,6BAAyB,CAACoB,sBAA1B,CAAiDE,GAAjD,CAAqDd,SAArD,EAAgE,EAAhE;AAEA,WAAOA,SAAP;AACA,GAlCc;;AAoCRR,+CAAP,UACCQ,SADD,EACe;AAEd,WAAOR,yBAAyB,CAACoB,sBAA1B,CAAiDL,GAAjD,CAAqDP,SAArD,CAAP;AACA,GAJM;;AAMAR,4CAAP,UACCQ,SADD,EAECe,cAFD,EAE+B;AAA9B;AAAAA;AAA8B;;AAE9B,QACCA,cAAc,IACd,CAACvB,yBAAyB,CAACwB,gBAA1B,CAA2ChB,SAA3C,CAFF,EAGE;AACD,YAAM,IAAIQ,KAAJ,CAAU,4BAAV,CAAN;AACA;;AAED,WAAOhB,yBAAyB,CAACoB,sBAA1B,CAAiDV,GAAjD,CAAqDF,SAArD,CAAP;AACA,GAZM,CAhDR,CA8DC;;;AACOR,iDAAP,UACCC,eADD,EAECwB,QAFD,EAEmC;AAElC,QAAI,CAACA,QAAD,IAAa,CAACxB,eAAlB,EAAmC;AAClC,aAAOyB,SAAP;AACA;;AAED,WAAOD,QAAQ,CACdzB,yBAAyB,CAAC2B,sBAA1B,CAAiD1B,eAAjD,CADc,CAAf;AAGA,GAXM;;AA9DQD,qDAAyB,IAAI4B,OAAJ,EAAzB;AA0EhB;AA3EA;;SAAa5B","names":["ModelSortPredicateCreator","modelDefinition","fieldNames","Set","Object","keys","fields","handler","predicate","Proxy","get","_target","propertyKey","receiver","field","has","Error","modelName","result","sortDirection","sortPredicateGroupsMap","push","set","throwOnInvalid","isValidPredicate","existing","undefined","createPredicateBuilder","WeakMap"],"sources":["/Users/richards/node_modules/@aws-amplify/datastore/src/predicates/sort.ts"],"sourcesContent":["import {\n\tPersistentModel,\n\tSchemaModel,\n\tSortPredicate,\n\tProducerSortPredicate,\n\tSortDirection,\n\tSortPredicatesGroup,\n} from '../types';\n\nexport class ModelSortPredicateCreator {\n\tprivate static sortPredicateGroupsMap = new WeakMap<\n\t\tSortPredicate<any>,\n\t\tSortPredicatesGroup<any>\n\t>();\n\n\tprivate static createPredicateBuilder<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel\n\t) {\n\t\tconst { name: modelName } = modelDefinition;\n\t\tconst fieldNames = new Set<keyof T>(Object.keys(modelDefinition.fields));\n\n\t\tlet handler: ProxyHandler<SortPredicate<T>>;\n\t\tconst predicate = new Proxy(\n\t\t\t{} as SortPredicate<T>,\n\t\t\t(handler = {\n\t\t\t\tget(_target, propertyKey, receiver: SortPredicate<T>) {\n\t\t\t\t\tconst field = propertyKey as keyof T;\n\n\t\t\t\t\tif (!fieldNames.has(field)) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Invalid field for model. field: ${field}, model: ${modelName}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = (sortDirection: SortDirection) => {\n\t\t\t\t\t\tModelSortPredicateCreator.sortPredicateGroupsMap\n\t\t\t\t\t\t\t.get(receiver)\n\t\t\t\t\t\t\t.push({ field, sortDirection });\n\n\t\t\t\t\t\treturn receiver;\n\t\t\t\t\t};\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\n\t\tModelSortPredicateCreator.sortPredicateGroupsMap.set(predicate, []);\n\n\t\treturn predicate;\n\t}\n\n\tstatic isValidPredicate<T extends PersistentModel>(\n\t\tpredicate: any\n\t): predicate is SortPredicate<T> {\n\t\treturn ModelSortPredicateCreator.sortPredicateGroupsMap.has(predicate);\n\t}\n\n\tstatic getPredicates<T extends PersistentModel>(\n\t\tpredicate: SortPredicate<T>,\n\t\tthrowOnInvalid: boolean = true\n\t): SortPredicatesGroup<T> {\n\t\tif (\n\t\t\tthrowOnInvalid &&\n\t\t\t!ModelSortPredicateCreator.isValidPredicate(predicate)\n\t\t) {\n\t\t\tthrow new Error('The predicate is not valid');\n\t\t}\n\n\t\treturn ModelSortPredicateCreator.sortPredicateGroupsMap.get(predicate);\n\t}\n\n\t// transforms cb-style predicate into Proxy\n\tstatic createFromExisting<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\texisting: ProducerSortPredicate<T>\n\t) {\n\t\tif (!existing || !modelDefinition) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn existing(\n\t\t\tModelSortPredicateCreator.createPredicateBuilder(modelDefinition)\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}