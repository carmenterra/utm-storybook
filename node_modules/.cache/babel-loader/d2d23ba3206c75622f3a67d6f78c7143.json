{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { ModelPredicateCreator } from '../predicates';\nimport { QueryOne } from '../types';\nimport { USER, SYNC, valuesEqual } from '../util';\nimport { TransformerMutationType } from './utils'; // TODO: Persist deleted ids\n\nvar MutationEventOutbox =\n/** @class */\nfunction () {\n  function MutationEventOutbox(schema, MutationEvent, modelInstanceCreator, ownSymbol) {\n    this.schema = schema;\n    this.MutationEvent = MutationEvent;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.ownSymbol = ownSymbol;\n  }\n\n  MutationEventOutbox.prototype.enqueue = function (storage, mutationEvent) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        storage.runExclusive(function (s) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var mutationEventModelDefinition, predicate, _a, first, incomingMutationType, merged_1, incomingConditionJSON, incomingCondition, merged;\n\n            var _this = this;\n\n            return __generator(this, function (_b) {\n              switch (_b.label) {\n                case 0:\n                  mutationEventModelDefinition = this.schema.namespaces[SYNC].models['MutationEvent'];\n                  predicate = ModelPredicateCreator.createFromExisting(mutationEventModelDefinition, function (c) {\n                    return c.modelId('eq', mutationEvent.modelId).id('ne', _this.inProgressMutationEventId);\n                  });\n                  return [4\n                  /*yield*/\n                  , s.query(this.MutationEvent, predicate)];\n\n                case 1:\n                  _a = __read.apply(void 0, [_b.sent(), 1]), first = _a[0];\n                  if (!(first === undefined)) return [3\n                  /*break*/\n                  , 3];\n                  return [4\n                  /*yield*/\n                  , s.save(mutationEvent, undefined, this.ownSymbol)];\n\n                case 2:\n                  _b.sent();\n\n                  return [2\n                  /*return*/\n                  ];\n\n                case 3:\n                  incomingMutationType = mutationEvent.operation;\n                  if (!(first.operation === TransformerMutationType.CREATE)) return [3\n                  /*break*/\n                  , 8];\n                  if (!(incomingMutationType === TransformerMutationType.DELETE)) return [3\n                  /*break*/\n                  , 5];\n                  return [4\n                  /*yield*/\n                  , s.delete(this.MutationEvent, predicate)];\n\n                case 4:\n                  _b.sent();\n\n                  return [3\n                  /*break*/\n                  , 7];\n\n                case 5:\n                  merged_1 = this.mergeUserFields(first, mutationEvent);\n                  return [4\n                  /*yield*/\n                  , s.save(this.MutationEvent.copyOf(first, function (draft) {\n                    draft.data = merged_1.data;\n                  }), undefined, this.ownSymbol)];\n\n                case 6:\n                  _b.sent();\n\n                  _b.label = 7;\n\n                case 7:\n                  return [3\n                  /*break*/\n                  , 12];\n\n                case 8:\n                  incomingConditionJSON = mutationEvent.condition;\n                  incomingCondition = JSON.parse(incomingConditionJSON);\n                  merged = void 0;\n                  if (!(Object.keys(incomingCondition).length === 0)) return [3\n                  /*break*/\n                  , 10];\n                  merged = this.mergeUserFields(first, mutationEvent); // delete all for model\n\n                  return [4\n                  /*yield*/\n                  , s.delete(this.MutationEvent, predicate)];\n\n                case 9:\n                  // delete all for model\n                  _b.sent();\n\n                  _b.label = 10;\n\n                case 10:\n                  merged = merged || mutationEvent; // Enqueue new one\n\n                  return [4\n                  /*yield*/\n                  , s.save(merged, undefined, this.ownSymbol)];\n\n                case 11:\n                  // Enqueue new one\n                  _b.sent();\n\n                  _b.label = 12;\n\n                case 12:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        });\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  MutationEventOutbox.prototype.dequeue = function (storage, record, recordOp) {\n    return __awaiter(this, void 0, void 0, function () {\n      var head;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.peek(storage)];\n\n          case 1:\n            head = _a.sent();\n            if (!record) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.syncOutboxVersionsOnDequeue(storage, record, head, recordOp)];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , storage.delete(head)];\n\n          case 4:\n            _a.sent();\n\n            this.inProgressMutationEventId = undefined;\n            return [2\n            /*return*/\n            , head];\n        }\n      });\n    });\n  };\n  /**\n   * Doing a peek() implies that the mutation goes \"inProgress\"\n   *\n   * @param storage\n   */\n\n\n  MutationEventOutbox.prototype.peek = function (storage) {\n    return __awaiter(this, void 0, void 0, function () {\n      var head;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , storage.queryOne(this.MutationEvent, QueryOne.FIRST)];\n\n          case 1:\n            head = _a.sent();\n            this.inProgressMutationEventId = head ? head.id : undefined;\n            return [2\n            /*return*/\n            , head];\n        }\n      });\n    });\n  };\n\n  MutationEventOutbox.prototype.getForModel = function (storage, model) {\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationEventModelDefinition, mutationEvents;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            mutationEventModelDefinition = this.schema.namespaces[SYNC].models.MutationEvent;\n            return [4\n            /*yield*/\n            , storage.query(this.MutationEvent, ModelPredicateCreator.createFromExisting(mutationEventModelDefinition, function (c) {\n              return c.modelId('eq', model.id);\n            }))];\n\n          case 1:\n            mutationEvents = _a.sent();\n            return [2\n            /*return*/\n            , mutationEvents];\n        }\n      });\n    });\n  };\n\n  MutationEventOutbox.prototype.getModelIds = function (storage) {\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationEvents, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , storage.query(this.MutationEvent)];\n\n          case 1:\n            mutationEvents = _a.sent();\n            result = new Set();\n            mutationEvents.forEach(function (_a) {\n              var modelId = _a.modelId;\n              return result.add(modelId);\n            });\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  }; // applies _version from the AppSync mutation response to other items\n  // in the mutation queue with the same id\n  // see https://github.com/aws-amplify/amplify-js/pull/7354 for more details\n\n\n  MutationEventOutbox.prototype.syncOutboxVersionsOnDequeue = function (storage, record, head, recordOp) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _version, _lastChangedAt, _deleted, _incomingData, incomingData, data, __version, __lastChangedAt, __deleted, _outgoingData, outgoingData, mutationEventModelDefinition, predicate, outdatedMutations, reconciledMutations;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (head.operation !== recordOp) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            _version = record._version, _lastChangedAt = record._lastChangedAt, _deleted = record._deleted, _incomingData = __rest(record, [\"_version\", \"_lastChangedAt\", \"_deleted\"]);\n            incomingData = this.removeTimestampFields(head.model, _incomingData);\n            data = JSON.parse(head.data);\n\n            if (!data) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            __version = data._version, __lastChangedAt = data._lastChangedAt, __deleted = data._deleted, _outgoingData = __rest(data, [\"_version\", \"_lastChangedAt\", \"_deleted\"]);\n            outgoingData = this.removeTimestampFields(head.model, _outgoingData); // Don't sync the version when the data in the response does not match the data\n            // in the request, i.e., when there's a handled conflict\n\n            if (!valuesEqual(incomingData, outgoingData, true)) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            mutationEventModelDefinition = this.schema.namespaces[SYNC].models['MutationEvent'];\n            predicate = ModelPredicateCreator.createFromExisting(mutationEventModelDefinition, function (c) {\n              return c.modelId('eq', record.id).id('ne', _this.inProgressMutationEventId);\n            });\n            return [4\n            /*yield*/\n            , storage.query(this.MutationEvent, predicate)];\n\n          case 1:\n            outdatedMutations = _a.sent();\n\n            if (!outdatedMutations.length) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            reconciledMutations = outdatedMutations.map(function (m) {\n              var oldData = JSON.parse(m.data);\n\n              var newData = __assign(__assign({}, oldData), {\n                _version: _version,\n                _lastChangedAt: _lastChangedAt\n              });\n\n              return _this.MutationEvent.copyOf(m, function (draft) {\n                draft.data = JSON.stringify(newData);\n              });\n            });\n            return [4\n            /*yield*/\n            , storage.delete(this.MutationEvent, predicate)];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , Promise.all(reconciledMutations.map(function (m) {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , storage.save(m, undefined, this.ownSymbol)];\n\n                    case 1:\n                      return [2\n                      /*return*/\n                      , _a.sent()];\n                  }\n                });\n              });\n            }))];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MutationEventOutbox.prototype.mergeUserFields = function (previous, current) {\n    var _a = JSON.parse(previous.data),\n        _version = _a._version,\n        id = _a.id,\n        _lastChangedAt = _a._lastChangedAt,\n        _deleted = _a._deleted,\n        previousData = __rest(_a, [\"_version\", \"id\", \"_lastChangedAt\", \"_deleted\"]);\n\n    var _b = JSON.parse(current.data),\n        __id = _b.id,\n        __version = _b._version,\n        __lastChangedAt = _b._lastChangedAt,\n        __deleted = _b._deleted,\n        currentData = __rest(_b, [\"id\", \"_version\", \"_lastChangedAt\", \"_deleted\"]);\n\n    var data = JSON.stringify(__assign(__assign({\n      id: id,\n      _version: _version,\n      _lastChangedAt: _lastChangedAt,\n      _deleted: _deleted\n    }, previousData), currentData));\n    return this.modelInstanceCreator(this.MutationEvent, __assign(__assign({}, current), {\n      data: data\n    }));\n  };\n  /*\n  if a model is using custom timestamp fields\n  the custom field names will be stored in the model attributes\n   e.g.\n  \"attributes\": [\n  {\n          \"type\": \"model\",\n          \"properties\": {\n              \"timestamps\": {\n                  \"createdAt\": \"createdOn\",\n                  \"updatedAt\": \"updatedOn\"\n              }\n          }\n  }\n  ]\n  */\n\n\n  MutationEventOutbox.prototype.removeTimestampFields = function (model, record) {\n    var _a, _b;\n\n    var CREATED_AT_DEFAULT_KEY = 'createdAt';\n    var UPDATED_AT_DEFAULT_KEY = 'updatedAt';\n    var createdTimestampKey = CREATED_AT_DEFAULT_KEY;\n    var updatedTimestampKey = UPDATED_AT_DEFAULT_KEY;\n    var modelAttributes = (_a = this.schema.namespaces[USER].models[model].attributes) === null || _a === void 0 ? void 0 : _a.find(function (attr) {\n      return attr.type === 'model';\n    });\n    var timestampFieldsMap = (_b = modelAttributes === null || modelAttributes === void 0 ? void 0 : modelAttributes.properties) === null || _b === void 0 ? void 0 : _b.timestamps;\n\n    if (timestampFieldsMap) {\n      createdTimestampKey = timestampFieldsMap[CREATED_AT_DEFAULT_KEY];\n      updatedTimestampKey = timestampFieldsMap[UPDATED_AT_DEFAULT_KEY];\n    }\n\n    delete record[createdTimestampKey];\n    delete record[updatedTimestampKey];\n    return record;\n  };\n\n  return MutationEventOutbox;\n}();\n\nexport { MutationEventOutbox };","map":{"version":3,"mappings":"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","names":["ModelPredicateCreator","QueryOne","USER","SYNC","valuesEqual","TransformerMutationType","schema","MutationEvent","modelInstanceCreator","ownSymbol","MutationEventOutbox","storage","mutationEvent","runExclusive","s","mutationEventModelDefinition","namespaces","models","predicate","createFromExisting","modelId","id","_this","inProgressMutationEventId","query","_a","_b","first","undefined","save","incomingMutationType","operation","CREATE","DELETE","delete","merged_1","mergeUserFields","copyOf","draft","data","incomingConditionJSON","incomingCondition","JSON","parse","merged","Object","keys","length","record","recordOp","peek","head","syncOutboxVersionsOnDequeue","queryOne","FIRST","model","mutationEvents","result","Set","forEach","add","_version","_lastChangedAt","_deleted","_incomingData","incomingData","removeTimestampFields","__version","__lastChangedAt","__deleted","_outgoingData","outgoingData","outdatedMutations","reconciledMutations","map","oldData","m","newData","stringify","Promise","all","previous","current","previousData","__id","currentData","__assign","CREATED_AT_DEFAULT_KEY","UPDATED_AT_DEFAULT_KEY","createdTimestampKey","updatedTimestampKey","modelAttributes","attributes","find","type","timestampFieldsMap","properties","timestamps"],"sources":["/Users/richards/node_modules/@aws-amplify/datastore/src/sync/outbox.ts"],"sourcesContent":["import { MutationEvent } from './index';\nimport { ModelPredicateCreator } from '../predicates';\nimport {\n\tExclusiveStorage as Storage,\n\tStorageFacade,\n\tStorage as StorageClass,\n} from '../storage/storage';\nimport { ModelInstanceCreator } from '../datastore/datastore';\nimport {\n\tInternalSchema,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tQueryOne,\n} from '../types';\nimport { USER, SYNC, valuesEqual } from '../util';\nimport { TransformerMutationType } from './utils';\n\n// TODO: Persist deleted ids\nclass MutationEventOutbox {\n\tprivate inProgressMutationEventId: string;\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly MutationEvent: PersistentModelConstructor<MutationEvent>,\n\t\tprivate readonly modelInstanceCreator: ModelInstanceCreator,\n\t\tprivate readonly ownSymbol: Symbol\n\t) {}\n\n\tpublic async enqueue(\n\t\tstorage: Storage,\n\t\tmutationEvent: MutationEvent\n\t): Promise<void> {\n\t\tstorage.runExclusive(async s => {\n\t\t\tconst mutationEventModelDefinition =\n\t\t\t\tthis.schema.namespaces[SYNC].models['MutationEvent'];\n\n\t\t\tconst predicate = ModelPredicateCreator.createFromExisting<MutationEvent>(\n\t\t\t\tmutationEventModelDefinition,\n\t\t\t\tc =>\n\t\t\t\t\tc\n\t\t\t\t\t\t.modelId('eq', mutationEvent.modelId)\n\t\t\t\t\t\t.id('ne', this.inProgressMutationEventId)\n\t\t\t);\n\n\t\t\tconst [first] = await s.query(this.MutationEvent, predicate);\n\n\t\t\tif (first === undefined) {\n\t\t\t\tawait s.save(mutationEvent, undefined, this.ownSymbol);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { operation: incomingMutationType } = mutationEvent;\n\n\t\t\tif (first.operation === TransformerMutationType.CREATE) {\n\t\t\t\tif (incomingMutationType === TransformerMutationType.DELETE) {\n\t\t\t\t\tawait s.delete(this.MutationEvent, predicate);\n\t\t\t\t} else {\n\t\t\t\t\t// first gets updated with the incoming mutation's data, condition intentionally skipped\n\n\t\t\t\t\t// we need to merge the fields for a create and update mutation to prevent\n\t\t\t\t\t// data loss, since update mutations only include changed fields\n\t\t\t\t\tconst merged = this.mergeUserFields(first, mutationEvent);\n\t\t\t\t\tawait s.save(\n\t\t\t\t\t\tthis.MutationEvent.copyOf(first, draft => {\n\t\t\t\t\t\t\tdraft.data = merged.data;\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tthis.ownSymbol\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst { condition: incomingConditionJSON } = mutationEvent;\n\t\t\t\tconst incomingCondition = JSON.parse(incomingConditionJSON);\n\t\t\t\tlet merged: MutationEvent;\n\n\t\t\t\t// If no condition\n\t\t\t\tif (Object.keys(incomingCondition).length === 0) {\n\t\t\t\t\tmerged = this.mergeUserFields(first, mutationEvent);\n\n\t\t\t\t\t// delete all for model\n\t\t\t\t\tawait s.delete(this.MutationEvent, predicate);\n\t\t\t\t}\n\n\t\t\t\tmerged = merged || mutationEvent;\n\n\t\t\t\t// Enqueue new one\n\t\t\t\tawait s.save(merged, undefined, this.ownSymbol);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async dequeue(\n\t\tstorage: StorageClass,\n\t\trecord?: PersistentModel,\n\t\trecordOp?: TransformerMutationType\n\t): Promise<MutationEvent> {\n\t\tconst head = await this.peek(storage);\n\n\t\tif (record) {\n\t\t\tawait this.syncOutboxVersionsOnDequeue(storage, record, head, recordOp);\n\t\t}\n\n\t\tawait storage.delete(head);\n\t\tthis.inProgressMutationEventId = undefined;\n\n\t\treturn head;\n\t}\n\n\t/**\n\t * Doing a peek() implies that the mutation goes \"inProgress\"\n\t *\n\t * @param storage\n\t */\n\tpublic async peek(storage: StorageFacade): Promise<MutationEvent> {\n\t\tconst head = await storage.queryOne(this.MutationEvent, QueryOne.FIRST);\n\n\t\tthis.inProgressMutationEventId = head ? head.id : undefined;\n\n\t\treturn head;\n\t}\n\n\tpublic async getForModel<T extends PersistentModel>(\n\t\tstorage: StorageFacade,\n\t\tmodel: T\n\t): Promise<MutationEvent[]> {\n\t\tconst mutationEventModelDefinition =\n\t\t\tthis.schema.namespaces[SYNC].models.MutationEvent;\n\n\t\tconst mutationEvents = await storage.query(\n\t\t\tthis.MutationEvent,\n\t\t\tModelPredicateCreator.createFromExisting(\n\t\t\t\tmutationEventModelDefinition,\n\t\t\t\tc => c.modelId('eq', model.id)\n\t\t\t)\n\t\t);\n\n\t\treturn mutationEvents;\n\t}\n\n\tpublic async getModelIds(storage: StorageFacade): Promise<Set<string>> {\n\t\tconst mutationEvents = await storage.query(this.MutationEvent);\n\n\t\tconst result = new Set<string>();\n\n\t\tmutationEvents.forEach(({ modelId }) => result.add(modelId));\n\n\t\treturn result;\n\t}\n\n\t// applies _version from the AppSync mutation response to other items\n\t// in the mutation queue with the same id\n\t// see https://github.com/aws-amplify/amplify-js/pull/7354 for more details\n\tprivate async syncOutboxVersionsOnDequeue(\n\t\tstorage: StorageClass,\n\t\trecord: PersistentModel,\n\t\thead: PersistentModel,\n\t\trecordOp: string\n\t): Promise<void> {\n\t\tif (head.operation !== recordOp) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { _version, _lastChangedAt, _deleted, ..._incomingData } = record;\n\t\tconst incomingData = this.removeTimestampFields(head.model, _incomingData);\n\n\t\tconst data = JSON.parse(head.data);\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst {\n\t\t\t_version: __version,\n\t\t\t_lastChangedAt: __lastChangedAt,\n\t\t\t_deleted: __deleted,\n\t\t\t..._outgoingData\n\t\t} = data;\n\t\tconst outgoingData = this.removeTimestampFields(head.model, _outgoingData);\n\n\t\t// Don't sync the version when the data in the response does not match the data\n\t\t// in the request, i.e., when there's a handled conflict\n\t\tif (!valuesEqual(incomingData, outgoingData, true)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mutationEventModelDefinition =\n\t\t\tthis.schema.namespaces[SYNC].models['MutationEvent'];\n\n\t\tconst predicate = ModelPredicateCreator.createFromExisting<MutationEvent>(\n\t\t\tmutationEventModelDefinition,\n\t\t\tc => c.modelId('eq', record.id).id('ne', this.inProgressMutationEventId)\n\t\t);\n\n\t\tconst outdatedMutations = await storage.query(\n\t\t\tthis.MutationEvent,\n\t\t\tpredicate\n\t\t);\n\n\t\tif (!outdatedMutations.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst reconciledMutations = outdatedMutations.map(m => {\n\t\t\tconst oldData = JSON.parse(m.data);\n\n\t\t\tconst newData = { ...oldData, _version, _lastChangedAt };\n\n\t\t\treturn this.MutationEvent.copyOf(m, draft => {\n\t\t\t\tdraft.data = JSON.stringify(newData);\n\t\t\t});\n\t\t});\n\n\t\tawait storage.delete(this.MutationEvent, predicate);\n\n\t\tawait Promise.all(\n\t\t\treconciledMutations.map(\n\t\t\t\tasync m => await storage.save(m, undefined, this.ownSymbol)\n\t\t\t)\n\t\t);\n\t}\n\n\tprivate mergeUserFields(\n\t\tprevious: MutationEvent,\n\t\tcurrent: MutationEvent\n\t): MutationEvent {\n\t\tconst { _version, id, _lastChangedAt, _deleted, ...previousData } =\n\t\t\tJSON.parse(previous.data);\n\n\t\tconst {\n\t\t\tid: __id,\n\t\t\t_version: __version,\n\t\t\t_lastChangedAt: __lastChangedAt,\n\t\t\t_deleted: __deleted,\n\t\t\t...currentData\n\t\t} = JSON.parse(current.data);\n\n\t\tconst data = JSON.stringify({\n\t\t\tid,\n\t\t\t_version,\n\t\t\t_lastChangedAt,\n\t\t\t_deleted,\n\t\t\t...previousData,\n\t\t\t...currentData,\n\t\t});\n\n\t\treturn this.modelInstanceCreator(this.MutationEvent, {\n\t\t\t...current,\n\t\t\tdata,\n\t\t});\n\t}\n\n\t/* \n\tif a model is using custom timestamp fields\n\tthe custom field names will be stored in the model attributes\n\n\te.g.\n\t\"attributes\": [\n    {\n\t\t\t\"type\": \"model\",\n\t\t\t\"properties\": {\n\t\t\t\t\"timestamps\": {\n\t\t\t\t\t\"createdAt\": \"createdOn\",\n\t\t\t\t\t\"updatedAt\": \"updatedOn\"\n\t\t\t\t}\n\t\t\t}\n    }\n\t]\n\t*/\n\tprivate removeTimestampFields(\n\t\tmodel: string,\n\t\trecord: PersistentModel\n\t): PersistentModel {\n\t\tconst CREATED_AT_DEFAULT_KEY = 'createdAt';\n\t\tconst UPDATED_AT_DEFAULT_KEY = 'updatedAt';\n\n\t\tlet createdTimestampKey = CREATED_AT_DEFAULT_KEY;\n\t\tlet updatedTimestampKey = UPDATED_AT_DEFAULT_KEY;\n\n\t\tconst modelAttributes = this.schema.namespaces[USER].models[\n\t\t\tmodel\n\t\t].attributes?.find(attr => attr.type === 'model');\n\t\tconst timestampFieldsMap = modelAttributes?.properties?.timestamps;\n\n\t\tif (timestampFieldsMap) {\n\t\t\tcreatedTimestampKey = timestampFieldsMap[CREATED_AT_DEFAULT_KEY];\n\t\t\tupdatedTimestampKey = timestampFieldsMap[UPDATED_AT_DEFAULT_KEY];\n\t\t}\n\n\t\tdelete (record as Record<string, any>)[createdTimestampKey];\n\t\tdelete (record as Record<string, any>)[updatedTimestampKey];\n\n\t\treturn record;\n\t}\n}\n\nexport { MutationEventOutbox };\n"]},"metadata":{},"sourceType":"module"}