{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport camelcaseKeys from 'camelcase-keys';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { LocationClient, SearchPlaceIndexForTextCommand, SearchPlaceIndexForPositionCommand } from '@aws-sdk/client-location';\nvar logger = new Logger('AmazonLocationServiceProvider');\n\nvar AmazonLocationServiceProvider =\n/** @class */\nfunction () {\n  /**\n   * Initialize Geo with AWS configurations\n   * @param {Object} config - Configuration object for Geo\n   */\n  function AmazonLocationServiceProvider(config) {\n    this._config = config ? config : {};\n    logger.debug('Geo Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   * @returns {string} name of the category\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getCategory = function () {\n    return AmazonLocationServiceProvider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getProviderName = function () {\n    return AmazonLocationServiceProvider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Geo part with aws configuration\n   * @param {Object} config - Configuration of the Geo\n   * @return {Object} - Current configuration\n   */\n\n\n  AmazonLocationServiceProvider.prototype.configure = function (config) {\n    logger.debug('configure Amazon Location Service Provider', config);\n    if (!config) return this._config;\n    this._config = Object.assign({}, this._config, config);\n    return this._config;\n  };\n  /**\n   * Get the map resources that are currently available through the provider\n   * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getAvailableMaps = function () {\n    this._verifyMapResources();\n\n    var mapStyles = [];\n    var availableMaps = this._config.maps.items;\n    var region = this._config.region;\n\n    for (var mapName in availableMaps) {\n      var style = availableMaps[mapName].style;\n      mapStyles.push({\n        mapName: mapName,\n        style: style,\n        region: region\n      });\n    }\n\n    return mapStyles;\n  };\n  /**\n   * Get the map resource set as default in amplify config\n   * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getDefaultMap = function () {\n    this._verifyMapResources();\n\n    var mapName = this._config.maps.default;\n    var style = this._config.maps.items[mapName].style;\n    var region = this._config.region;\n    return {\n      mapName: mapName,\n      style: style,\n      region: region\n    };\n  };\n  /**\n   * Search by text input with optional parameters\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchByText = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n\n            if (options) {\n              locationServiceInput.FilterCountries = options.countries;\n              locationServiceInput.MaxResults = options.maxResults;\n\n              if (options.searchIndexName) {\n                locationServiceInput.IndexName = options.searchIndexName;\n              }\n\n              if (options['biasPosition']) {\n                locationServiceInput.BiasPosition = options['biasPosition'];\n              } else if (options['searchAreaConstraints']) {\n                locationServiceInput.FilterBBox = options['searchAreaConstraints'];\n              }\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_1 = _a.sent();\n            logger.debug(error_1);\n            throw error_1;\n\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults, {\n              deep: true\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Reverse geocoding search via a coordinate point on the map\n   * @param coordinates - Coordinates array for the search input\n   * @param options - Options parameters for the search\n   * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchByCoordinates = function (coordinates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_2, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Position: coordinates,\n              IndexName: this._config.search_indices.default\n            };\n\n            if (options) {\n              if (options.searchIndexName) {\n                locationServiceInput.IndexName = options.searchIndexName;\n              }\n\n              locationServiceInput.MaxResults = options.maxResults;\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForPositionCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_2 = _a.sent();\n            logger.debug(error_2);\n            throw error_2;\n\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults[0], {\n              deep: true\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  AmazonLocationServiceProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2\n            /*return*/\n            , false];\n            cred = Credentials.shear(credentials);\n            logger.debug('Set credentials for storage. Credentials are:', cred);\n            this._config.credentials = cred;\n            return [2\n            /*return*/\n            , true];\n\n          case 2:\n            error_3 = _a.sent();\n            logger.warn('Ensure credentials error. Credentials are:', error_3);\n            return [2\n            /*return*/\n            , false];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyMapResources = function () {\n    if (!this._config.maps) {\n      var errorString = \"No map resources found in amplify config, run 'amplify add geo' to create them and ensure to run `amplify push` after\";\n      logger.warn(errorString);\n      throw new Error(errorString);\n    }\n\n    if (!this._config.maps.default) {\n      var errorString = \"No default map resource found in amplify config, run 'amplify add geo' to create one and ensure to run `amplify push` after\";\n      logger.warn(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._verifySearchIndex = function (optionalSearchIndex) {\n    if ((!this._config.search_indices || !this._config.search_indices.default) && !optionalSearchIndex) {\n      var errorString = 'No Search Index found, please run `amplify add geo` to add one and ensure to run `amplify push` after.';\n      logger.warn(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.CATEGORY = 'Geo';\n  AmazonLocationServiceProvider.PROVIDER_NAME = 'AmazonLocationService';\n  return AmazonLocationServiceProvider;\n}();\n\nexport { AmazonLocationServiceProvider };","map":{"version":3,"mappings":"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","names":["camelcaseKeys","ConsoleLogger","Logger","Credentials","getAmplifyUserAgent","LocationClient","SearchPlaceIndexForTextCommand","SearchPlaceIndexForPositionCommand","logger","config","_config","debug","AmazonLocationServiceProvider","CATEGORY","PROVIDER_NAME","Object","assign","_verifyMapResources","mapStyles","availableMaps","maps","items","region","mapName","style","push","default","text","options","_ensureCredentials","credentialsOK","_a","Error","_verifySearchIndex","searchIndexName","locationServiceInput","Text","IndexName","search_indices","FilterCountries","countries","MaxResults","maxResults","BiasPosition","FilterBBox","client","credentials","customUserAgent","command","send","response","error_1","PascalResults","Results","map","Place","results","deep","coordinates","Position","error_2","get","cred","shear","warn","error_3","errorString","optionalSearchIndex"],"sources":["/Users/richards/node_modules/@aws-amplify/geo/src/Providers/AmazonLocationServiceProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport camelcaseKeys from 'camelcase-keys';\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport {\n\tPlace as PlaceResult,\n\tSearchPlaceIndexForTextCommandInput,\n\tLocationClient,\n\tSearchPlaceIndexForTextCommand,\n\tSearchPlaceIndexForPositionCommand,\n\tSearchPlaceIndexForPositionCommandInput,\n} from '@aws-sdk/client-location';\n\nimport {\n\tGeoConfig,\n\tSearchByTextOptions,\n\tSearchByCoordinatesOptions,\n\tGeoProvider,\n\tPlace,\n\tAmazonLocationServiceMapStyle,\n\tCoordinates,\n} from '../types';\n\nconst logger = new Logger('AmazonLocationServiceProvider');\n\nexport class AmazonLocationServiceProvider implements GeoProvider {\n\tstatic CATEGORY = 'Geo';\n\tstatic PROVIDER_NAME = 'AmazonLocationService';\n\n\t/**\n\t * @private\n\t */\n\tprivate _config;\n\n\t/**\n\t * Initialize Geo with AWS configurations\n\t * @param {Object} config - Configuration object for Geo\n\t */\n\tconstructor(config?: GeoConfig) {\n\t\tthis._config = config ? config : {};\n\t\tlogger.debug('Geo Options', this._config);\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t * @returns {string} name of the category\n\t */\n\tpublic getCategory(): string {\n\t\treturn AmazonLocationServiceProvider.CATEGORY;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t * @returns {string} name of the provider\n\t */\n\tpublic getProviderName(): string {\n\t\treturn AmazonLocationServiceProvider.PROVIDER_NAME;\n\t}\n\n\t/**\n\t * Configure Geo part with aws configuration\n\t * @param {Object} config - Configuration of the Geo\n\t * @return {Object} - Current configuration\n\t */\n\tpublic configure(config?): object {\n\t\tlogger.debug('configure Amazon Location Service Provider', config);\n\t\tif (!config) return this._config;\n\t\tthis._config = Object.assign({}, this._config, config);\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Get the map resources that are currently available through the provider\n\t * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n\t */\n\tpublic getAvailableMaps(): AmazonLocationServiceMapStyle[] {\n\t\tthis._verifyMapResources();\n\n\t\tconst mapStyles: AmazonLocationServiceMapStyle[] = [];\n\t\tconst availableMaps = this._config.maps.items;\n\t\tconst region = this._config.region;\n\n\t\tfor (const mapName in availableMaps) {\n\t\t\tconst style = availableMaps[mapName].style;\n\t\t\tmapStyles.push({ mapName, style, region });\n\t\t}\n\n\t\treturn mapStyles;\n\t}\n\n\t/**\n\t * Get the map resource set as default in amplify config\n\t * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n\t */\n\tpublic getDefaultMap(): AmazonLocationServiceMapStyle {\n\t\tthis._verifyMapResources();\n\n\t\tconst mapName = this._config.maps.default;\n\t\tconst style = this._config.maps.items[mapName].style;\n\t\tconst region = this._config.region;\n\n\t\treturn { mapName, style, region };\n\t}\n\n\t/**\n\t * Search by text input with optional parameters\n\t * @param  {string} text - The text string that is to be searched for\n\t * @param  {SearchByTextOptions} options? - Optional parameters to the search\n\t * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n\t */\n\tpublic async searchByText(\n\t\ttext: string,\n\t\toptions?: SearchByTextOptions\n\t): Promise<Place[]> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifySearchIndex(options?.searchIndexName);\n\n\t\t/**\n\t\t * Setup the searchInput\n\t\t */\n\t\tconst locationServiceInput: SearchPlaceIndexForTextCommandInput = {\n\t\t\tText: text,\n\t\t\tIndexName: this._config.search_indices.default,\n\t\t};\n\n\t\t/**\n\t\t * Map search options to Amazon Location Service input object\n\t\t */\n\t\tif (options) {\n\t\t\tlocationServiceInput.FilterCountries = options.countries;\n\t\t\tlocationServiceInput.MaxResults = options.maxResults;\n\n\t\t\tif (options.searchIndexName) {\n\t\t\t\tlocationServiceInput.IndexName = options.searchIndexName;\n\t\t\t}\n\n\t\t\tif (options['biasPosition']) {\n\t\t\t\tlocationServiceInput.BiasPosition = options['biasPosition'];\n\t\t\t} else if (options['searchAreaConstraints']) {\n\t\t\t\tlocationServiceInput.FilterBBox = options['searchAreaConstraints'];\n\t\t\t}\n\t\t}\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t * The response from Amazon Location Service is a \"Results\" array of objects with a single `Place` item,\n\t\t * which are Place objects in PascalCase.\n\t\t * Here we want to flatten that to an array of results and change them to camelCase\n\t\t */\n\t\tconst PascalResults: PlaceResult[] = response.Results.map(\n\t\t\tresult => result.Place\n\t\t);\n\t\tconst results: Place[] = (camelcaseKeys(PascalResults, {\n\t\t\tdeep: true,\n\t\t}) as undefined) as Place[];\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Reverse geocoding search via a coordinate point on the map\n\t * @param coordinates - Coordinates array for the search input\n\t * @param options - Options parameters for the search\n\t * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n\t */\n\tpublic async searchByCoordinates(\n\t\tcoordinates: Coordinates,\n\t\toptions?: SearchByCoordinatesOptions\n\t): Promise<Place> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifySearchIndex(options?.searchIndexName);\n\n\t\tconst locationServiceInput: SearchPlaceIndexForPositionCommandInput = {\n\t\t\tPosition: coordinates,\n\t\t\tIndexName: this._config.search_indices.default,\n\t\t};\n\n\t\tif (options) {\n\t\t\tif (options.searchIndexName) {\n\t\t\t\tlocationServiceInput.IndexName = options.searchIndexName;\n\t\t\t}\n\t\t\tlocationServiceInput.MaxResults = options.maxResults;\n\t\t}\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new SearchPlaceIndexForPositionCommand(\n\t\t\tlocationServiceInput\n\t\t);\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t * The response from Amazon Location Service is a \"Results\" array with a single `Place` object\n\t\t * which are Place objects in PascalCase.\n\t\t * Here we want to flatten that to an array of results and change them to camelCase\n\t\t */\n\t\tconst PascalResults = response.Results.map(result => result.Place);\n\t\tconst results: Place = (camelcaseKeys(PascalResults[0], {\n\t\t\tdeep: true,\n\t\t}) as any) as Place;\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tprivate async _ensureCredentials(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return false;\n\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\tlogger.debug('Set credentials for storage. Credentials are:', cred);\n\t\t\tthis._config.credentials = cred;\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tlogger.warn('Ensure credentials error. Credentials are:', error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _verifyMapResources() {\n\t\tif (!this._config.maps) {\n\t\t\tconst errorString =\n\t\t\t\t\"No map resources found in amplify config, run 'amplify add geo' to create them and ensure to run `amplify push` after\";\n\t\t\tlogger.warn(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t\tif (!this._config.maps.default) {\n\t\t\tconst errorString =\n\t\t\t\t\"No default map resource found in amplify config, run 'amplify add geo' to create one and ensure to run `amplify push` after\";\n\t\t\tlogger.warn(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tprivate _verifySearchIndex(optionalSearchIndex?: string) {\n\t\tif (\n\t\t\t(!this._config.search_indices || !this._config.search_indices.default) &&\n\t\t\t!optionalSearchIndex\n\t\t) {\n\t\t\tconst errorString =\n\t\t\t\t'No Search Index found, please run `amplify add geo` to add one and ensure to run `amplify push` after.';\n\t\t\tlogger.warn(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}