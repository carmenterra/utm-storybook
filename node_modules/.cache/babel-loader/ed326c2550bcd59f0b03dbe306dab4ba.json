{"ast":null,"code":"import { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { LazyJsonString as __LazyJsonString, extendedEncodeURIComponent as __extendedEncodeURIComponent } from \"@aws-sdk/smithy-client\";\nexport var serializeAws_restJson1DeleteSessionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n\n          if (input.botName !== undefined) {\n            labelValue = input.botName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botName.\");\n          }\n\n          if (input.botAlias !== undefined) {\n            labelValue = input.botAlias;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botAlias.\");\n          }\n\n          if (input.userId !== undefined) {\n            labelValue = input.userId;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: userId.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: userId.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetSessionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n\n          if (input.botName !== undefined) {\n            labelValue = input.botName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botName.\");\n          }\n\n          if (input.botAlias !== undefined) {\n            labelValue = input.botAlias;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botAlias.\");\n          }\n\n          if (input.userId !== undefined) {\n            labelValue = input.userId;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: userId.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: userId.\");\n          }\n\n          query = __assign({}, input.checkpointLabelFilter !== undefined && {\n            checkpointLabelFilter: input.checkpointLabelFilter\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PostContentCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign({\n            \"content-type\": \"application/octet-stream\",\n            \"x-amz-content-sha256\": \"UNSIGNED-PAYLOAD\"\n          }, isSerializableHeaderValue(input.sessionAttributes) && {\n            \"x-amz-lex-session-attributes\": Buffer.from(__LazyJsonString.fromObject(input.sessionAttributes)).toString(\"base64\")\n          }), isSerializableHeaderValue(input.requestAttributes) && {\n            \"x-amz-lex-request-attributes\": Buffer.from(__LazyJsonString.fromObject(input.requestAttributes)).toString(\"base64\")\n          }), isSerializableHeaderValue(input.contentType) && {\n            \"content-type\": input.contentType\n          }), isSerializableHeaderValue(input.accept) && {\n            accept: input.accept\n          }), isSerializableHeaderValue(input.activeContexts) && {\n            \"x-amz-lex-active-contexts\": Buffer.from(__LazyJsonString.fromObject(input.activeContexts)).toString(\"base64\")\n          });\n          resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/content\";\n\n          if (input.botName !== undefined) {\n            labelValue = input.botName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botName.\");\n          }\n\n          if (input.botAlias !== undefined) {\n            labelValue = input.botAlias;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botAlias.\");\n          }\n\n          if (input.userId !== undefined) {\n            labelValue = input.userId;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: userId.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: userId.\");\n          }\n\n          if (input.inputStream !== undefined) {\n            body = input.inputStream;\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PostTextCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/text\";\n\n          if (input.botName !== undefined) {\n            labelValue = input.botName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botName.\");\n          }\n\n          if (input.botAlias !== undefined) {\n            labelValue = input.botAlias;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botAlias.\");\n          }\n\n          if (input.userId !== undefined) {\n            labelValue = input.userId;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: userId.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: userId.\");\n          }\n\n          body = JSON.stringify(__assign(__assign(__assign(__assign({}, input.activeContexts !== undefined && input.activeContexts !== null && {\n            activeContexts: serializeAws_restJson1ActiveContextsList(input.activeContexts, context)\n          }), input.inputText !== undefined && input.inputText !== null && {\n            inputText: input.inputText\n          }), input.requestAttributes !== undefined && input.requestAttributes !== null && {\n            requestAttributes: serializeAws_restJson1StringMap(input.requestAttributes, context)\n          }), input.sessionAttributes !== undefined && input.sessionAttributes !== null && {\n            sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PutSessionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({\n            \"content-type\": \"application/json\"\n          }, isSerializableHeaderValue(input.accept) && {\n            accept: input.accept\n          });\n          resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n\n          if (input.botName !== undefined) {\n            labelValue = input.botName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botName.\");\n          }\n\n          if (input.botAlias !== undefined) {\n            labelValue = input.botAlias;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botAlias.\");\n          }\n\n          if (input.userId !== undefined) {\n            labelValue = input.userId;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: userId.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: userId.\");\n          }\n\n          body = JSON.stringify(__assign(__assign(__assign(__assign({}, input.activeContexts !== undefined && input.activeContexts !== null && {\n            activeContexts: serializeAws_restJson1ActiveContextsList(input.activeContexts, context)\n          }), input.dialogAction !== undefined && input.dialogAction !== null && {\n            dialogAction: serializeAws_restJson1DialogAction(input.dialogAction, context)\n          }), input.recentIntentSummaryView !== undefined && input.recentIntentSummaryView !== null && {\n            recentIntentSummaryView: serializeAws_restJson1IntentSummaryList(input.recentIntentSummaryView, context)\n          }), input.sessionAttributes !== undefined && input.sessionAttributes !== null && {\n            sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DeleteSessionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DeleteSessionCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            botAlias: undefined,\n            botName: undefined,\n            sessionId: undefined,\n            userId: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.botAlias !== undefined && data.botAlias !== null) {\n            contents.botAlias = data.botAlias;\n          }\n\n          if (data.botName !== undefined && data.botName !== null) {\n            contents.botName = data.botName;\n          }\n\n          if (data.sessionId !== undefined && data.sessionId !== null) {\n            contents.sessionId = data.sessionId;\n          }\n\n          if (data.userId !== undefined && data.userId !== null) {\n            contents.userId = data.userId;\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DeleteSessionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"BadRequestException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.lexruntimeservice#ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InternalFailureException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"LimitExceededException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"NotFoundException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1GetSessionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1GetSessionCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            activeContexts: undefined,\n            dialogAction: undefined,\n            recentIntentSummaryView: undefined,\n            sessionAttributes: undefined,\n            sessionId: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.activeContexts !== undefined && data.activeContexts !== null) {\n            contents.activeContexts = deserializeAws_restJson1ActiveContextsList(data.activeContexts, context);\n          }\n\n          if (data.dialogAction !== undefined && data.dialogAction !== null) {\n            contents.dialogAction = deserializeAws_restJson1DialogAction(data.dialogAction, context);\n          }\n\n          if (data.recentIntentSummaryView !== undefined && data.recentIntentSummaryView !== null) {\n            contents.recentIntentSummaryView = deserializeAws_restJson1IntentSummaryList(data.recentIntentSummaryView, context);\n          }\n\n          if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {\n            contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);\n          }\n\n          if (data.sessionId !== undefined && data.sessionId !== null) {\n            contents.sessionId = data.sessionId;\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1GetSessionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n\n    var _g;\n\n    return __generator(this, function (_h) {\n      switch (_h.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _g = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"BadRequestException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"LimitExceededException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"NotFoundException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3\n              /*break*/\n              , 8];\n          }\n\n          return [3\n          /*break*/\n          , 10];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 10:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _h.label = 11;\n\n        case 11:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1PostContentCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2\n        /*return*/\n        , deserializeAws_restJson1PostContentCommandError(output, context)];\n      }\n\n      contents = {\n        $metadata: deserializeMetadata(output),\n        activeContexts: undefined,\n        alternativeIntents: undefined,\n        audioStream: undefined,\n        botVersion: undefined,\n        contentType: undefined,\n        dialogState: undefined,\n        inputTranscript: undefined,\n        intentName: undefined,\n        message: undefined,\n        messageFormat: undefined,\n        nluIntentConfidence: undefined,\n        sentimentResponse: undefined,\n        sessionAttributes: undefined,\n        sessionId: undefined,\n        slotToElicit: undefined,\n        slots: undefined\n      };\n\n      if (output.headers[\"content-type\"] !== undefined) {\n        contents.contentType = output.headers[\"content-type\"];\n      }\n\n      if (output.headers[\"x-amz-lex-intent-name\"] !== undefined) {\n        contents.intentName = output.headers[\"x-amz-lex-intent-name\"];\n      }\n\n      if (output.headers[\"x-amz-lex-nlu-intent-confidence\"] !== undefined) {\n        contents.nluIntentConfidence = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-nlu-intent-confidence\"], \"base64\").toString(\"ascii\"));\n      }\n\n      if (output.headers[\"x-amz-lex-alternative-intents\"] !== undefined) {\n        contents.alternativeIntents = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-alternative-intents\"], \"base64\").toString(\"ascii\"));\n      }\n\n      if (output.headers[\"x-amz-lex-slots\"] !== undefined) {\n        contents.slots = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-slots\"], \"base64\").toString(\"ascii\"));\n      }\n\n      if (output.headers[\"x-amz-lex-session-attributes\"] !== undefined) {\n        contents.sessionAttributes = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-session-attributes\"], \"base64\").toString(\"ascii\"));\n      }\n\n      if (output.headers[\"x-amz-lex-sentiment\"] !== undefined) {\n        contents.sentimentResponse = output.headers[\"x-amz-lex-sentiment\"];\n      }\n\n      if (output.headers[\"x-amz-lex-message\"] !== undefined) {\n        contents.message = output.headers[\"x-amz-lex-message\"];\n      }\n\n      if (output.headers[\"x-amz-lex-message-format\"] !== undefined) {\n        contents.messageFormat = output.headers[\"x-amz-lex-message-format\"];\n      }\n\n      if (output.headers[\"x-amz-lex-dialog-state\"] !== undefined) {\n        contents.dialogState = output.headers[\"x-amz-lex-dialog-state\"];\n      }\n\n      if (output.headers[\"x-amz-lex-slot-to-elicit\"] !== undefined) {\n        contents.slotToElicit = output.headers[\"x-amz-lex-slot-to-elicit\"];\n      }\n\n      if (output.headers[\"x-amz-lex-input-transcript\"] !== undefined) {\n        contents.inputTranscript = output.headers[\"x-amz-lex-input-transcript\"];\n      }\n\n      if (output.headers[\"x-amz-lex-bot-version\"] !== undefined) {\n        contents.botVersion = output.headers[\"x-amz-lex-bot-version\"];\n      }\n\n      if (output.headers[\"x-amz-lex-session-id\"] !== undefined) {\n        contents.sessionId = output.headers[\"x-amz-lex-session-id\"];\n      }\n\n      if (output.headers[\"x-amz-lex-active-contexts\"] !== undefined) {\n        contents.activeContexts = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-active-contexts\"], \"base64\").toString(\"ascii\"));\n      }\n\n      data = output.body;\n      contents.audioStream = data;\n      return [2\n      /*return*/\n      , Promise.resolve(contents)];\n    });\n  });\n};\n\nvar deserializeAws_restJson1PostContentCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;\n\n    var _p;\n\n    return __generator(this, function (_q) {\n      switch (_q.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _p = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_p.body = _q.sent(), _p)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"BadGatewayException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"BadRequestException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ConflictException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.lexruntimeservice#ConflictException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"DependencyFailedException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"InternalFailureException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"LimitExceededException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"LoopDetectedException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.lexruntimeservice#LoopDetectedException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"NotAcceptableException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"com.amazonaws.lexruntimeservice#NotAcceptableException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"NotFoundException\":\n              return [3\n              /*break*/\n              , 18];\n\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3\n              /*break*/\n              , 18];\n\n            case \"RequestTimeoutException\":\n              return [3\n              /*break*/\n              , 20];\n\n            case \"com.amazonaws.lexruntimeservice#RequestTimeoutException\":\n              return [3\n              /*break*/\n              , 20];\n\n            case \"UnsupportedMediaTypeException\":\n              return [3\n              /*break*/\n              , 22];\n\n            case \"com.amazonaws.lexruntimeservice#UnsupportedMediaTypeException\":\n              return [3\n              /*break*/\n              , 22];\n          }\n\n          return [3\n          /*break*/\n          , 24];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 25];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 25];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 25];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 25];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 25];\n\n        case 12:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 25];\n\n        case 14:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 25];\n\n        case 16:\n          _k = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)];\n\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 25];\n\n        case 18:\n          _l = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n\n        case 19:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 25];\n\n        case 20:\n          _m = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1RequestTimeoutExceptionResponse(parsedOutput, context)];\n\n        case 21:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 25];\n\n        case 22:\n          _o = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse(parsedOutput, context)];\n\n        case 23:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 25];\n\n        case 24:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _q.label = 25;\n\n        case 25:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1PostTextCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1PostTextCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            activeContexts: undefined,\n            alternativeIntents: undefined,\n            botVersion: undefined,\n            dialogState: undefined,\n            intentName: undefined,\n            message: undefined,\n            messageFormat: undefined,\n            nluIntentConfidence: undefined,\n            responseCard: undefined,\n            sentimentResponse: undefined,\n            sessionAttributes: undefined,\n            sessionId: undefined,\n            slotToElicit: undefined,\n            slots: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.activeContexts !== undefined && data.activeContexts !== null) {\n            contents.activeContexts = deserializeAws_restJson1ActiveContextsList(data.activeContexts, context);\n          }\n\n          if (data.alternativeIntents !== undefined && data.alternativeIntents !== null) {\n            contents.alternativeIntents = deserializeAws_restJson1IntentList(data.alternativeIntents, context);\n          }\n\n          if (data.botVersion !== undefined && data.botVersion !== null) {\n            contents.botVersion = data.botVersion;\n          }\n\n          if (data.dialogState !== undefined && data.dialogState !== null) {\n            contents.dialogState = data.dialogState;\n          }\n\n          if (data.intentName !== undefined && data.intentName !== null) {\n            contents.intentName = data.intentName;\n          }\n\n          if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n          }\n\n          if (data.messageFormat !== undefined && data.messageFormat !== null) {\n            contents.messageFormat = data.messageFormat;\n          }\n\n          if (data.nluIntentConfidence !== undefined && data.nluIntentConfidence !== null) {\n            contents.nluIntentConfidence = deserializeAws_restJson1IntentConfidence(data.nluIntentConfidence, context);\n          }\n\n          if (data.responseCard !== undefined && data.responseCard !== null) {\n            contents.responseCard = deserializeAws_restJson1ResponseCard(data.responseCard, context);\n          }\n\n          if (data.sentimentResponse !== undefined && data.sentimentResponse !== null) {\n            contents.sentimentResponse = deserializeAws_restJson1SentimentResponse(data.sentimentResponse, context);\n          }\n\n          if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {\n            contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);\n          }\n\n          if (data.sessionId !== undefined && data.sessionId !== null) {\n            contents.sessionId = data.sessionId;\n          }\n\n          if (data.slotToElicit !== undefined && data.slotToElicit !== null) {\n            contents.slotToElicit = data.slotToElicit;\n          }\n\n          if (data.slots !== undefined && data.slots !== null) {\n            contents.slots = deserializeAws_restJson1StringMap(data.slots, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1PostTextCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;\n\n    var _l;\n\n    return __generator(this, function (_m) {\n      switch (_m.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _l = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"BadGatewayException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"BadRequestException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ConflictException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.lexruntimeservice#ConflictException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"DependencyFailedException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"InternalFailureException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"LimitExceededException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"LoopDetectedException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.lexruntimeservice#LoopDetectedException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"NotFoundException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3\n              /*break*/\n              , 16];\n          }\n\n          return [3\n          /*break*/\n          , 18];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 12:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 14:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 16:\n          _k = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 18:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _m.label = 19;\n\n        case 19:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1PutSessionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2\n        /*return*/\n        , deserializeAws_restJson1PutSessionCommandError(output, context)];\n      }\n\n      contents = {\n        $metadata: deserializeMetadata(output),\n        activeContexts: undefined,\n        audioStream: undefined,\n        contentType: undefined,\n        dialogState: undefined,\n        intentName: undefined,\n        message: undefined,\n        messageFormat: undefined,\n        sessionAttributes: undefined,\n        sessionId: undefined,\n        slotToElicit: undefined,\n        slots: undefined\n      };\n\n      if (output.headers[\"content-type\"] !== undefined) {\n        contents.contentType = output.headers[\"content-type\"];\n      }\n\n      if (output.headers[\"x-amz-lex-intent-name\"] !== undefined) {\n        contents.intentName = output.headers[\"x-amz-lex-intent-name\"];\n      }\n\n      if (output.headers[\"x-amz-lex-slots\"] !== undefined) {\n        contents.slots = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-slots\"], \"base64\").toString(\"ascii\"));\n      }\n\n      if (output.headers[\"x-amz-lex-session-attributes\"] !== undefined) {\n        contents.sessionAttributes = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-session-attributes\"], \"base64\").toString(\"ascii\"));\n      }\n\n      if (output.headers[\"x-amz-lex-message\"] !== undefined) {\n        contents.message = output.headers[\"x-amz-lex-message\"];\n      }\n\n      if (output.headers[\"x-amz-lex-message-format\"] !== undefined) {\n        contents.messageFormat = output.headers[\"x-amz-lex-message-format\"];\n      }\n\n      if (output.headers[\"x-amz-lex-dialog-state\"] !== undefined) {\n        contents.dialogState = output.headers[\"x-amz-lex-dialog-state\"];\n      }\n\n      if (output.headers[\"x-amz-lex-slot-to-elicit\"] !== undefined) {\n        contents.slotToElicit = output.headers[\"x-amz-lex-slot-to-elicit\"];\n      }\n\n      if (output.headers[\"x-amz-lex-session-id\"] !== undefined) {\n        contents.sessionId = output.headers[\"x-amz-lex-session-id\"];\n      }\n\n      if (output.headers[\"x-amz-lex-active-contexts\"] !== undefined) {\n        contents.activeContexts = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-active-contexts\"], \"base64\").toString(\"ascii\"));\n      }\n\n      data = output.body;\n      contents.audioStream = data;\n      return [2\n      /*return*/\n      , Promise.resolve(contents)];\n    });\n  });\n};\n\nvar deserializeAws_restJson1PutSessionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;\n\n    var _l;\n\n    return __generator(this, function (_m) {\n      switch (_m.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _l = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"BadGatewayException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"BadRequestException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ConflictException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.lexruntimeservice#ConflictException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"DependencyFailedException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"InternalFailureException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"LimitExceededException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"NotAcceptableException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.lexruntimeservice#NotAcceptableException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"NotFoundException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3\n              /*break*/\n              , 16];\n          }\n\n          return [3\n          /*break*/\n          , 18];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 12:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 14:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 16:\n          _k = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 19];\n\n        case 18:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _m.label = 19;\n\n        case 19:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1BadGatewayExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"BadGatewayException\",\n        $fault: \"server\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.Message !== undefined && data.Message !== null) {\n        contents.Message = data.Message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1BadRequestExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"BadRequestException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1ConflictExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ConflictException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1DependencyFailedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"DependencyFailedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.Message !== undefined && data.Message !== null) {\n        contents.Message = data.Message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InternalFailureExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InternalFailureException\",\n        $fault: \"server\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1LimitExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LimitExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined,\n        retryAfterSeconds: undefined\n      };\n\n      if (parsedOutput.headers[\"retry-after\"] !== undefined) {\n        contents.retryAfterSeconds = parsedOutput.headers[\"retry-after\"];\n      }\n\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1LoopDetectedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LoopDetectedException\",\n        $fault: \"server\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.Message !== undefined && data.Message !== null) {\n        contents.Message = data.Message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1NotAcceptableExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"NotAcceptableException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1NotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"NotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1RequestTimeoutExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"RequestTimeoutException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"UnsupportedMediaTypeException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar serializeAws_restJson1ActiveContext = function (input, context) {\n  return __assign(__assign(__assign({}, input.name !== undefined && input.name !== null && {\n    name: input.name\n  }), input.parameters !== undefined && input.parameters !== null && {\n    parameters: serializeAws_restJson1ActiveContextParametersMap(input.parameters, context)\n  }), input.timeToLive !== undefined && input.timeToLive !== null && {\n    timeToLive: serializeAws_restJson1ActiveContextTimeToLive(input.timeToLive, context)\n  });\n};\n\nvar serializeAws_restJson1ActiveContextParametersMap = function (input, context) {\n  return Object.entries(input).reduce(function (acc, _a) {\n    var _b;\n\n    var _c = __read(_a, 2),\n        key = _c[0],\n        value = _c[1];\n\n    if (value === null) {\n      return acc;\n    }\n\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n  }, {});\n};\n\nvar serializeAws_restJson1ActiveContextsList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return serializeAws_restJson1ActiveContext(entry, context);\n  });\n};\n\nvar serializeAws_restJson1ActiveContextTimeToLive = function (input, context) {\n  return __assign(__assign({}, input.timeToLiveInSeconds !== undefined && input.timeToLiveInSeconds !== null && {\n    timeToLiveInSeconds: input.timeToLiveInSeconds\n  }), input.turnsToLive !== undefined && input.turnsToLive !== null && {\n    turnsToLive: input.turnsToLive\n  });\n};\n\nvar serializeAws_restJson1DialogAction = function (input, context) {\n  return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.fulfillmentState !== undefined && input.fulfillmentState !== null && {\n    fulfillmentState: input.fulfillmentState\n  }), input.intentName !== undefined && input.intentName !== null && {\n    intentName: input.intentName\n  }), input.message !== undefined && input.message !== null && {\n    message: input.message\n  }), input.messageFormat !== undefined && input.messageFormat !== null && {\n    messageFormat: input.messageFormat\n  }), input.slotToElicit !== undefined && input.slotToElicit !== null && {\n    slotToElicit: input.slotToElicit\n  }), input.slots !== undefined && input.slots !== null && {\n    slots: serializeAws_restJson1StringMap(input.slots, context)\n  }), input.type !== undefined && input.type !== null && {\n    type: input.type\n  });\n};\n\nvar serializeAws_restJson1IntentSummary = function (input, context) {\n  return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.checkpointLabel !== undefined && input.checkpointLabel !== null && {\n    checkpointLabel: input.checkpointLabel\n  }), input.confirmationStatus !== undefined && input.confirmationStatus !== null && {\n    confirmationStatus: input.confirmationStatus\n  }), input.dialogActionType !== undefined && input.dialogActionType !== null && {\n    dialogActionType: input.dialogActionType\n  }), input.fulfillmentState !== undefined && input.fulfillmentState !== null && {\n    fulfillmentState: input.fulfillmentState\n  }), input.intentName !== undefined && input.intentName !== null && {\n    intentName: input.intentName\n  }), input.slotToElicit !== undefined && input.slotToElicit !== null && {\n    slotToElicit: input.slotToElicit\n  }), input.slots !== undefined && input.slots !== null && {\n    slots: serializeAws_restJson1StringMap(input.slots, context)\n  });\n};\n\nvar serializeAws_restJson1IntentSummaryList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return serializeAws_restJson1IntentSummary(entry, context);\n  });\n};\n\nvar serializeAws_restJson1StringMap = function (input, context) {\n  return Object.entries(input).reduce(function (acc, _a) {\n    var _b;\n\n    var _c = __read(_a, 2),\n        key = _c[0],\n        value = _c[1];\n\n    if (value === null) {\n      return acc;\n    }\n\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n  }, {});\n};\n\nvar deserializeAws_restJson1ActiveContext = function (output, context) {\n  return {\n    name: output.name !== undefined && output.name !== null ? output.name : undefined,\n    parameters: output.parameters !== undefined && output.parameters !== null ? deserializeAws_restJson1ActiveContextParametersMap(output.parameters, context) : undefined,\n    timeToLive: output.timeToLive !== undefined && output.timeToLive !== null ? deserializeAws_restJson1ActiveContextTimeToLive(output.timeToLive, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1ActiveContextParametersMap = function (output, context) {\n  return Object.entries(output).reduce(function (acc, _a) {\n    var _b;\n\n    var _c = __read(_a, 2),\n        key = _c[0],\n        value = _c[1];\n\n    if (value === null) {\n      return acc;\n    }\n\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n  }, {});\n};\n\nvar deserializeAws_restJson1ActiveContextsList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1ActiveContext(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1ActiveContextTimeToLive = function (output, context) {\n  return {\n    timeToLiveInSeconds: output.timeToLiveInSeconds !== undefined && output.timeToLiveInSeconds !== null ? output.timeToLiveInSeconds : undefined,\n    turnsToLive: output.turnsToLive !== undefined && output.turnsToLive !== null ? output.turnsToLive : undefined\n  };\n};\n\nvar deserializeAws_restJson1Button = function (output, context) {\n  return {\n    text: output.text !== undefined && output.text !== null ? output.text : undefined,\n    value: output.value !== undefined && output.value !== null ? output.value : undefined\n  };\n};\n\nvar deserializeAws_restJson1DialogAction = function (output, context) {\n  return {\n    fulfillmentState: output.fulfillmentState !== undefined && output.fulfillmentState !== null ? output.fulfillmentState : undefined,\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    message: output.message !== undefined && output.message !== null ? output.message : undefined,\n    messageFormat: output.messageFormat !== undefined && output.messageFormat !== null ? output.messageFormat : undefined,\n    slotToElicit: output.slotToElicit !== undefined && output.slotToElicit !== null ? output.slotToElicit : undefined,\n    slots: output.slots !== undefined && output.slots !== null ? deserializeAws_restJson1StringMap(output.slots, context) : undefined,\n    type: output.type !== undefined && output.type !== null ? output.type : undefined\n  };\n};\n\nvar deserializeAws_restJson1GenericAttachment = function (output, context) {\n  return {\n    attachmentLinkUrl: output.attachmentLinkUrl !== undefined && output.attachmentLinkUrl !== null ? output.attachmentLinkUrl : undefined,\n    buttons: output.buttons !== undefined && output.buttons !== null ? deserializeAws_restJson1listOfButtons(output.buttons, context) : undefined,\n    imageUrl: output.imageUrl !== undefined && output.imageUrl !== null ? output.imageUrl : undefined,\n    subTitle: output.subTitle !== undefined && output.subTitle !== null ? output.subTitle : undefined,\n    title: output.title !== undefined && output.title !== null ? output.title : undefined\n  };\n};\n\nvar deserializeAws_restJson1genericAttachmentList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1GenericAttachment(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1IntentConfidence = function (output, context) {\n  return {\n    score: output.score !== undefined && output.score !== null ? output.score : undefined\n  };\n};\n\nvar deserializeAws_restJson1IntentList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1PredictedIntent(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1IntentSummary = function (output, context) {\n  return {\n    checkpointLabel: output.checkpointLabel !== undefined && output.checkpointLabel !== null ? output.checkpointLabel : undefined,\n    confirmationStatus: output.confirmationStatus !== undefined && output.confirmationStatus !== null ? output.confirmationStatus : undefined,\n    dialogActionType: output.dialogActionType !== undefined && output.dialogActionType !== null ? output.dialogActionType : undefined,\n    fulfillmentState: output.fulfillmentState !== undefined && output.fulfillmentState !== null ? output.fulfillmentState : undefined,\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    slotToElicit: output.slotToElicit !== undefined && output.slotToElicit !== null ? output.slotToElicit : undefined,\n    slots: output.slots !== undefined && output.slots !== null ? deserializeAws_restJson1StringMap(output.slots, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1IntentSummaryList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1IntentSummary(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1listOfButtons = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1Button(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1PredictedIntent = function (output, context) {\n  return {\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    nluIntentConfidence: output.nluIntentConfidence !== undefined && output.nluIntentConfidence !== null ? deserializeAws_restJson1IntentConfidence(output.nluIntentConfidence, context) : undefined,\n    slots: output.slots !== undefined && output.slots !== null ? deserializeAws_restJson1StringMap(output.slots, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1ResponseCard = function (output, context) {\n  return {\n    contentType: output.contentType !== undefined && output.contentType !== null ? output.contentType : undefined,\n    genericAttachments: output.genericAttachments !== undefined && output.genericAttachments !== null ? deserializeAws_restJson1genericAttachmentList(output.genericAttachments, context) : undefined,\n    version: output.version !== undefined && output.version !== null ? output.version : undefined\n  };\n};\n\nvar deserializeAws_restJson1SentimentResponse = function (output, context) {\n  return {\n    sentimentLabel: output.sentimentLabel !== undefined && output.sentimentLabel !== null ? output.sentimentLabel : undefined,\n    sentimentScore: output.sentimentScore !== undefined && output.sentimentScore !== null ? output.sentimentScore : undefined\n  };\n};\n\nvar deserializeAws_restJson1StringMap = function (output, context) {\n  return Object.entries(output).reduce(function (acc, _a) {\n    var _b;\n\n    var _c = __read(_a, 2),\n        key = _c[0],\n        value = _c[1];\n\n    if (value === null) {\n      return acc;\n    }\n\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n  }, {});\n};\n\nvar deserializeMetadata = function (output) {\n  var _a;\n\n  return {\n    httpStatusCode: output.statusCode,\n    requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"]\n  };\n}; // Collect low-level response body stream to Uint8Array.\n\n\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n}; // Encode Uint8Array data into string with utf-8.\n\n\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\n\nvar isSerializableHeaderValue = function (value) {\n  return value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\n\nvar parseBody = function (streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n\n    return {};\n  });\n};\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\n\n\nvar loadRestJsonErrorCode = function (output, data) {\n  var findKey = function (object, key) {\n    return Object.keys(object).find(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n\n  var sanitizeErrorCode = function (rawValue) {\n    var cleanValue = rawValue;\n\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n\n    return cleanValue;\n  };\n\n  var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};","map":{"version":3,"mappings":"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","names":["HttpRequest","__HttpRequest","LazyJsonString","__LazyJsonString","extendedEncodeURIComponent","__extendedEncodeURIComponent","serializeAws_restJson1DeleteSessionCommand","input","context","headers","resolvedPath","botName","undefined","labelValue","length","Error","replace","botAlias","userId","endpoint","_a","_c","hostname","_b","protocol","port","method","path","body","serializeAws_restJson1GetSessionCommand","query","checkpointLabelFilter","serializeAws_restJson1PostContentCommand","isSerializableHeaderValue","sessionAttributes","Buffer","from","fromObject","toString","requestAttributes","contentType","accept","activeContexts","inputStream","serializeAws_restJson1PostTextCommand","JSON","stringify","__assign","serializeAws_restJson1ActiveContextsList","inputText","serializeAws_restJson1StringMap","serializeAws_restJson1PutSessionCommand","dialogAction","serializeAws_restJson1DialogAction","recentIntentSummaryView","serializeAws_restJson1IntentSummaryList","deserializeAws_restJson1DeleteSessionCommand","output","statusCode","deserializeAws_restJson1DeleteSessionCommandError","contents","$metadata","deserializeMetadata","sessionId","parseBody","data","Promise","resolve","parsedOutput","_h","_j","errorCode","loadRestJsonErrorCode","deserializeAws_restJson1BadRequestExceptionResponse","response","name","deserializeAws_restJson1ConflictExceptionResponse","deserializeAws_restJson1InternalFailureExceptionResponse","deserializeAws_restJson1LimitExceededExceptionResponse","deserializeAws_restJson1NotFoundExceptionResponse","parsedBody","code","Code","message","Message","$fault","reject","Object","assign","deserializeAws_restJson1GetSessionCommand","deserializeAws_restJson1GetSessionCommandError","deserializeAws_restJson1ActiveContextsList","deserializeAws_restJson1DialogAction","deserializeAws_restJson1IntentSummaryList","deserializeAws_restJson1StringMap","_g","deserializeAws_restJson1PostContentCommand","deserializeAws_restJson1PostContentCommandError","alternativeIntents","audioStream","botVersion","dialogState","inputTranscript","intentName","messageFormat","nluIntentConfidence","sentimentResponse","slotToElicit","slots","_p","_q","deserializeAws_restJson1BadGatewayExceptionResponse","deserializeAws_restJson1DependencyFailedExceptionResponse","deserializeAws_restJson1LoopDetectedExceptionResponse","deserializeAws_restJson1NotAcceptableExceptionResponse","deserializeAws_restJson1RequestTimeoutExceptionResponse","deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse","deserializeAws_restJson1PostTextCommand","deserializeAws_restJson1PostTextCommandError","responseCard","deserializeAws_restJson1IntentList","deserializeAws_restJson1IntentConfidence","deserializeAws_restJson1ResponseCard","deserializeAws_restJson1SentimentResponse","_l","_m","deserializeAws_restJson1PutSessionCommand","deserializeAws_restJson1PutSessionCommandError","retryAfterSeconds","serializeAws_restJson1ActiveContext","parameters","serializeAws_restJson1ActiveContextParametersMap","timeToLive","serializeAws_restJson1ActiveContextTimeToLive","entries","reduce","acc","key","value","filter","e","map","entry","timeToLiveInSeconds","turnsToLive","fulfillmentState","type","serializeAws_restJson1IntentSummary","checkpointLabel","confirmationStatus","dialogActionType","deserializeAws_restJson1ActiveContext","deserializeAws_restJson1ActiveContextParametersMap","deserializeAws_restJson1ActiveContextTimeToLive","deserializeAws_restJson1Button","text","deserializeAws_restJson1GenericAttachment","attachmentLinkUrl","buttons","deserializeAws_restJson1listOfButtons","imageUrl","subTitle","title","deserializeAws_restJson1genericAttachmentList","score","deserializeAws_restJson1PredictedIntent","deserializeAws_restJson1IntentSummary","genericAttachments","version","sentimentLabel","sentimentScore","httpStatusCode","requestId","extendedRequestId","cfId","collectBody","streamBody","Uint8Array","streamCollector","collectBodyString","then","utf8Encoder","getOwnPropertyNames","includes","size","encoded","parse","findKey","object","keys","find","k","toLowerCase","sanitizeErrorCode","rawValue","cleanValue","indexOf","split","headerKey"],"sources":["/Users/richards/node_modules/@aws-sdk/client-lex-runtime-service/protocols/Aws_restJson1.ts"],"sourcesContent":["import { DeleteSessionCommandInput, DeleteSessionCommandOutput } from \"../commands/DeleteSessionCommand\";\nimport { GetSessionCommandInput, GetSessionCommandOutput } from \"../commands/GetSessionCommand\";\nimport { PostContentCommandInput, PostContentCommandOutput } from \"../commands/PostContentCommand\";\nimport { PostTextCommandInput, PostTextCommandOutput } from \"../commands/PostTextCommand\";\nimport { PutSessionCommandInput, PutSessionCommandOutput } from \"../commands/PutSessionCommand\";\nimport {\n  ActiveContext,\n  ActiveContextTimeToLive,\n  BadGatewayException,\n  BadRequestException,\n  Button,\n  ConflictException,\n  DependencyFailedException,\n  DialogAction,\n  GenericAttachment,\n  IntentConfidence,\n  IntentSummary,\n  InternalFailureException,\n  LimitExceededException,\n  LoopDetectedException,\n  NotAcceptableException,\n  NotFoundException,\n  PredictedIntent,\n  RequestTimeoutException,\n  ResponseCard,\n  SentimentResponse,\n  UnsupportedMediaTypeException,\n} from \"../models/models_0\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  LazyJsonString as __LazyJsonString,\n  SmithyException as __SmithyException,\n  extendedEncodeURIComponent as __extendedEncodeURIComponent,\n} from \"@aws-sdk/smithy-client\";\nimport {\n  Endpoint as __Endpoint,\n  MetadataBearer as __MetadataBearer,\n  ResponseMetadata as __ResponseMetadata,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport const serializeAws_restJson1DeleteSessionCommand = async (\n  input: DeleteSessionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1GetSessionCommand = async (\n  input: GetSessionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  const query: any = {\n    ...(input.checkpointLabelFilter !== undefined && { checkpointLabelFilter: input.checkpointLabelFilter }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PostContentCommand = async (\n  input: PostContentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/octet-stream\",\n    \"x-amz-content-sha256\": \"UNSIGNED-PAYLOAD\",\n    ...(isSerializableHeaderValue(input.sessionAttributes) && {\n      \"x-amz-lex-session-attributes\": Buffer.from(__LazyJsonString.fromObject(input.sessionAttributes!)).toString(\n        \"base64\"\n      ),\n    }),\n    ...(isSerializableHeaderValue(input.requestAttributes) && {\n      \"x-amz-lex-request-attributes\": Buffer.from(__LazyJsonString.fromObject(input.requestAttributes!)).toString(\n        \"base64\"\n      ),\n    }),\n    ...(isSerializableHeaderValue(input.contentType) && { \"content-type\": input.contentType! }),\n    ...(isSerializableHeaderValue(input.accept) && { accept: input.accept! }),\n    ...(isSerializableHeaderValue(input.activeContexts) && {\n      \"x-amz-lex-active-contexts\": Buffer.from(__LazyJsonString.fromObject(input.activeContexts!)).toString(\"base64\"),\n    }),\n  };\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/content\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  let body: any;\n  if (input.inputStream !== undefined) {\n    body = input.inputStream;\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PostTextCommand = async (\n  input: PostTextCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/text\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  let body: any;\n  body = JSON.stringify({\n    ...(input.activeContexts !== undefined &&\n      input.activeContexts !== null && {\n        activeContexts: serializeAws_restJson1ActiveContextsList(input.activeContexts, context),\n      }),\n    ...(input.inputText !== undefined && input.inputText !== null && { inputText: input.inputText }),\n    ...(input.requestAttributes !== undefined &&\n      input.requestAttributes !== null && {\n        requestAttributes: serializeAws_restJson1StringMap(input.requestAttributes, context),\n      }),\n    ...(input.sessionAttributes !== undefined &&\n      input.sessionAttributes !== null && {\n        sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context),\n      }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PutSessionCommand = async (\n  input: PutSessionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n    ...(isSerializableHeaderValue(input.accept) && { accept: input.accept! }),\n  };\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  let body: any;\n  body = JSON.stringify({\n    ...(input.activeContexts !== undefined &&\n      input.activeContexts !== null && {\n        activeContexts: serializeAws_restJson1ActiveContextsList(input.activeContexts, context),\n      }),\n    ...(input.dialogAction !== undefined &&\n      input.dialogAction !== null && { dialogAction: serializeAws_restJson1DialogAction(input.dialogAction, context) }),\n    ...(input.recentIntentSummaryView !== undefined &&\n      input.recentIntentSummaryView !== null && {\n        recentIntentSummaryView: serializeAws_restJson1IntentSummaryList(input.recentIntentSummaryView, context),\n      }),\n    ...(input.sessionAttributes !== undefined &&\n      input.sessionAttributes !== null && {\n        sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context),\n      }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const deserializeAws_restJson1DeleteSessionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteSessionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1DeleteSessionCommandError(output, context);\n  }\n  const contents: DeleteSessionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    botAlias: undefined,\n    botName: undefined,\n    sessionId: undefined,\n    userId: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.botAlias !== undefined && data.botAlias !== null) {\n    contents.botAlias = data.botAlias;\n  }\n  if (data.botName !== undefined && data.botName !== null) {\n    contents.botName = data.botName;\n  }\n  if (data.sessionId !== undefined && data.sessionId !== null) {\n    contents.sessionId = data.sessionId;\n  }\n  if (data.userId !== undefined && data.userId !== null) {\n    contents.userId = data.userId;\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1DeleteSessionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteSessionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ConflictException\":\n    case \"com.amazonaws.lexruntimeservice#ConflictException\":\n      response = {\n        ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1GetSessionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetSessionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1GetSessionCommandError(output, context);\n  }\n  const contents: GetSessionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    activeContexts: undefined,\n    dialogAction: undefined,\n    recentIntentSummaryView: undefined,\n    sessionAttributes: undefined,\n    sessionId: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.activeContexts !== undefined && data.activeContexts !== null) {\n    contents.activeContexts = deserializeAws_restJson1ActiveContextsList(data.activeContexts, context);\n  }\n  if (data.dialogAction !== undefined && data.dialogAction !== null) {\n    contents.dialogAction = deserializeAws_restJson1DialogAction(data.dialogAction, context);\n  }\n  if (data.recentIntentSummaryView !== undefined && data.recentIntentSummaryView !== null) {\n    contents.recentIntentSummaryView = deserializeAws_restJson1IntentSummaryList(data.recentIntentSummaryView, context);\n  }\n  if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {\n    contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);\n  }\n  if (data.sessionId !== undefined && data.sessionId !== null) {\n    contents.sessionId = data.sessionId;\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1GetSessionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetSessionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PostContentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PostContentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PostContentCommandError(output, context);\n  }\n  const contents: PostContentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    activeContexts: undefined,\n    alternativeIntents: undefined,\n    audioStream: undefined,\n    botVersion: undefined,\n    contentType: undefined,\n    dialogState: undefined,\n    inputTranscript: undefined,\n    intentName: undefined,\n    message: undefined,\n    messageFormat: undefined,\n    nluIntentConfidence: undefined,\n    sentimentResponse: undefined,\n    sessionAttributes: undefined,\n    sessionId: undefined,\n    slotToElicit: undefined,\n    slots: undefined,\n  };\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.contentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"x-amz-lex-intent-name\"] !== undefined) {\n    contents.intentName = output.headers[\"x-amz-lex-intent-name\"];\n  }\n  if (output.headers[\"x-amz-lex-nlu-intent-confidence\"] !== undefined) {\n    contents.nluIntentConfidence = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-nlu-intent-confidence\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  if (output.headers[\"x-amz-lex-alternative-intents\"] !== undefined) {\n    contents.alternativeIntents = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-alternative-intents\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  if (output.headers[\"x-amz-lex-slots\"] !== undefined) {\n    contents.slots = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-slots\"], \"base64\").toString(\"ascii\"));\n  }\n  if (output.headers[\"x-amz-lex-session-attributes\"] !== undefined) {\n    contents.sessionAttributes = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-session-attributes\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  if (output.headers[\"x-amz-lex-sentiment\"] !== undefined) {\n    contents.sentimentResponse = output.headers[\"x-amz-lex-sentiment\"];\n  }\n  if (output.headers[\"x-amz-lex-message\"] !== undefined) {\n    contents.message = output.headers[\"x-amz-lex-message\"];\n  }\n  if (output.headers[\"x-amz-lex-message-format\"] !== undefined) {\n    contents.messageFormat = output.headers[\"x-amz-lex-message-format\"];\n  }\n  if (output.headers[\"x-amz-lex-dialog-state\"] !== undefined) {\n    contents.dialogState = output.headers[\"x-amz-lex-dialog-state\"];\n  }\n  if (output.headers[\"x-amz-lex-slot-to-elicit\"] !== undefined) {\n    contents.slotToElicit = output.headers[\"x-amz-lex-slot-to-elicit\"];\n  }\n  if (output.headers[\"x-amz-lex-input-transcript\"] !== undefined) {\n    contents.inputTranscript = output.headers[\"x-amz-lex-input-transcript\"];\n  }\n  if (output.headers[\"x-amz-lex-bot-version\"] !== undefined) {\n    contents.botVersion = output.headers[\"x-amz-lex-bot-version\"];\n  }\n  if (output.headers[\"x-amz-lex-session-id\"] !== undefined) {\n    contents.sessionId = output.headers[\"x-amz-lex-session-id\"];\n  }\n  if (output.headers[\"x-amz-lex-active-contexts\"] !== undefined) {\n    contents.activeContexts = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-active-contexts\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  const data: any = output.body;\n  contents.audioStream = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PostContentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PostContentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadGatewayException\":\n    case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n      response = {\n        ...(await deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ConflictException\":\n    case \"com.amazonaws.lexruntimeservice#ConflictException\":\n      response = {\n        ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"DependencyFailedException\":\n    case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n      response = {\n        ...(await deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LoopDetectedException\":\n    case \"com.amazonaws.lexruntimeservice#LoopDetectedException\":\n      response = {\n        ...(await deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotAcceptableException\":\n    case \"com.amazonaws.lexruntimeservice#NotAcceptableException\":\n      response = {\n        ...(await deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"RequestTimeoutException\":\n    case \"com.amazonaws.lexruntimeservice#RequestTimeoutException\":\n      response = {\n        ...(await deserializeAws_restJson1RequestTimeoutExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"UnsupportedMediaTypeException\":\n    case \"com.amazonaws.lexruntimeservice#UnsupportedMediaTypeException\":\n      response = {\n        ...(await deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PostTextCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PostTextCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PostTextCommandError(output, context);\n  }\n  const contents: PostTextCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    activeContexts: undefined,\n    alternativeIntents: undefined,\n    botVersion: undefined,\n    dialogState: undefined,\n    intentName: undefined,\n    message: undefined,\n    messageFormat: undefined,\n    nluIntentConfidence: undefined,\n    responseCard: undefined,\n    sentimentResponse: undefined,\n    sessionAttributes: undefined,\n    sessionId: undefined,\n    slotToElicit: undefined,\n    slots: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.activeContexts !== undefined && data.activeContexts !== null) {\n    contents.activeContexts = deserializeAws_restJson1ActiveContextsList(data.activeContexts, context);\n  }\n  if (data.alternativeIntents !== undefined && data.alternativeIntents !== null) {\n    contents.alternativeIntents = deserializeAws_restJson1IntentList(data.alternativeIntents, context);\n  }\n  if (data.botVersion !== undefined && data.botVersion !== null) {\n    contents.botVersion = data.botVersion;\n  }\n  if (data.dialogState !== undefined && data.dialogState !== null) {\n    contents.dialogState = data.dialogState;\n  }\n  if (data.intentName !== undefined && data.intentName !== null) {\n    contents.intentName = data.intentName;\n  }\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  if (data.messageFormat !== undefined && data.messageFormat !== null) {\n    contents.messageFormat = data.messageFormat;\n  }\n  if (data.nluIntentConfidence !== undefined && data.nluIntentConfidence !== null) {\n    contents.nluIntentConfidence = deserializeAws_restJson1IntentConfidence(data.nluIntentConfidence, context);\n  }\n  if (data.responseCard !== undefined && data.responseCard !== null) {\n    contents.responseCard = deserializeAws_restJson1ResponseCard(data.responseCard, context);\n  }\n  if (data.sentimentResponse !== undefined && data.sentimentResponse !== null) {\n    contents.sentimentResponse = deserializeAws_restJson1SentimentResponse(data.sentimentResponse, context);\n  }\n  if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {\n    contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);\n  }\n  if (data.sessionId !== undefined && data.sessionId !== null) {\n    contents.sessionId = data.sessionId;\n  }\n  if (data.slotToElicit !== undefined && data.slotToElicit !== null) {\n    contents.slotToElicit = data.slotToElicit;\n  }\n  if (data.slots !== undefined && data.slots !== null) {\n    contents.slots = deserializeAws_restJson1StringMap(data.slots, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PostTextCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PostTextCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadGatewayException\":\n    case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n      response = {\n        ...(await deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ConflictException\":\n    case \"com.amazonaws.lexruntimeservice#ConflictException\":\n      response = {\n        ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"DependencyFailedException\":\n    case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n      response = {\n        ...(await deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LoopDetectedException\":\n    case \"com.amazonaws.lexruntimeservice#LoopDetectedException\":\n      response = {\n        ...(await deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PutSessionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutSessionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PutSessionCommandError(output, context);\n  }\n  const contents: PutSessionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    activeContexts: undefined,\n    audioStream: undefined,\n    contentType: undefined,\n    dialogState: undefined,\n    intentName: undefined,\n    message: undefined,\n    messageFormat: undefined,\n    sessionAttributes: undefined,\n    sessionId: undefined,\n    slotToElicit: undefined,\n    slots: undefined,\n  };\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.contentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"x-amz-lex-intent-name\"] !== undefined) {\n    contents.intentName = output.headers[\"x-amz-lex-intent-name\"];\n  }\n  if (output.headers[\"x-amz-lex-slots\"] !== undefined) {\n    contents.slots = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-slots\"], \"base64\").toString(\"ascii\"));\n  }\n  if (output.headers[\"x-amz-lex-session-attributes\"] !== undefined) {\n    contents.sessionAttributes = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-session-attributes\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  if (output.headers[\"x-amz-lex-message\"] !== undefined) {\n    contents.message = output.headers[\"x-amz-lex-message\"];\n  }\n  if (output.headers[\"x-amz-lex-message-format\"] !== undefined) {\n    contents.messageFormat = output.headers[\"x-amz-lex-message-format\"];\n  }\n  if (output.headers[\"x-amz-lex-dialog-state\"] !== undefined) {\n    contents.dialogState = output.headers[\"x-amz-lex-dialog-state\"];\n  }\n  if (output.headers[\"x-amz-lex-slot-to-elicit\"] !== undefined) {\n    contents.slotToElicit = output.headers[\"x-amz-lex-slot-to-elicit\"];\n  }\n  if (output.headers[\"x-amz-lex-session-id\"] !== undefined) {\n    contents.sessionId = output.headers[\"x-amz-lex-session-id\"];\n  }\n  if (output.headers[\"x-amz-lex-active-contexts\"] !== undefined) {\n    contents.activeContexts = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-active-contexts\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  const data: any = output.body;\n  contents.audioStream = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PutSessionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutSessionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadGatewayException\":\n    case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n      response = {\n        ...(await deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ConflictException\":\n    case \"com.amazonaws.lexruntimeservice#ConflictException\":\n      response = {\n        ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"DependencyFailedException\":\n    case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n      response = {\n        ...(await deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotAcceptableException\":\n    case \"com.amazonaws.lexruntimeservice#NotAcceptableException\":\n      response = {\n        ...(await deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nconst deserializeAws_restJson1BadGatewayExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<BadGatewayException> => {\n  const contents: BadGatewayException = {\n    name: \"BadGatewayException\",\n    $fault: \"server\",\n    $metadata: deserializeMetadata(parsedOutput),\n    Message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.Message !== undefined && data.Message !== null) {\n    contents.Message = data.Message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1BadRequestExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<BadRequestException> => {\n  const contents: BadRequestException = {\n    name: \"BadRequestException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1ConflictExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ConflictException> => {\n  const contents: ConflictException = {\n    name: \"ConflictException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1DependencyFailedExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<DependencyFailedException> => {\n  const contents: DependencyFailedException = {\n    name: \"DependencyFailedException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    Message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.Message !== undefined && data.Message !== null) {\n    contents.Message = data.Message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InternalFailureExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InternalFailureException> => {\n  const contents: InternalFailureException = {\n    name: \"InternalFailureException\",\n    $fault: \"server\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LimitExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LimitExceededException> => {\n  const contents: LimitExceededException = {\n    name: \"LimitExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n    retryAfterSeconds: undefined,\n  };\n  if (parsedOutput.headers[\"retry-after\"] !== undefined) {\n    contents.retryAfterSeconds = parsedOutput.headers[\"retry-after\"];\n  }\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LoopDetectedExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LoopDetectedException> => {\n  const contents: LoopDetectedException = {\n    name: \"LoopDetectedException\",\n    $fault: \"server\",\n    $metadata: deserializeMetadata(parsedOutput),\n    Message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.Message !== undefined && data.Message !== null) {\n    contents.Message = data.Message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1NotAcceptableExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NotAcceptableException> => {\n  const contents: NotAcceptableException = {\n    name: \"NotAcceptableException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1NotFoundExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NotFoundException> => {\n  const contents: NotFoundException = {\n    name: \"NotFoundException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1RequestTimeoutExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<RequestTimeoutException> => {\n  const contents: RequestTimeoutException = {\n    name: \"RequestTimeoutException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<UnsupportedMediaTypeException> => {\n  const contents: UnsupportedMediaTypeException = {\n    name: \"UnsupportedMediaTypeException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst serializeAws_restJson1ActiveContext = (input: ActiveContext, context: __SerdeContext): any => {\n  return {\n    ...(input.name !== undefined && input.name !== null && { name: input.name }),\n    ...(input.parameters !== undefined &&\n      input.parameters !== null && {\n        parameters: serializeAws_restJson1ActiveContextParametersMap(input.parameters, context),\n      }),\n    ...(input.timeToLive !== undefined &&\n      input.timeToLive !== null && {\n        timeToLive: serializeAws_restJson1ActiveContextTimeToLive(input.timeToLive, context),\n      }),\n  };\n};\n\nconst serializeAws_restJson1ActiveContextParametersMap = (\n  input: { [key: string]: string },\n  context: __SerdeContext\n): any => {\n  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {\n    if (value === null) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: value,\n    };\n  }, {});\n};\n\nconst serializeAws_restJson1ActiveContextsList = (input: ActiveContext[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return serializeAws_restJson1ActiveContext(entry, context);\n    });\n};\n\nconst serializeAws_restJson1ActiveContextTimeToLive = (\n  input: ActiveContextTimeToLive,\n  context: __SerdeContext\n): any => {\n  return {\n    ...(input.timeToLiveInSeconds !== undefined &&\n      input.timeToLiveInSeconds !== null && { timeToLiveInSeconds: input.timeToLiveInSeconds }),\n    ...(input.turnsToLive !== undefined && input.turnsToLive !== null && { turnsToLive: input.turnsToLive }),\n  };\n};\n\nconst serializeAws_restJson1DialogAction = (input: DialogAction, context: __SerdeContext): any => {\n  return {\n    ...(input.fulfillmentState !== undefined &&\n      input.fulfillmentState !== null && { fulfillmentState: input.fulfillmentState }),\n    ...(input.intentName !== undefined && input.intentName !== null && { intentName: input.intentName }),\n    ...(input.message !== undefined && input.message !== null && { message: input.message }),\n    ...(input.messageFormat !== undefined && input.messageFormat !== null && { messageFormat: input.messageFormat }),\n    ...(input.slotToElicit !== undefined && input.slotToElicit !== null && { slotToElicit: input.slotToElicit }),\n    ...(input.slots !== undefined &&\n      input.slots !== null && { slots: serializeAws_restJson1StringMap(input.slots, context) }),\n    ...(input.type !== undefined && input.type !== null && { type: input.type }),\n  };\n};\n\nconst serializeAws_restJson1IntentSummary = (input: IntentSummary, context: __SerdeContext): any => {\n  return {\n    ...(input.checkpointLabel !== undefined &&\n      input.checkpointLabel !== null && { checkpointLabel: input.checkpointLabel }),\n    ...(input.confirmationStatus !== undefined &&\n      input.confirmationStatus !== null && { confirmationStatus: input.confirmationStatus }),\n    ...(input.dialogActionType !== undefined &&\n      input.dialogActionType !== null && { dialogActionType: input.dialogActionType }),\n    ...(input.fulfillmentState !== undefined &&\n      input.fulfillmentState !== null && { fulfillmentState: input.fulfillmentState }),\n    ...(input.intentName !== undefined && input.intentName !== null && { intentName: input.intentName }),\n    ...(input.slotToElicit !== undefined && input.slotToElicit !== null && { slotToElicit: input.slotToElicit }),\n    ...(input.slots !== undefined &&\n      input.slots !== null && { slots: serializeAws_restJson1StringMap(input.slots, context) }),\n  };\n};\n\nconst serializeAws_restJson1IntentSummaryList = (input: IntentSummary[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return serializeAws_restJson1IntentSummary(entry, context);\n    });\n};\n\nconst serializeAws_restJson1StringMap = (input: { [key: string]: string }, context: __SerdeContext): any => {\n  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {\n    if (value === null) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: value,\n    };\n  }, {});\n};\n\nconst deserializeAws_restJson1ActiveContext = (output: any, context: __SerdeContext): ActiveContext => {\n  return {\n    name: output.name !== undefined && output.name !== null ? output.name : undefined,\n    parameters:\n      output.parameters !== undefined && output.parameters !== null\n        ? deserializeAws_restJson1ActiveContextParametersMap(output.parameters, context)\n        : undefined,\n    timeToLive:\n      output.timeToLive !== undefined && output.timeToLive !== null\n        ? deserializeAws_restJson1ActiveContextTimeToLive(output.timeToLive, context)\n        : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1ActiveContextParametersMap = (\n  output: any,\n  context: __SerdeContext\n): { [key: string]: string } => {\n  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {\n    if (value === null) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: value,\n    };\n  }, {});\n};\n\nconst deserializeAws_restJson1ActiveContextsList = (output: any, context: __SerdeContext): ActiveContext[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1ActiveContext(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1ActiveContextTimeToLive = (\n  output: any,\n  context: __SerdeContext\n): ActiveContextTimeToLive => {\n  return {\n    timeToLiveInSeconds:\n      output.timeToLiveInSeconds !== undefined && output.timeToLiveInSeconds !== null\n        ? output.timeToLiveInSeconds\n        : undefined,\n    turnsToLive: output.turnsToLive !== undefined && output.turnsToLive !== null ? output.turnsToLive : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1Button = (output: any, context: __SerdeContext): Button => {\n  return {\n    text: output.text !== undefined && output.text !== null ? output.text : undefined,\n    value: output.value !== undefined && output.value !== null ? output.value : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1DialogAction = (output: any, context: __SerdeContext): DialogAction => {\n  return {\n    fulfillmentState:\n      output.fulfillmentState !== undefined && output.fulfillmentState !== null ? output.fulfillmentState : undefined,\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    message: output.message !== undefined && output.message !== null ? output.message : undefined,\n    messageFormat:\n      output.messageFormat !== undefined && output.messageFormat !== null ? output.messageFormat : undefined,\n    slotToElicit: output.slotToElicit !== undefined && output.slotToElicit !== null ? output.slotToElicit : undefined,\n    slots:\n      output.slots !== undefined && output.slots !== null\n        ? deserializeAws_restJson1StringMap(output.slots, context)\n        : undefined,\n    type: output.type !== undefined && output.type !== null ? output.type : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1GenericAttachment = (output: any, context: __SerdeContext): GenericAttachment => {\n  return {\n    attachmentLinkUrl:\n      output.attachmentLinkUrl !== undefined && output.attachmentLinkUrl !== null\n        ? output.attachmentLinkUrl\n        : undefined,\n    buttons:\n      output.buttons !== undefined && output.buttons !== null\n        ? deserializeAws_restJson1listOfButtons(output.buttons, context)\n        : undefined,\n    imageUrl: output.imageUrl !== undefined && output.imageUrl !== null ? output.imageUrl : undefined,\n    subTitle: output.subTitle !== undefined && output.subTitle !== null ? output.subTitle : undefined,\n    title: output.title !== undefined && output.title !== null ? output.title : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1genericAttachmentList = (output: any, context: __SerdeContext): GenericAttachment[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1GenericAttachment(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1IntentConfidence = (output: any, context: __SerdeContext): IntentConfidence => {\n  return {\n    score: output.score !== undefined && output.score !== null ? output.score : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1IntentList = (output: any, context: __SerdeContext): PredictedIntent[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1PredictedIntent(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1IntentSummary = (output: any, context: __SerdeContext): IntentSummary => {\n  return {\n    checkpointLabel:\n      output.checkpointLabel !== undefined && output.checkpointLabel !== null ? output.checkpointLabel : undefined,\n    confirmationStatus:\n      output.confirmationStatus !== undefined && output.confirmationStatus !== null\n        ? output.confirmationStatus\n        : undefined,\n    dialogActionType:\n      output.dialogActionType !== undefined && output.dialogActionType !== null ? output.dialogActionType : undefined,\n    fulfillmentState:\n      output.fulfillmentState !== undefined && output.fulfillmentState !== null ? output.fulfillmentState : undefined,\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    slotToElicit: output.slotToElicit !== undefined && output.slotToElicit !== null ? output.slotToElicit : undefined,\n    slots:\n      output.slots !== undefined && output.slots !== null\n        ? deserializeAws_restJson1StringMap(output.slots, context)\n        : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1IntentSummaryList = (output: any, context: __SerdeContext): IntentSummary[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1IntentSummary(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1listOfButtons = (output: any, context: __SerdeContext): Button[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1Button(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1PredictedIntent = (output: any, context: __SerdeContext): PredictedIntent => {\n  return {\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    nluIntentConfidence:\n      output.nluIntentConfidence !== undefined && output.nluIntentConfidence !== null\n        ? deserializeAws_restJson1IntentConfidence(output.nluIntentConfidence, context)\n        : undefined,\n    slots:\n      output.slots !== undefined && output.slots !== null\n        ? deserializeAws_restJson1StringMap(output.slots, context)\n        : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1ResponseCard = (output: any, context: __SerdeContext): ResponseCard => {\n  return {\n    contentType: output.contentType !== undefined && output.contentType !== null ? output.contentType : undefined,\n    genericAttachments:\n      output.genericAttachments !== undefined && output.genericAttachments !== null\n        ? deserializeAws_restJson1genericAttachmentList(output.genericAttachments, context)\n        : undefined,\n    version: output.version !== undefined && output.version !== null ? output.version : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1SentimentResponse = (output: any, context: __SerdeContext): SentimentResponse => {\n  return {\n    sentimentLabel:\n      output.sentimentLabel !== undefined && output.sentimentLabel !== null ? output.sentimentLabel : undefined,\n    sentimentScore:\n      output.sentimentScore !== undefined && output.sentimentScore !== null ? output.sentimentScore : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1StringMap = (output: any, context: __SerdeContext): { [key: string]: string } => {\n  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {\n    if (value === null) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: value,\n    };\n  }, {});\n};\n\nconst deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"],\n});\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\nconst isSerializableHeaderValue = (value: any): boolean =>\n  value !== undefined &&\n  value !== null &&\n  value !== \"\" &&\n  (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n  (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n\nconst parseBody = (streamBody: any, context: __SerdeContext): any =>\n  collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nconst loadRestJsonErrorCode = (output: __HttpResponse, data: any): string => {\n  const findKey = (object: any, key: string) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n\n  const sanitizeErrorCode = (rawValue: string): string => {\n    let cleanValue = rawValue;\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n\n  const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};\n"]},"metadata":{},"sourceType":"module"}